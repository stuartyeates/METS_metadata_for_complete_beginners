FAC T O R S I N F LU E N C I N G PA R T I C I PA N T
SAT I S FAC T I O N W I T H F R E E / L I B R E A N D
O P E N S O U R C E S O F T WA R E P R O J E C T S
by
brenda lynne chawner
a thesis
submitted to the Victoria University of Wellington
in fulfilment of the requirements for the degree of
Doctor of Philosophy in
Information Systems
Victoria University of Wellington

Brenda Lynne Chawner: Factors Influencing Participant Satisfaction with
Free/Libre and Open Source Software Projects, A Thesis, © July ,
Wellington, New Zealand
Some rights reserved: cc by–sa
Dedicated to my parents, Grace and the late Bob Chawner, who helped
me understand and appreciate the value of education and knowledge.

A B S T R AC T
The purpose of this research was to identify factors that affect partic-
ipants’ satisfaction with their experience of a free/libre open source
software (FLOSS) project. The research built on existing models of user
satisfaction from the information systems literature, and also incor-
porated two characteristics of FLOSS projects first identified by Ye,
Nakakoji, Yamamoto, and Kishida (), product openness and pro-
cess openness. The central research question it answered was, What
factors influence participant satisfaction with a free/libre and open source
application software project?
Richard Stallman’s reasons for setting up the GNU project and the
Free Software Foundation arose from his frustration at being forced to
be a passive user of software used for a Xerox printer. These suggest
that being able to be an active participant in a FLOSS project is one
factor that should be examined, and therefore the first sub-question this
project answers is, What types of contributions do participants make to
free/libre and open source software projects?
Several studies have shown that the extent of participation in a FLOSS
project varies from individual to individual, and this variation leads to
the second sub-question, Do the factors that influence satisfaction vary for
different types of participation? If so, in what way?
A preliminary conceptual model of factors affecting participant sat-
isfaction was developed, reflecting the key concepts identified in the
literature. The main theoretical goal of this research was to test the
model using empirical data.
The research used a sequential, mixed methods approach. The first,
qualitative stage involved reviewing documents from selected projects
and interviewing a purposive sample of FLOSS project participants. The
second, quantitative stage involved an online survey of FLOSS project
participants, and the data gathered were used to test the conceptual
model.
The results of the first stage showed that participation in FLOSS
projects was a more complex construct than previously reported in the
literature. Seven distinct categories of activities were identified:
• use;
• interaction with code;
• supporting the community;
• outreach;
• sponsorship;
v
• management; and
• governance.
Four attributes that modified these categories were also identified: or-
ganisational focus, role formality, remuneration, and time commitment.
Data from  responses to the online survey were used to test the
model using stepwise multiple regression, which determined the effect
of each of the variables on overall participant satisfaction. Moderated
regression analysis was used to test the effects of three potential moderat-
ing variables. The results showed that that perceived system complexity
had the largest effect, decreasing satisfaction if respondents perceived
that the software was complex, while project openness and perceived
developer communication quality accounted for the most variance in
satisfaction.
The main theoretical contribution of this research lies in its extension
of satisfaction studies to FLOSS communities, showing that communi-
cation and openness are more important than in conventional software
projects. Its practical contribution will help people involved in the
management and governance of FLOSS projects to identify ways of in-
creasing their participants’ satisfaction, which may in turn encourage
them to contribute more.
vi
-AC K N OW L E D G M E N T S
This thesis would not have been possible without the encouragement
and support of many people.
First, I would like to thank the people who agreed to be interviewed
for the first stage of the research. They all found time to answer my
questions, and gave me new insights into their perspectives on being
involved with a free/libre open source software project.
The next group of people who need to be thanked are anonymous—the
 people who completed the online survey, and provided the quan-
titative data needed to test the model and hypotheses. Without your
contributions, there would have been little to write about.
When collecting data and writing this thesis, I used free software
whenever possible, and so another group of people who need to be
acknowledged are the developers of this software. These include the
people who wrote NSurvey and LYX, not to mention LATEX and TEX. In
addition, Nick Mariette and André Miede, who developed the LATEX and
LYX templates used to format the thesis need to be thanked for making
it so easy to produce a high-quality typeset document. The bibliography
was formatted using BibTEX, and I found the BibDesk citation manager
software very easy to use. Even the Kp-Fonts package used for the thesis
qualifies as free software, since it was released under the GPL, so my
thanks go to its developers as well. Last, but certainly not least, the many
people who contributed to OpenOffice.org, particularly those involved
with Calc and Draw, made it much easier for me to produce high-quality
figures and graphs to include here.
To my supervisors, Sid Huff and Gary Gorman—thank you for having
confidence in my ability to complete this project. Sid gave me construc-
tive and detailed feedback on my drafts, and Gary encouraged me to
take a closer look at ontology and epistemology. Gillian Oliver also read
the final draft of the thesis, and made valuable comments.
My colleagues in the School of Information Management were also
supportive, and will no doubt be pleased that I have finally finished
this research. In addition, much of this thesis was written while I was
based at the School of Library and Information Studies at the University
of Alberta in Edmonton, Canada. The School provided me with a spa-
cious office while I was there, and Ann Curry and Heidi Julien gave me
ongoing support and encouragement.
My husband, John Rankin, also deserves my thanks, for being there
when I needed someone to talk to, and for being such a dedicated proof-
reader. He was also my LATEX expert, helping me when I found myself out
of my depth with its intricacies. My examiners, Kevin Crowston from
vii
Syracuse University, James Noble, from Victoria University of Welling-
ton, and Arvind Tripathi, from the University of Auckland, provided
detailed and constructive feedback, which helped me improve the final
version of this thesis.
Last, but certainly not least, I’d like to thank Richard Stallman, with-
out whom there would have been no topic. His comment several years
that the results of my research would be “very interesting” made me
smile, and helped me stay motivated to finish.
viii
C O N T E N T S
 introduction 
. Paper jams and their consequences 
. Research questions 
. Significance of topic 
. Value of research results 
. Theoretical approach 
. Research approach 
. Delimitations 
. Terminology 
.. Definitions of key terms 
. Structure of this thesis 
 literature review 
. A brief history of FLOSS 
. Distinctions between ‘Free/Libre’ and ‘Open Source’ Soft-
ware 
.. The Free Software Definition 
.. The Open Source Definition 
.. ‘Free’ vs ‘Open’: two different philosophies 
. Research into FLOSS projects and practices 
.. FLOSS project roles and activities 
.. FLOSS community practices 
. Issues related to studying FLOSS projects and communi-
ties 
. Understanding satisfaction 
. Measuring satisfaction 
. Satisfaction with information systems and software 
.. Classifying satisfaction with information systems
and software 
.. Measuring satisfaction with information systems
and software 
.. Dimensions of satisfaction 
. Other characteristics related to user satisfaction 
.. The FLOSS context 
.. Individual characteristics 
.. Organisational characteristics 
.. Satisfaction and FLOSS projects 
.. Implications for this research 
. Theoretical model for this research 
.. Perceived influence 
.. Perceived developer communication quality 
.. Participant skills and knowledge 
ix
x contents
.. Participant training 
.. Participant experience 
.. Extent of participation 
.. Perceived complexity 
.. Perceived process openness 
.. Perceived product openness 
.. Hypotheses 
. Summary 
 methodology 
. Philosophical paradigm 
.. Ontology 
.. Epistemology 
.. Research methodologies 
. Specific techniques 
.. Stage : Qualitative investigation 
.. Stage : Qualitative investigation 
.. Stage : Quantitative survey 
. Ethical considerations 
. Data analysis 
.. Stage a: Development of participation construct 
.. Stage b: Validation of preliminary model and the
participation construct 
.. Stage : Quantitative survey 
. Reliability 
. Validity 
. Summary 
 project, interviewee, and respondent demographics 
. Stage a: Document review for selected projects 
.. Greenstone 
.. EPrints 
.. Koha 
.. Evergreen 
.. MARC-Record 
.. MyLibrary 
.. PhpMyBibli 
.. reSearcher 
.. DSpace 
.. Open Journal Systems 
. Stage b: Semi-structured interviews 
. Stage c: Web-based survey 
.. Age Group 
.. Gender 
.. Educational qualifications 
.. Country of residence 
.. Years using a computer 
contents xi
.. Operating systems used 
. Understanding and use of FLOSS 
.. Familiarity with FLOSS concepts 
.. Attitude to using FLOSS 
. Summary 
 contributing to a floss project 
. More than just code 
. Types of contributions made to FLOSS projects 
.. Use 
.. Interaction with code 
.. Supporting the community 
.. Outreach 
.. Sponsorship 
.. Management 
.. Governance 
. Attributes that cross all dimensions 
.. Organisational focus 
.. Role formality 
.. Remuneration 
.. Time commitment 
. Discussion 
.. A user-centric view of a FLOSS project 
. Summary 
 individual perspectives on satisfaction 
. Perspectives on satisfaction 
.. Documentation 
.. Community helpfulness 
.. Software characteristics 
.. Cost 
.. Personal benefits 
.. Complexity 
.. Other comments 
.. Attitude 
. Measuring satisfaction with a FLOSS project 
. Summary 
 survey results and model testing 
. Research model review 
. Survey results part  
.. Project name 
.. Length of time using or contributing to the project 
.. Project roles 
.. Hours per week spent working on the project (in-
ternal/shared version) 
.. Paid project time 
.. Activities carried out 
xii contents
.. Impact of Training 
.. Satisfaction with software features 
.. Perceived experience relative to others involved
in the project 
.. Characteristics of developer communication 
.. Project culture 
.. Influence on software features/functionality 
.. Perceived complexity 
.. Other comments 
. Scale construction 
.. Knowledge and skills 
.. Training 
.. Satisfaction 
.. Experience 
.. Developer communication quality 
.. Process openness 
.. Product openness 
.. System complexity 
.. Task complexity 
.. Initial factor analysis 
.. Technical knowledge and skills scale validation 
.. LIM-specific knowledge and skills scale valida-
tion 
.. Process openness scale confirmation 
.. Task complexity scale confirmation 
.. Final factor analysis 
.. Other variables 
. Scale characteristics 
. Model testing 
.. Regression results 
.. Power analysis 
.. Moderated regression analysis 
.. Type of participation and satisfaction 
. Hypothesis testing 
. Revised research model 
. Summary 
 discussion and interpretation of findings 
. Introduction 
. A user-centric view of a FLOSS project 
.. Perspective is important 
.. Terminology matters 
. Factors that influence FLOSS participant satisfaction 
.. The measures 
.. The revised research model 
.. The hypotheses 
.. New moderating variables 
contents xiii
.. Other findings 
. Summary 
 conclusion 
. Introduction 
. Research overview 
.. Research background 
.. Research model 
.. Research design 
.. Research findings and model revision 
. Research contributions 
.. Theoretical contributions 
.. Contributions to practice 
. Limitations of the research 
. Future research 
. Summary 
Appendices 
a stage  human ethics application 
b stage  face-to-face invitation 
c stage  face-to-face information sheet 
d stage  face-to-face information sheet 
e stage  face-to-face interview guide 
f stage  email interview invitation 
g stage  email interview information sheet 
h stage  email interview guide 
i stage  human ethics application 
j stage  survey invitation 
k stage  web-based survey 
l highlighted transcripts 
m stage  data analysis: activities 
n stage  data analysis: roles 
o stage  data analysis: activity categories 
p stage  data analysis: satisfaction causes 
q survey construction 
bibliography 
L I S T O F F I G U R E S
Figure  FLOSS project hierarchical structure 
Figure  Research model 
Figure  Stage b analysis flow diagram 
Figure  FLOSS contribution model 
Figure  Research model with items 
Figure  Impact of Training (%) 
Figure  Box plots of satisfaction with project characteris-
tics 
Figure  Box plot of mean overall satisfaction 
Figure  Box plot of experience relative to others involved
in the project 
Figure  Residual histogram following stepwise regression 
Figure  Residual scattergram following stepwise regres-
sion 
Figure  Revised research model 
L I S T O F TA B L E S
Table  FLOSS participant roles 
Table  System dimensions of satisfaction 
Table  Information dimensions of satisfaction 
Table  Community dimensions of satisfaction 
Table  Tool-related dimensions of satisfaction 
Table  User-related dimensions of satisfaction 
Table  Context-specific dimensions of satisfaction 
Table  Summary of project sample characteristics 
Table  Construct composition 
Table  Stage a Project Characteristics 
Table  Stage b Interviewee Characteristics 
Table  Age of respondents 
Table  Gender of respondents 
Table  Highest educational qualification 
Table  Country of residence 
Table  Years using a computer 
Table  Number of operating systems used 
Table  Operating systems used 
Table  Type of operating systems used 
Table  Familiarity with FLOSS concepts 
xiv
list of tables xv
Table  Attitude to using FLOSS 
Table  List of community-oriented activities 
Table  Management roles in FLOSS projects 
Table  Governance activities 
Table  Interviewee activity summary 
Table  Length of time using or contributing to project 
Table  Hours per week spent working on the project 
Table  Paid proportion 
Table  Activities carried out 
Table  Impact of Training 
Table  Satisfaction with project features 
Table  Experience relative to others involved in the project 
Table  Developer communication characteristics 
Table  Project culture 
Table  Influence on software features/functionality 
Table  System complexity 
Table  Task complexity 
Table  Knowledge and Skills Scale Validation 
Table  Training Scale Validation 
Table  Satisfaction Scale Validation 
Table  Experience Scale Validation 
Table  Developer Communication Scale Validation 
Table  Process Openness Scale Validation  
Table  Process Openness Scale Validation  
Table  Product Openness Scale Validation 
Table  System Complexity Scale Validation 
Table  Task Complexity Scale Validation 
Table  Item statement codes 
Table  Factor analysis structure matrix 
Table  Factor analysis pattern matrix 
Table  Component correlation matrix 
Table  Technical Knowledge and Skills Scale Validation 
Table  Technical Knowledge and Skills Scale Validation 
Table  LIM-specific Knowledge and Skills Scale Valida-
tion 
Table  Revised Process openness Scale Validation  
Table  Revised Process openness Scale Validation  
Table  Revised Task complexity Scale Validation 
Table  Final factor analysis pattern matrix 
Table  Final factor analysis structure matrix 
Table  Final component correlation matrix 
Table  Scale characteristics 
Table  Multicollinearity diagnostics 
Table  Model Summary 
Table  Coefficients 
Table  System complexity and participation model sum-
mary 
Table  System complexity and participation regression
coefficients 
Table  Process openness and participation model sum-
mary 
Table  Process openness and participation regression co-
efficients 
Table  Product openness and influence model summary 
Table  Influence and product openness regression coeffi-
cients 
Table  Organisational focus 
Table  Organisational focus model summary 
Table  Local focus coefficients 
Table  Non-local focus coefficients 
Table  Remuneration category 
Table  Remuneration category model summary 
Table  % or less coefficients 
Table  More than % coefficients 
Table  Time commitment model summary 
Table  Below median 
Table  Above median 
Table  Survey question characteristics 
AC R O N Y M S
FLOSS Free/Libre and Open Source Software
IS Information Systems
LIM Library and Information Management
xvi
1
I N T R O D U C T I O N
The topic of this thesis, factors that influence satisfaction with free/libre
and open source software (FLOSS) projects, is motivated by a story
about a jammed printer and a sense of frustration. This was documented
by Williams in his  biography of Richard Stallman (p.–). The
following version is based on this, but has been extended with details
provided by Stallman in a series of personal communications (October
).
. paper jams and their consequences
Thirty years ago, Richard Stallman, who was then working as a systems
programmer in the Massachusetts Institute of Technology Artificial
Intelligence Laboratory (AI Lab), had a problem. Xerox had given the
AI Lab one of its latest laser printers, which was based on photocopier
technology. This machine had many advantages: it used ordinary paper
and was very fast; however, once installed, it turned out to be subject
to frequent paper jams. This was annoying to everyone working in the
lab; they would go to the printer for their output, only to find that the
machine needed attention. Once someone resolved the issue, everyone
then had to waste time waiting for it to print their work. The lab’s
previous printer had also suffered from paper jams which caused delays;
Stallman’s solution to this involved modifying its source code so that
everyone whose print job was affected by a malfunction was sent a
message asking them to check the printer. As a result, printer problems
were resolved as quickly as possible, rather than waiting for someone
to notice them. However, this time he was frustrated—no source code
was available for the new Xerox printer, and he was therefore unable
to implement a similar solution. When he did track down a computer
scientist at Carnegie Mellon University who had a copy of the source
code he wanted, Stallman was refused access to it because the scientist
had signed a non-disclosure agreement with Xerox.
This ran counter to Stallman’s experience at Harvard’s Cruft Lab and
in the MIT AI Lab. According to the prevalent ‘hacker ethic’, code was
meant to be freely shared, and it was a programmer’s duty to share
innovations with others on request. Stallman had been familiar with this
co-operative behaviour since the early s, when Ed Taft, a systems
administrator at the Cruft Lab, told him that the lab had a policy of
refusing to install software unless the source code could be displayed for
users. Taft also said that this was considered to be appropriate behaviour

 introduction
for an educational institution (personal communication, R. M. Stallman,
 October ).
Stallman’s frustration with an increasing trend to restrict access to
source code led him to start the GNU project in ; its objective
was to develop an operating system that users were free to modify.
This was followed two years later by his establishing the Free Software
Foundation, whose mission is “to promote computer user freedom and
to defend the rights of all free software users” (Free Software Foundation,
). Stallman identified four essential computer user freedoms:
• the freedom to run the program, for any purpose (Freedom );
• the freedom to study how the program works, and adapt it to local
needs (Freedom );
• the freedom to redistribute copies so others can benefit from the
software (Freedom );
• the freedom to improve the program, and release the improved
version to the public, so that the community can benefit (Freedom
) (, p.).
In order to exercise their rights under Freedoms  and , users need
access to a program’s source code. Stallman’s frustration with the AI
Lab’s Xerox printer would have been easily resolved if the license for the
printer driver had provided this freedom. Any software user who has
had an experience similar to Stallman’s could potentially use Freedom 
to resolve their frustration by taking advantage of this provision, if the
software complied with the Free Software Definition.
Now, over  years later, the impact of Stallman’s actions is consider-
able. Free (as in freedom) software is now used in millions of computers
worldwide, with thousands of developers involved in projects to write
software released under licenses which guarantee access to source code.
The following examples show that this impact covers all aspects of
computer use, such as operating systems, database management soft-
ware, web servers, programming languages, and end-user application
software.
In , VDC reported that GNU/Linux was the most popular operat-
ing system chosen for embedded systems, growing from .% in 
to % in  (Linux Devices, ). Netcraft’s regular surveys of web
servers consistently show that Apache is used on over % of the world’s
web servers (Netcraft ). Over  individuals, working for over
 companies, have contributed to the Linux kernel (Kroah-Hartman,
Corbet, and McPherson, ). Programmers and web developers have
a choice of free languages, including Perl, Python, and PHP; MySQL
and PostgreSQL provide relational database capabilities for large-scale
application development. Prominent companies such as Amazon.com
and Google make extensive use of free software in their technical in-
frastructure (Dahl, Banerjee, and Spalti, , p.). Computer users
. research questions 
can choose from the OpenOffice productivity suite (providing word pro-
cessing, spreadsheet, presentation, graphics and database functionality),
the Firefox web browser, the Thunderbird email client, the GIMP image
editor, and the WordPress blogging engine, to name just a few. All users
of these (and all) FLOSS packages have the right to improve them to suit
local needs, assuming they have access to the necessary technical skills.
The free software movement, and the related open source develop-
ment process, which split off from the original movement, taking on on
a separate identity in , have attracted considerable attention from
academic researchers, particularly in the last  years. Recent literature
reviews by Aksulu and Wade (), and Crowston, Wei, Howison and
Wiggins (, in press) show the breadth and depth of this research.
Specific research topics have included:
• demographics of the FLOSS developer community (e.g. Dempsey,
Weiss, Jones, and Greenberg ; David and Shapiro );
• the open source development process, which is often perceived as
lacking formal structure, in contrast to traditional approaches to
software development (e.g. Scacchi );
• the motivation and beliefs of individual developers (e.g. Hars and
Ou, ; Hann, Roberts, and Slaughter ); and
• project culture (e.g. von Krogh, Spaeth, and Lakhani ).
However, little research has been conducted with respect to Stallman’s
main motivation for setting up the GNU project and the Free Software
Foundation: a lack of satisfaction caused by his inability to modify the
source code for the printer in order to make it work more effectively.
The goal of this project was to fill this gap by identifying factors that
affect participant satisfaction with free/libre and open source software
projects. The research extended existing models of user satisfaction from
the information systems literature, in particular those of Mahmood,
Burn, Gemoets, and Jacquez (), McKeen, Guimaraes, and Wetherbe
(), and Guimaraes, Staples, and McKeen (), by incorporating
two characteristics of FLOSS projects first identified by Ye, Nakakoji,
Yamamoto, and Kishida ().
. research questions
The central research question this study answers is:
What factors influence participant satisfaction with a free/libre
and open source application software project?
Stallman’s reasons for setting up the GNU project and the Free Software
Foundation came from his frustration at being forced to be a passive
 The distinction between ‘free software’ and ‘open source’ is explained more fully in Section
. on page .
 introduction
consumer (“user”) of the software used in the Xerox printer This sug-
gests that being able to be an active participant in the project is one
factor that should be examined, and therefore the first sub-question this
project answers is:
What types of contributions do participants make to free/libre
and open source software projects?
Existing models of participation in a FLOSS project show that different
people are involved in different ways (see for example Crowston, Wei,
and Howison ), and this variation leads directly to the second
sub-question:
Do the factors that influence satisfaction vary for different types
of participation? If so, in what way?
. significance of topic
Studies of customer satisfaction are common in the retail and service
industries. Allen suggested that these are popular because satisfaction
research has shown that there is a relationship between the level of
satisfaction and a desired business outcome (, p.). These desired
outcomes include increased sales and long term customer retention.
Denove and Power showed that there is a positive relationship between
customer satisfaction with an automobile brand and sales of the brand
(, p.). In particular, brands with high customer satisfaction rat-
ings increased their sales by % between  and , while sales
for brands with low satisfaction ratings decreased by % (p.). Allen
acknowledged that factors influencing customer retention are complex,
but said that empirical research suggests that customers who have posi-
tive experiences are most likely to continue to use a product or service,
while those who have unresolved problems are less likely to be loyal
to the product or service (, p.). He also suggested that it is less
expensive to retain an existing customer than to attract new ones (p.).
Other evidence of the importance of satisfaction and its measurement
to modern businesses came from the researcher’s recent experiences. In
July , a sign on the door of my local branch of a Canadian bank
said “We want you to be very satisfied with your visit today”. This
suggests that the bank’s managers see satisfaction as a key measure of
their customers’ perceptions of the quality of the service they receive.
In October , I received an invitation to complete an online survey
measuring my satisfaction with a recent stay in a large hotel chain. My
responses included a mild complaint about the complexity of setting up
an Internet connection, which resulted in a personal message from the
hotel manager saying that he would look into the issue. These experi-
ences show that two very different businesses are applying the results
of satisfaction research in their interactions with their customers, in-
. value of research results 
dicating that satisfaction research has practical as well as theoretical
implications.
Both of the previous examples show that satisfaction is being used
as an indication of service quality. This makes intuitive sense because
satisfaction (and its opposite, dissatisfaction) can have powerful effects.
Blackshaw suggested that someone who has an unsatisfying experience
is likely to influence many more people than someone who is satisfied
(, p.–). This means that it is important to understand the nature
of satisfaction, how to measure it, and what factors influence someone’s
satisfaction with a project, organisation, or software package, since no
one, whether a company director, an IT manager, or a software developer,
wants to have unhappy users of their products, services, or software
discouraging other people from using it.
The apparent lack of previous research into factors that affect par-
ticipant satisfaction with a free/libre and open source project means
that project developers who wish to take steps to maintain or increase
people’s satisfaction with their projects currently have little evidence to
act on, and must rely on intuition or anecdotes, rather than data. The
results of this research are intended to fill that gap.
. value of research results
The results of this research have both theoretical and practical value.
These are discussed in more detail in Chapter  on page , and are
summarised below.
Its theoretical contribution lies in two main areas:
• the results include a multidimensional framework for understand-
ing types of contributions to FLOSS projects, extending the more
conventional code-centric, developer-focused models that domi-
nate the FLOSS research literature, by including categories relating
to the wider user and stakeholder community, such as project gov-
ernance; and
• the research extends models of factors that influence satisfaction
with software to a FLOSS context, and shows that these follow a
different pattern to satisfaction models for conventional software
projects.
These findings will benefit people who participate in FLOSS projects,
particularly those who are involved in management, community-building,
or governance activities. The results showed that project openness, or
the extent to which the project is perceived as welcoming new commu-
nity members and encouraging their contributions, has the strongest
relationship with satisfaction, followed by the perceived quality of de-
veloper communication. In addition, perceived complexity was found to
decrease satisfaction. Understanding the importance of these character-
 introduction
istics will allow people involved in managing or governing individual
projects to review and improve the way they present their projects to
others, and to put policies in place to ensure that the quality of commu-
nication is high.
Practitioners in the field of library and information management who
are interested in becoming involved with a FLOSS project may also
benefit from the results of this research, since it gives them a framework
to identify different ways in which they could participate in projects.
. theoretical approach
Previous research has identified three groups of characteristics that have
a significant effect on satisfaction in conventional software development
projects:
• features of the software itself, such as perceived complexity, use-
fulness, and ease of use;
• aspects of the overall development process, such as the quality of
developer communication and perceived user influence; and
• attributes of individual users, such as their education, experience,
and training.
This thesis built on existing models of user satisfaction from the infor-
mation systems literature, in particular those of Guimaraes, Staples,
and McKeen (), Mahmood, Burn, Gemoets, and Jacquez (), and
McKeen, Guimaraes, and Wetherbe (), incorporating two character-
istics of FLOSS projects first identified by Ye, Nakakoji, Yamamoto, and
Kishida (), product openness and process openness. In addition,
this research extended the satisfaction models so that they could apply
to any participant in a FLOSS project, rather than limiting them to users,
since the boundaries between roles have been found to be less clearly
defined than in conventional software development projects (Gacek and
Arief ).
. research approach
The research used a sequential, mixed methods approach, which suited
its post-positivist epistemology. Post-positivism treats knowledge as
being objective and measurable, but acknowledges that this knowledge
may also be imperfect or incomplete. By using a sequential, mixed meth-
ods approach, data to answer the research questions were gathered using
complementary techniques, in order to provide multiple perspectives
and, at least partially, compensate for imperfections or incompleteness.
Once the preliminary research area had been determined, a literature
review was conducted, in order to develop a deeper understanding of
. delimitations 
the research context. This focused on two main areas: FLOSS project
structure and participant activities, and satisfaction, particularly user
satisfaction with software projects. Once the literature review was com-
plete, specific research questions, a preliminary conceptual model, and
hypotheses were developed, reflecting the key concepts identified in the
literature.
This was followed by a qualitative stage which involved reviewing
documents from selected projects and interviewing a purposive sample
of FLOSS project participants, chosen to represent a range of roles and
types of projects. The results of a content analysis of the observations
and interviews were used to develop a user-centric model of FLOSS
participation, and to review the preliminary conceptual model and
hypotheses. The final quantitative stage involved an online survey of
FLOSS project participants, and the data gathered were used to test the
conceptual model and hypotheses, leading to a final, revised model.
. delimitations
The most important delimitation of this research was that it was re-
stricted to participants in FLOSS application projects intended for use
in library and information management, rather than in the full spectrum
of FLOSS projects. The definition of the term application software in
Section .. on the following page shows that this type of software is
intended for use by end users to carry out their work or business tasks.
In addition, this type of software is typically adopted by an organisa-
tion, rather than by an individual. This means that the findings cannot
necessarily be generalised to all types of FLOSS projects, or even to all
FLOSS application projects.
Another delimitation was that the interviews and survey were con-
ducted in English, limiting participation to people who spoke the lan-
guage. This means that the results may not be generalised to all partici-
pants in FLOSS application software projects. In particular, it may not
represent the views of people in Europe, or in developing countries such
as India and Pakistan, who are heavily involved in using and developing
FLOSS.
. terminology
The term ‘open source’, now widely used, was coined by a group of ‘free
software’ proponents (among them Eric S. Raymond and Tim O’Reilly)
in February  as a marketing device to overcome what they saw as an
anti-business bias of the free software movement started  years earlier
by Richard Stallman (DiBona, Ockman and Stone , p.; Feller and
Fitzgerald , p.). They established the Open Source Initiative
to promote the Open Source Definition (OSD) and certify software
 introduction
licences as being OSD compliant. Stallman has continued to promote
the term ‘free software’, and argues that there are basic ethical and
philosophical differences between the two movements (Stallman ).
These differences primarily relate to terminology. Stallman prefers to
emphasise the importance of freedom and the rights of users to access
and modify source code for all software they use, as defined in the Free
Software Definition. In contrast, the Open Source Definition emphasises
licence requirements, with a focus on developers’ rights.
It is important to note that the term ‘free’, as used by Stallman, does
not refer to cost, but is instead about ‘freedom’—the freedom of software
users to modify source code for their own purposes, and to redistribute
the changes freely. While the two movements represent different un-
derlying philosophies, they have similar objectives, and in the spirit of
compromise, this thesis uses a hybrid term, Free/Libre and Open Source
Software (FLOSS). The term ‘libre’ is French, and has the same root as
the English word ‘liberty’, a synonym for freedom. By including it in the
acronym used throughout this thesis, the researcher is emphasising the
‘freedom’ aspect of FLOSS, to avoid implying that ‘free software’ must
be free of cost.
.. Definitions of key terms
The definitions below are based on the literature review carried out as
part of the study.
Application software
Software that is designed for direct use by an end user, and performs
‘real world’ tasks. Examples of application software include word pro-
cessors, spreadsheets, and web browsers. Application software also
includes industry-specific software such as library management systems
or digital library/institutional repository management packages.
Developer
A person involved in a software project who works directly with the
source code, by either writing and testing new code or by changing
existing code.
Free/libre open source software
Software released under a free/libre and open source licence, which
ensures that the source code is available to users (and potential users),
and allows them to modify it to suit their needs, as well as redistribute
the source code, and their modifications, to others.
. structure of this thesis 
Participant
A person who contributes to a FLOSS project, for example by writing
source code, fixing bugs, writing documentation, supporting other mem-
bers of the project’s community, taking part in project governance, or
providing resources.
Satisfaction
“The satisfying of a need or desire as it affects or motivates behaviour”
where ‘satisfying’ means “meeting or fulfilling the wish or desire or
expectation of; to be accepted by (a person, his taste, judgement, etc.) as
all that could be reasonably desired" (’satisfaction’ and ‘satisfy’, Oxford
English Dictionary Online, ).
Source code
Statements in a programming language that comprise a computer pro-
gram or software package and are readable by humans.
User
A person who uses application software in the course of his or her
normal tasks, but does not necessarily contribute to the source code.
. structure of this thesis
The remainder of this thesis is presented as nine chapters:
• Chapter  reviews relevant literature and concludes with a prelim-
inary research model and hypotheses.
• Chapter  describes the methodology used in this study.
• Chapter  provides a demographic overview of the projects, inter-
viewees, and survey respondents.
• Chapter  presents the results of the qualitative analysis of inter-
view data relating to the types of contributions participants make
to FLOSS projects.
• Chapter  presents the qualitative analysis of interview data re-
lating to factors that influence FLOSS participant satisfaction and
concludes with a revised research model and hypotheses.
• Chapter  analyses the survey data and tests the revised research
model and hypotheses.
• Chapter  discusses the findings and their implications.
• Chapter  summarises the research project and presents sugges-
tions for further research.

2
L I T E R AT U R E R E V I E W
This thesis involves two main topics: participation in free/libre and open
source software projects and participant satisfaction. Section . on the
current page begins with a brief history of the development of FLOSS,
followed by a discussion of the emerging FLOSS research literature,
with an emphasis on project structure and participation. Section .
on page  discusses the nature of satisfaction, focusing on selected
information systems research literature dealing with satisfaction. This
includes a small number of studies that have looked at satisfaction in
the context of FLOSS projects. The chapter concludes with a preliminary
research model of factors that are related to participant satisfaction with
FLOSS, showing the relationships and hypotheses that were tested as
part of this research.
Material for this literature review was collected using a range of
techniques. The first step involved searching library catalogues and
a range of databases including ProQuest, Library Literature and In-
formation Science Fulltext, and the ACM and IEEE digital libraries,
for material on satisfaction, participation, and FLOSS. Citations in
recent review articles were used to locate older, classic articles, and
Web of Knowledge was used to locate newer material that cited key
early papers. In addition, conference web sites, such as the Interna-
tional Conference on Information Systems and HICSS (Hawaii Inter-
national Conference on System Sciences), were searched for papers on
these topics. Finally, FLOSS portals such as the MIT Free/Open Source
Research Community portal (http://opensource.mit.edu/), the open-
source.ucc.ie: resources for researchers (http://opensource.ucc.ie/), and
FLOSS@Syracuse (http://floss.syr.edu/) were checked regularly for new
material. Proceedings from FLOSS conferences and workshops, partic-
ularly those associated with the annual International Conference on
Software Engineering and the IFIP Working Group on Open Source
Software, were also checked for relevant papers.
. a brief history of floss
Sharing source code for software is not a new concept. In the late s,
when mainframe computers were programmed in assembly language,
the Project for the Advancement of Coding Techniques (PACT) allowed
programmers from Lockheed, Douglas, and North American Aviation
to collaborate, even though the companies were competitors (Leonard
). Leonard quoted Wesley S. Malahn, a participant in the project,
as saying that the main motivation for this sharing was to save coding

 literature review
and machine time. In a summary of the results of a panel discussion
on ‘What is Proprietary in Mathematical Programming?’, Smith ()
reported that “[r]epresentatives of several organizations who are not in
the business of supplying methods and codes indicated that they usually
gave away general-purpose computer routines”, and justified doing so
because they had benefited as the recipients of software shared by other
organisations.
The Association for Computing Machinery (ACM) has published algo-
rithms (known as CALGO, Collected Algorithms of ACM), in a variety
of formats and publications since  (Hopkins ). Hopkins noted
that “[t]he idea was to provide a means for programmers to make avail-
able their coded versions of algorithms for both pedagogical and reuse
reasons”. Graham () suggested that another reason was to validate
research results. In software research, the ‘result’ is often source code,
and other researchers need to be able to execute the code in order to
validate claims made about a new technique. Access to the source code
may also be needed for this, particularly if there are unexpected results.
Initially the CALGO algorithms were published with a statement saying
that “the reproduction of algorithms is explicitly permitted ... without
any charge” (Herbold ) making this an early example of FLOSS.
However, even though the ACM continues to distribute algorithms (now
in electronic form), its current licence limits the use, modification, and
redistribution of CALGO to “academic, research, and other similar non
commercial uses” (Association for Computing Machinery, ), mak-
ing the current version of CALGO open only to the specified groups,
rather than fully compliant with the Free Software Definition.
With the rise of commercial computing in the s and s, most
software became closed or proprietary, and sharing source code was
largely restricted to computer science academics and students. Some
software, such as Donald Knuth’s TEX, continued to be released along
with source code. Knuth has provided extensive documentation of his
experiences in publishing the TEX source code (Knuth a; b),
saying “the real test begins as people with many different viewpoints
undertake their own experiments” (Knuth a, p.). This suggests
his goal in releasing the source code was to improve its quality—both in
design and reliability (or freedom from bugs). Throughout the s,
publishing source code for educational purposes continued. Bentley’s
Programming Pearls (, revised ) and More Programming Pearls
(), compiled from his columns in Communications of the ACM are
examples of this; the source code for his examples is now available on
the Web at http://www.cs.bell-labs.com/cm/cs/pearls/code.html. The
conditions of use say “You may use this code for any purpose, as long
as you leave the copyright notice and book citation attached.” There
are many other examples of source code being published for teaching
purposes—two library examples are Davis and Lundeen’s Illustrative
computer programming for libraries: selected examples for information spe-
. a brief history of floss 
cialists () and Cooper’s Design of library automation systems: file
structures, data structures, and tools ().
AT&T’s development of Unix was the next major event in the FLOSS
time line. In , United States federal government decreed that AT&T
was forbidden to enter markets such as computing, and that it was re-
quired to license its patents (Leonard ). This meant that, at least
initially, the source code for Unix, which was developed at AT&T’s Bell
Labs in , was distributed to universities and research institutes for
a nominal fee. The licensing terms allowed the software to be modified
and redistributed to organisations who held an AT&T licence. The Uni-
versity of California at Berkeley was able to use its experience with this
to develop a freely-redistributable version of Unix (commonly known
as BSD Unix, from Berkeley Software Distribution). Licensing issues
that occurred as a result of the commercial release of Unix following
the break up of AT&T in the s, and a subsequent lawsuit, led to
the Berkeley-based project being disbanded in . BSD Unix lives
on, though, in several variations, and is the foundation of the current
Macintosh operating system, Mac OS X.
In September , Richard Stallman announced the GNU project to
develop a wholly free operating system, and in early , he established
the Free Software Foundation (FSF). Its main objective is to promote the
concept of ‘free software’, where the term ‘free’ refers to freedom, not
price. The GNU (a recursive acronym for Gnu’s Not Unix) project has
produced a range of software, including GCC (GNU Compiler Collec-
tion,) and the multipurpose Emacs editor. Stallman’s background and
motivation for establishing the FSF are well documented (see Moody
 for one example); to him, free software is an ethical obligation. The
most popular FLOSS licence, the GNU General Public License (GPL),
was developed for the GNU project; it has been in use since , with
several revisions to reflect changes in the software development envi-
ronment. The current version is GPLv, released in  (Smith ).
The terms of the GPL and other FLOSS licenses are often misunder-
stood. The GPL does not require users to contribute their local changes
back to the community, unless they are distributed to third parties. If
this is the case, the changes must be made available to any interested
party on the same terms as the original licence.
The next milestone in the FLOSS timeline came in  when Li-
nus Torvalds, then an undergraduate computer science student at the
University of Finland, began what some regard as the FLOSS commu-
nity’s most significant achievement, the Linux operating system. Glyn
Moody’s Rebel code: Linux and the open source revolution (), provides
a detailed description of its development. Torvalds began by writing an
operating system kernel; a kernel (also known as a nucleus) is a low-
level component of an operating system that manages the computer’s
resources and their interactions (Hansen, ). The Linux kernel is typ-
ically used in combination with other software, much of it originating
 literature review
from the GNU project. Torvalds felt that making the source code for his
kernel freely available through FTP was a better option than making
it available as shareware, which would require people to pay a fee. Tor-
valds disliked paying fees, but felt guilty for not paying them, which
was one of his reasons for releasing his kernel at no charge (Moody ,
–); however, he also encouraged others to modify and improve it,
saying “I’ve enjouyed [sic] doing it, and somebody might enjoy looking
at it and even modifying it for their own needs.” (Torvalds ). Linux
versions . through .+VM were released under Torvalds’ own li-
censing terms, which required any redistribution to be free of charge,
but with v. . he adopted the GNU GPL.
During the s, Stallman and other GNU developers continued to
work on free software projects. At the same time, Linux became more
popular, attracting a growing community of developers. The movement
to share source code and allow its free redistribution gained momentum
in early  when Netscape Communications decided to release the
source code for the Netscape Communicator . web browser under a
FLOSS license, hoping that would increase its popularity in the face of
competition from Microsoft’s Internet Explorer. This raised the profile
of the open source movement, since at the time there was considerable
interest in using more flexible web browsers as a replacement for the
previously popular menu-based Gopher approach to access Internet
resources. This had the effect of introducing the concept of open source
software to a new group of people, since the Netscape browser was
designed for end users, rather than being a tool for developers. This
increased the visibility of FLOSS, and also resulted in many more devel-
opers releasing source code under FLOSS licenses. As a result, hundreds
of thousands of FLOSS projects are now available. The list includes
programming languages like Perl and PHP, development environments
such as the LAMP (Linux, Apache, MySQL, and Perl/PHP) stack, and
application software, all carrying on the code sharing practices that
began in the early days of commercial computing.
FLOSS approaches have also become attractive to people developing
software for specific application domains. One example of this is the
field of library and information management. FLOSS information man-
agement software has been available since the late s. The list of
available software includes library management software (Koha and
Evergreen), digital library/repository software (Greenstone, EPrints,
DSpace, Kete, and Fedora), recordkeeping software (Alfresco) and soft-
ware to provide access to resources in archives (Archivist’s Toolkit and
Archon).
This extensive activity to develop and share software under FLOSS
licenses suggests that many people expect to gain benefits as a result.
Studying the factors that influence participants’ satisfaction with their
 FTP stands for File Transfer Protocol, a commonly used technique for transferring a file
from one computer to another via the Internet.
. distinctions between ‘free/libre’ and ‘open source’ software 
involvement in the projects will provide existing project community
members with insights into which aspects of the projects most affect
this.
. distinctions between ‘free/libre’ and ‘open source’
software
A literal interpretation of the phrase ‘free/libre and open source soft-
ware’ emphasises giving software users access to the original code for
the program. However, the official definitions of ‘free software’ and
‘open source’ cover other aspects which are important in understanding
the distinguishing features of this type of software, and are described
briefly in the following sections.
.. The Free Software Definition
The Free Software Foundation (FSF) maintains a formal definition of free
software at http://www.fsf.org/philosophy/free-sw.html. It specifies
four aspects of software freedom:
• the freedom to run the program, for any purpose (freedom )
• the freedom to study how the program works, and adapt it to local
needs (freedom )
• the freedom to redistribute copies so others can benefit from the
software (freedom )
• the freedom to improve the program, and release the improved
version to the public, so that the community can benefit (freedom
)
All four freedoms relate to the user, not the programmer or developer,
and the goal of the FSF is to promote computer user freedom (Brown
). In order for software to qualify as ‘free’ under freedoms  and , a
user must have access to the source code, since it is not possible to under-
stand how a program works or change it (to take advantage of freedom
) without being able to see the source code, and it is not possible to
improve the program (to take advantage of freedom ) without changing
its source code. The FSF maintains a list of licences that comply with the
Free Software Definition at http:/ /www.fsf.org/licenses/licenses.html;
the list is revised from time to time, as new licenses are evaluated and
added to the list.
.. The Open Source Definition
The Open Source Initiative maintains the Open Source Definition (OSD),
available from http://www.opensource.org/docs/osd. The OSD has 
 literature review
clauses, covering redistribution, access to source code, the ability to
make derived works, a requirement for unrestricted use by individu-
als, groups, or fields of endeavour, license distribution, license inde-
pendence, and the need for the license to be technology neutral. The
original open source definition was published in , in response to
the perception that the FSF’s emphasis on freedom, with the implication
that the source code was available free of charge, rather than on other
benefits of this approach, was limiting the attraction of ‘free software’
to businesses. The people behind the Open Source Initiative, who in-
cluded Todd Anderson, Chris Peterson (of the Foresight Institute), John
“maddog” Hall and Larry Augustin (both of Linux International), Sam
Ockman (of the Silicon Valley Linux User’s Group), Michael Tiemann,
and Eric Raymond, felt that in order for free software to become more
widely used, it needed support from businesses. They hoped that by
emphasising ‘openness’ they would avoid the confusion associated with
the FSF’s use of the word ‘free’ (Open Source Initiative, a).
.. ‘Free’ vs ‘Open’: two different philosophies
These two definitions represent different underlying philosophies. The
OSI emphasises access to source code, with a focus on developers, while
the FSF emphasises freedom and users’ rights to change and redistribute
the source code. However, in practice there is a significant overlap, since
both the Free Software Definition and the Open Source Definition cover
licensing and distributing software, and say nothing about the methods
and processes used to develop and modify it. Both definitions require
software developers to let users see the source code, change the software,
and redistribute their changes.
In January , the OSI listed  licences that comply with the OSD
(Open Source Initiative, b), while the FSF listed over  ‘free’ li-
cences (Free Software Foundation GNU Project, ). A majority of
FLOSS licenses, including the GNU GPL and the GNU Lesser General
Public License (LGPL), appear on both lists; each organisation evalu-
ates new licenses only on request, which explains the difference in the
number of licenses each lists. It also explains why some licenses are
found on one list but not the other. The GPL is by far the most popu-
lar FLOSS licence, used by over % of the roughly , projects
listed on SourceForge (the largest FLOSS project repository) in February
. At that time, the next most popular licences for projects listed
on SourceForge are the LGPL, used by .% projects, and the BSD
(Berkeley Software Distribution) License, used by .%.
The extent of this overlap shows that the free software and open
source movements have similar criteria for approving licenses despite
the differences in their underlying philosophies. This thesis therefore
treats ‘free software’ and ‘open source’ as being roughly equivalent,
. research into floss projects and practices 
while acknowledging the philosophical differences between the two
groups. This approach is consistent with Crowston et al.’s  literature
review, which also used the umbrella term ’FLOSS’. Another reason for
considering the two as equivalent is to avoid the implicit bias introduced
by the developer focus of ‘open source’ versus the user focus of ‘free
software’; by including both concepts, the researcher is indicating that
the scope of the project includes both users and developers. Aksulu and
Wade noted that “there is no single definitive definition of open source”
(, p. ); the research literature shows that some authors use the
term ’open source’, while others use ’FLOSS’. The definition of FLOSS
developed for this thesis is “Software released under a free/libre and
open source licence, which ensures that the source code is available
to users (and potential users), and allows them to modify it to suit
their needs, as well as redistribute it to others.” The definition has
been worded to incorporate the main clauses in both the Free Software
Definition and the Open Source Definition, and does not introduce any
other concepts.
. research into floss projects and practices
Academic researchers have taken considerable interest in the FLOSS
phenomenon as its popularity has increased. Much of this interest has
been based on perceived differences between FLOSS projects and con-
ventional software development. To give one example, because many
FLOSS projects cross organisational boundaries and have an informal
organisational structure, there is a large body of research that looks at
the development processes used in FLOSS projects, and how work is
coordinated. Some examples include German (), who conducted
a case study of development in the GNOME project, Scacchi (),
who looked at development practices in the computer game community,
Stark (), who looked at peer review practices of FLOSS developers,
and Crowston, Li, Eseryel, and Howison (), who examined how
tasks are assigned to individual developers.
Feller and Fitzgerald noted that FLOSS projects do not follow a stan-
dard development process (, p.). However, they also say that
FLOSS projects share the following characteristics:
• a distributed community of developers;
• parallel work on different components of the software; and
• incremental releases of the software (, p.).
Fogel provided recommendations for ‘best’ practice in coordinating the
work of these distributed developers, including a list of recommended
communication channels such as email discussion lists, version control
and bug tracking software, and synchronous chat software such Internet
Relay Chat ().
 literature review
Other research has focused on the demographic characteristics of
FLOSS participants, with a recent example published in David and
Shapiro’s  article reporting on the results of an extensive survey
of FLOSS developers (n=). Their key findings were that their re-
spondents were predominately male (.%), largely based in North
America and Western Europe (%), spent an average of  hours per
week working on a FLOSS project, and had been involved with the
project for approximately  years. They did not ask any questions about
what roles respondents filled, instead using the term ‘developers’ to
characterise all respondents.
Another common assumption is that people work on FLOSS projects
as unpaid volunteers, which has resulted in a number of studies of
developer motivations. These include Hars and Ou (), Roberts,
Hann, and Slaughter (), Shah (), and David and Shapiro ().
These typically find that FLOSS developers have multiple motivations
for being involved in a project, ranging from a belief that FLOSS is the
best way to develop software to wanting to learn new skills to enjoying
the challenge of being involved in a large, distributed project. David
and Shapiro () found that ideology and belief in the value of FLOSS
were more important to their respondents than economic incentives,
and their respondents placed more importance on a project’s technical
challenge than its status or visibility, when they had a choice of projects
in which to participate.
One aspect of a FLOSS project of particular relevance to the current
research is its structure. The following section discusses the models of
project structures that have been identified in the research literature to
date.
.. FLOSS project roles and activities
Much of the research interest to date has had the objective of understand-
ing FLOSS development practices, roles, and activities. This research
distinguished between activities, roles, and practices. Practices were
considered to be groups of individual activities, usually done in a way
acceptable to the project’s community. For example, a FLOSS project
might have an agreed procedure for reporting bugs (a practice), which
would involve several related activities (see if the problem is repro-
ducible, check the bug repository to see if it has already been reported,
etc.). A role involves carrying out a range of activities, which may relate
to a number of different practices. Because of this, most of the existing
 Though some people work on a FLOSS project on a voluntary (meaning unpaid) basis, most
recent research identifying characteristics of developers has shown that many developers
are paid for at least some of the time they spend working on the project. David, Waterman,
and Arora () found that .% (of  respondents) had earned money for their
work on FLOSS projects, and that .% (of  respondents) worked on FLOSS projects
during work time.
. research into floss projects and practices 
research into FLOSS project roles has focused on activities relating to
the project’s source code, such as writing new code or fixing bugs.
Gacek and Arief () presented a complex model of user-developer
roles and activities, distinguishing between passive users, who con-
tribute nothing to the project, and active users, who report bugs and
suggest new features. They also identified different categories of de-
velopers, suggesting that there are co-developers, who modify code
and implement new features, and core developers, who make decisions
about what code to accept. Their model did not include any community-
oriented activities, such as writing documentation, or answering ques-
tions from users, though it indicated that people could change from
being a passive user to an active one, or from being an active user to a
developer, over time. One assumption underlying their model is that
a FLOSS project participant’s role is determined only by the activities
they carry out with respect to the source code.
The second approach to representing FLOSS project roles is also
developer-centric, placing the core developer at the centre of a hierarchy.
Figure  on the next page shows a generic version of this style of diagram.
The dotted outer line indicates that the boundary is unknown, since
it is not usually possible to identify people who have installed FLOSS
because there is no requirement for them to register with the project’s
community.
This approach was first presented by Ye and Kishida in , and
subsequently modified by Ye, Nakakoji, Yamamoto, and Kishida ()
and Crowston, Wei, Li, and Howison (). These onion-style models
all indicate the extent of participants’ interaction with the code by
placing different categories along the radius of a circle, with the distance
from the centre representing the distance participants are from the code.
This code-centric view of FLOSS participation was reinforced by Shah
(), who considered contributing code and making decisions about
what code to accept as the main forms of FLOSS participation available
to community members. Such a code-centric approach risks missing or
minimising other types of contributions to FLOSS projects, since users
may determine the priorities for new developments, for example.
A broader approach was taken by Jensen and Scacchi (), who con-
ducted a comparative case study of three large FLOSS projects: Mozilla,
Apache, and NetBeans. Jensen and Scacchi identified a wider range of
roles than earlier studies, and included community and governance
roles in addition to roles that related to software development. Jensen
and Scacchi found that each project they studied had unique roles, and
also unique processes for moving between roles. However, their generic
model of FLOSS project structure is still code-centric, with the commu-
nity manager role the only one that focuses on the community rather
than the code. Scozzi, Crowston, Eseryel, and Li () identified both
formal and informal roles in their study of the Lucene project, noting
that the formal roles are committers and members of the Project Manage-
Figure : FLOSS project hierarchical structure

. research into floss projects and practices 
ment Committee. Ngamkajornwiwat, Zhang, Koru, Zhou, and Nolker
() discussed core and secondary or peripheral developers, again
emphasising interactions with the code, rather than with the community.
There is little consensus about the terminology used for the roles in
these models of FLOSS community roles and structure; Table  on the
following page shows the roles identified in each of the models described
above. The most common role is the ‘passive user’; apart from that the
terminology used to identify individual roles varies considerably, with
different words used for what appear to be similar roles, such as ‘Bug
reporter’ and ‘Bug submitter’. The table also shows that the number of
distinct roles in the models is increasing over time. This may be because
the projects are becoming more structured as they evolve, or it may
be because researchers are becoming more aware of subtle distinctions
between roles as they increase their familiarity with FLOSS practices.
A small number of studies considered other types of participation in
FLOSS projects. Lakhani and von Hippel () investigated user sup-
port in the Apache project by studying postings to the comp.infosystems.
www.servers.unix newsgroup between  and , supplemented
with a survey of people who posted questions between  October 
and  February . They found that people who answer questions
also learn from other people’s questions and answers, which was their
main reason for reading postings to the newsgroup. Their most signif-
icant finding was that people usually provided answers they already
knew, which took minimal effort (only % of their time on site). The
analysis of newsgroup postings showed that  information providers
answered around % of the questions, and a small number of peo-
ple (fewer than ) were particularly responsive. Because they limited
their research to a single project, their findings are not generalisable to
other projects, or to the wider FLOSS community. More recently, Zhao
and Deek () studied collaboration in FLOSS development, using a
web-based survey. They selected  of the top  projects in Source-
Forge (based on project activity), and emailed  recently active users
from each project. Their participation measure identified seven types of
participation:
. find bugs;
. find usability problems;
. suggest new features;
. review and inspect source code;
. submit source code;
. offer project administration assistance; and
. write documentation.
Table : FLOSS participant roles
role identified in
Passive user Ye and Kishida (); Gacek and Arief
(); Ye et al. (); Crowston et al.
(); Jensen and Scacchi ()
Peripheral developer Ye and Kishida (); Ye et al. ();
Ngamkajornwiwat et al. ()
Active developer Ye and Kishida (); Ye et al. ()
Bug fixer Ye and Kishida (); Ye et al. ()
Bug reporter Ye and Kishida (); Ye et al. ()
Project leader Ye and Kishida (); Ye et al. ()
Reader Ye and Kishida (); Ye et al. ()
Stakeholder Ye and Kishida (); Ye et al. ()
Core developer Gacek and Arief (); Ngamkajornwiwat
et al. ()
Committee member Scozzi et al. ()
Committer Scozzi et al. ()
Active user Gacek and Arief ()
Co-developer Gacek and Arief ()
Developer Gacek and Arief ()
Non-developer Gacek and Arief ()
Initiator Crowston et al. ()
Release coordinator Crowston et al. ()
Bug submitter Jensen and Scacchi ()
Community manager Jensen and Scacchi ()
Feature requester Jensen and Scacchi ()
Module developer Jensen and Scacchi ()
Module lead Jensen and Scacchi ()
Observer Jensen and Scacchi ()
Project manager Jensen and Scacchi ()
Quality assurance
lead
Jensen and Scacchi ()
Test case contributor Jensen and Scacchi ()
Veteran tester Jensen and Scacchi ()

. research into floss projects and practices 
Their list did not include responding to other users’ questions as a
participation option, but instead included this in a section about use
of electronic communication media. Overall, their approach lacked a
theoretical foundation, and they presented their results as a simple
descriptive survey, with no attempt to examine relationships between
the variables in their study. Finding bugs was the most common type of
participation, followed by suggesting new features and finding usability
problems.
In a more recent study, Studer () asked participants in the KDE
project to identify how often they carried out each of the following
activities: code, coordination, discussion about future developments,
art, bug management, help, documentation, translation, packaging,
web, and bug reports. While this list is slightly more extensive than the
one used by Zhao and Deek, adding the support activities ‘translation’
and ‘help’, plus the marketing activity ‘web’ and the content category
‘art’, it is still focused on the types of activities developers are likely to
be involved with. Studer also asked survey respondents to indicate how
much prestige they assigned to each type of activity, using a -point
scale where  represented ‘No prestige’ and  was ‘Very prestigious’.
Code was assigned the highest rating (a mean of .), followed by
coordination (.). Five activities (bug management, help, documenta-
tion, translation, and packaging) were assigned mid-range scores with
means between . and .. Studer described help and documentation
as ‘non-productive’ activities since they did not result in any visible
changes to the underlying source code, implying that this result was
unexpected. However, by giving these community-oriented activities
prestige ratings that were similar to the code-oriented activities of bug
management, translation, and packaging, survey respondents showed
that they recognised the importance of supporting the community.
Project governance is another aspect of FLOSS development that has
received interest in the research literature, though this has not been
well-integrated with other research on FLOSS project roles. Based on
her qualitative review of empirical research on FLOSS project gover-
nance, Markus () suggested that governance roles are complex,
involving the establishment of six types of rules: ownership, chartering,
community, software development process, conflict, and rules for using
information and tools.
The preceding discussion has shown that none of the existing mod-
els of FLOSS project roles and lists of typical activities adequately re-
flects community governance and support activities. Answering the
first sub-question for this research project, What types of contributions
do participants make to free/libre and open source software projects? will
extend these models to include other types of activity, in order to give a
 His term, not defined further. In the GNOME project, the term art refers to contributions
of graphics and images for use in GNOME software, including icons and desktop themes.
 literature review
more balanced perspective on the types of activities that occur in FLOSS
projects.
.. FLOSS community practices
There is a growing body of literature about FLOSS community practices,
particularly the way the distributed teams work effectively together.
Gallivan () found that social control was an important mechanism
to help members of a distributed FLOSS community work together. Von
Krogh, Spaeth, and Lakhani () undertook a detailed case study of
the Freenet project using grounded theory techniques to determine how
people joined the developer group for the project and how they initially
contributed code. The Freenet project began in , originating from a
computer science M.Sc. thesis on the theoretical principles of a peer-to-
peer distributed file system. At the time of the  study, there were
 people with commit access to the project’s CVS repository, meaning
that they could contribute source code without needing a third party
to approve it. Von Krogh, Spaeth and Lakhani’s results showed that the
Freenet community had an implicit ‘joining script’ (i.e. a practice) that
newcomers were expected to follow before being granted commit access
to the code repository. The most important activities included in the
joining script were participating in technical discussions and offering
new code, usually to fix a bug in the current version of the software.
This suggests that existing developers with commit access acted as
gatekeepers (an impicit role), and that enforcing this type of joining
script is an implicit type of quality control mechanism. It also suggests
that some contributions will be rejected, and that FLOSS projects may
vary in the extent to which they welcome new contributors.
This suggestion is confirmed by research by Ye et al., who identi-
fied two dimensions of openness that vary between projects: product
openness and process openness (, p.–), based on their study
of four projects within a single company: GNU Wingnut, the Linux
Support project, SRA-PostgreSQL project, and the Jun project. GNU
Wingnut was a project to help people port GNU software, such as GCC
(GNU Compiler Collection) and GNU Emacs (a text editor) onto super-
computers. The Linux Support project provided support for customers
using the Linux operating system, while the SRA-PostgreSQL project
added support for the Japanese language to the PostgreSQL database
software. The Jun project developed a Smalltalk and Java library for
-dimensional objects and multimedia data. Yet et al.’s definition of
the concept ‘product openness’ related to the release practices of the
project’s development community; ‘open release’ meant that only formal
releases were available to the user community, while ‘open development’
meant that interim releases were available as well. One consequence
of the open development option is that any interested member of the
. issues related to studying floss projects and communities 
community can be involved in testing early releases of the software,
while an open release model restricts this access to a closed group of
developers.
’Process openness’ was defined as the extent to which members of the
project’s wider community were able to participate in decisions about
the software’s development path. Ye et al. () identified three possi-
ble values for process openness: closed, transparent, and open. With a
closed process, only the ‘inner circle’ of core developers determined the
development priorities, while with a transparent one, the discussions
were accessible to all community members, but decisions were made
by the core group. An open process allowed any community member to
participate fully in decisions about future development. Coleman and
Hill () described the way the Debian process openness changed as
the project’s community grew in size. Initially the process was relatively
open, but as the number of developers increased (from ~ to ~,),
the developer community recognised a need for more formal procedures.
This resulted in the Debian New Maintainer process, which was a more
formal approach to determining who could be involved in discussions
about the Debian project’s future directions, and moved the project from
‘open’ to ‘transparent’. This example shows that the concept of process
openness applies to different FLOSS projects than the ones originally
studied by Ye et al. (), and suggests that it may be an important
characteristic to include in the current research.
. issues related to studying floss projects and
communities
Most FLOSS projects provide a wealth of freely available project informa-
tion for prospective users, and this is one characteristic that makes them
attractive to researchers. These resources usually include the source code
itself, which typically includes a credits file that shows which developer
contributed specific code and when it was contributed, plus mailing
list archives, bug databases, and other project-related documentation.
In addition, participants in these projects have a choice of communi-
cation channels, which typically include email discussion lists, IRC,
or online forums. The archives of the email discussion lists and online
forums, plus the logs of the IRC conversations, are often made available
to people interested in learning about the project’s activities.
These data are particularly useful for writing an in-depth case study
of an individual project. Von Krogh, Spaeth, and Lakhani’s investigation
() of the way new developers joined the Freenet project is one ex-
ample of research that has taken advantage of access to this type of data.
Crowston, Wei, Howison, and Wiggins’s  literature review found
that % of the empirical papers they identified used data about a single
 IRC is an initialism for Internet Relay Chat, a form of instant messaging used for syn-
chronous, text-based communication
 literature review
project. The most common projects studied were Linux, Apache, Mozilla,
and Gnome, all of which are widely used and have large communities
of developers. While such studies of a single, high-profile project can
provide insights into good practice or show how that particular devel-
oper community interacts, they are unlikely to provide findings that are
generalisable to other projects.
For FLOSS research to be more generalisable, data need to relate
to more than one project. Identifying suitable samples is challenging,
since there is no single authoritative source of high-quality, comparative
information on FLOSS projects. SourceForge (http://sourceforge.net/)
is the largest world-wide repository of FLOSS projects, listing over
, projects in February  (source: SourceForge.net About page
http://sourceforge.net/about, accessed  December ). While this
number is impressive, studies of SourceForge project statistics have
consistently shown that only a small number of these projects were
being downloaded, and a much larger number were relatively static,
with low numbers of downloads and/or contributors. In , Hunt and
Johnson showed that the distribution pattern of project downloads was
heavily skewed, following a power law or Pareto pattern where a small
number of projects had a very large number of downloads, and a large
number of projects had a small number of downloads. Ohira, Ohsugi,
Ohoka, and Matsumoto () found that .% (, of ,) of
projects harvested from SourceForge had a single registered developer.
The situation has been further complicated by the emergence of other
source code repositories, such as CodePlex (sponsored by Microsoft)
and Google Code, which means that data about FLOSS projects are now
spread across multiple sources.
One possible solution to this is the FLOSSMole project, described by
Howison, Conklin and Crowston (). It was established to provide a
clearinghouse for FLOSS data by harvesting data from multiple source
code repositories. In August  it included data for over ,
projects from eight different repositories (SourceForge, FreshMeat, Ruby-
Forge, ObjectWeb, the Free Software Foundation, SourceKibitzer, Savan-
nah, and Github).
While FLOSSMole does provide a useful resource for comparing data
about large numbers of FLOSS projects, it has limitations. Some FLOSS
projects use external resources to supplement or complement repository
hosting, or are available from a site provided by the main developer or
other interested party, rather than a shared repository. Stürmer ()
studied eight FLOSS projects, five of which were popular web content
management systems, while two were web application frameworks and
one was a WYSIWYG browser editor. While most of these projects
had begun by using SourceForge as their code repository, a majority
had migrated to other collaboration platforms as they became more
 WYSIWYG is an acronym for ‘what you see is what you get’, an approach used in designing
editors where the screen display is similar to the final output, such as a printed document.
. issues related to studying floss projects and communities 
popular (Stürmer : ). One project, Magnolia, used its own collab-
oration platform for all development activities, and used SourceForge
as a download site only. In another example, the PmWiki project is
listed on SourceForge, but the majority of the project’s resources, in-
cluding mailing list archives, are hosted on the project’s main web site,
http://www.pmwiki.org/. In December , the version of PmWiki
available on SourceForge was .. (dated --), while the ver-
sion available from the project’s main site was .. (dated --).
It appears that PmWiki uses SourceForge as a historical ‘back-up’ repos-
itory, but this is not made clear in its SourceForge description. The
FLOSSMole project itself is hosted on Google Code, but uses email dis-
cussion lists provided through SourceForge, showing that information
about projects is sometimes split between different repositories.
Selecting FLOSS projects for a research project is therefore not a
straightforward matter of choosing a random sample from the FLOSS-
Mole repository, or any of the individual repositories. The large pro-
portion of inactive projects means that a random sample of projects is
likely to have a large number of inactive projects, while selecting active
projects may bias the results towards particular types of communities
and projects. In addition, it will omit projects that do not use one of the
harvested code repositories as their primary hosting site. This suggests
that researchers need to consider other methods to identify suitable
samples of FLOSS projects.
There is little agreement in the FLOSS research literature about the
best way of doing this. Crowston et al. () found that approximately
% of their sample studied fewer than  projects, and the next largest
group (%) used repository data to study thousands of projects. When
researchers have used a sample of projects as the source of their data,
they seldom spell out their selection criteria. A typical example is Singh,
Twidale, and Nicols (), who studied email discussion threads from
NVU, Opera, Filezilla, phpMyAdmin, phpBB, Dropline, Mozilla Fire-
fox, and Moodle, but give no reasons to explain this choice of projects.
Others use a small number of criteria to choose their sample, such
as Krishnamurthy (), who restricted his sample to the  most
active mature projects on SourceForge. This approach is essentially a
convenience sample, since only two criteria were used to select projects
(maturity and activity), and only one value was used for maturity. These
approaches limit the generalisability of the research results, since the
relationship of the sample to the population is either unknown, in the
case of Singh, Twidale, and Nichols () or skewed, in the case of
Krishnamurthy ().
Crowston, Li, Eseryel, and Howison () used purposive sampling,
identifying project characteristics that were particularly relevant to
their research question, which looked at the process of assigning work
to specific developers. Their criteria were that projects had more than
seven developers, made their email archives publicly available, had an
 literature review
active community, had a high number of downloads, and were releasing
new software versions. Since their goal was theory development rather
than theory testing, they used a case study approach based on three
projects chosen from different application areas, rather than choosing a
representative sample (p.).
An alternative approach that has been used by other researchers
is a form of cluster sampling. Researchers who take this approach
identify one or more application areas, and compare projects across
the areas. Scacchi () used it in his study of user requirements in
FLOSS projects, choosing FLOSS projects from four application areas:
networked computer games, Web infrastructure, X-ray astronomy and
deep space imaging, and tools to support academic software develop-
ment. Spaeth, Stuermer, and von Krogh () suggested using the
Debian project and its packages as a source of projects that are known
to be active. However, since Debian is primarily an operating system,
and does not focus on user-oriented application packages, this specific
approach was not felt to be suitable for the current research. However,
the approach of finding a suitable cluster of projects compensates for
the power law distribution found in source code repositories, since it
lowers the probability of selecting a large number of relatively inactive
projects. It also allows for theories to be tested across multiple projects.
It works best when the application area has a diverse population of
FLOSS projects.
There are also issues in identifying individuals who use specific FLOSS
packages. Most projects do not have a complete list of their users, since
registration is always voluntary and participation in the community is
optional. This means that the total population cannot be determined,
and it is not possible to develop a sampling frame for research into
participants in FLOSS projects. Because of this, a common approach to
studying FLOSS developers from a range of projects has been to use a
web-based survey, with an open invitation to complete it sent to email
lists and posted on the Web. This technique was used in several large-
scale surveys of developers, including Ghosh et al. (), and David et
al. (). It is most suited when responses from individual participants
are needed because the data in the repositories are not appropriate to
answer the research question.
. understanding satisfaction
Although satisfaction is a concept that is widely used in many different
disciplines, satisfaction research does not generally use a single, agreed
definition of satisfaction (Oliver , p.). McNamara and Kirakowski
noted that the definition of satisfaction used in satisfaction research
has changed over time, moving from a cognitive assessment of quality
to an emotional response, and then back to a more cognitive approach
. measuring satisfaction 
(, p.). They also noted that satisfaction is “a summary evalua-
tion” (p.), and suggested that it may include both cognitive and/or
affective (i.e. emotional) aspects.
The definition of ‘satisfaction’ used in this thesis is “The satisfying of
a need or desire as it affects or motivates behaviour” where ‘satisfying’
means “meeting or fulfilling the wish or desire or expectation of; to be
accepted by (a person, his taste, judgement, etc.) as all that could be
reasonably desired" (’satisfaction’ and ‘satisfy’, Oxford English Dictio-
nary Online, ). This definition includes the main characteristics
that people consider when they assess their level of satisfaction with a
product or service: that is, they judge the extent to which the product or
service meets their expectations. This means that satisfaction involves
individual judgement, and is not something that can be observed by
third parties or measured directly. It also implies that judgements of
satisfaction are based on previous experience, and that in order to assess
their satisfaction with a product or service, people need to have used
the product or experienced the service; satisfaction cannot be judged in
a vacuum.
In addition, satisfaction is a generic concept that can be applied to
many things, and it is therefore important to understand the context in
which it is being measured in order to choose an appropriate measure-
ment tool. Oliver notes that while it is easy for people to assess their
level of satisfaction with a product or service, it is much harder for them
to define what this actually means (, p.).
Oliver identifies other key aspects of satisfaction that researchers need
to acknowledge (, p.). In particular, satisfaction can be measured
on many levels, such as satisfaction with events associated with the
consumption of a product or experiencing a service, satisfaction with
the final outcome (considered in isolation), or satisfaction with the
overall experience of consuming the product or experiencing the service.
In addition, in some cases, satisfaction is a result of a series of events
that occur over time, and what is measured is the level of satisfaction
with these blended experiences, rather than the satisfaction with each
individual experience. This implies that there will be various ways of
measuring satisfaction, depending on the type of product or service of
interest. This thesis is concerned with people’s overall satisfaction with
their involvement with a FLOSS project, rather than their satisfaction
with a particular aspect of the project, or their satisfaction with a single
interaction with the project’s community.
. measuring satisfaction
Having established that satisfaction is a complex concept, how is it
typically measured? Since satisfaction cannot be seen, or inferred from
behaviour, it is usually measured by asking people to complete a survey
 literature review
containing questions about the product or service being evaluated. This
section considers the most common approaches to measuring satisfac-
tion.
The standard approach to measuring satisfaction involves using a
quantitative survey that identifies a list of dimensions or components
that are important in the context of the type of product or service,
and then asks people to rate their satisfaction with each of them. This
generally uses a Likert-style scale with five or seven choices, ranging
from ‘not at all satisfied’ to ‘very satisfied’; Oliver (, p.) notes
that this approach to wording the scale is used in order to avoid a
positivity bias in the results, because some people find it difficult to
choose negative responses such as ‘very dissatisfied’.
In addition to indicating their satisfaction with aspects of a product
or service, early satisfaction research also asked respondents to indi-
cate the importance of each dimension, again using a Likert scale, in
order to calculate a weighted satisfaction index, as
n∑
d=1
idsd, where d
is the number of dimensions, i is the dimension’s importance, and s
the level of satisfaction with the dimension. While this approach seems
to have an intuitive face validity since it places the most emphasis on
the dimensions that are most important to respondents, experience in
using it has been mixed (Oliver , p.). This appeared to be because
survey respondents interpreted the meaning of ‘importance’ in different
ways. They may not all have reported their perceptions of the relative
importance of each dimension in contributing to their satisfaction, but
in some cases may have considered the dimension’s importance in their
decision to purchase a product or use a service. This illustrates the dis-
tinction between what Oliver terms ‘choice criteria’ and ‘satisfaction
drivers’ (, p.). Choice criteria are aspects of a product or a service
that influence someone’s initial decision to purchase the product or use
the service, while satisfaction drivers are dimensions of the product or
service that people experience after they have made the initial decision.
Some features influence both choice and satisfaction, and Oliver terms
these ‘dual influence features’. Cost is one example of a pure choice
criterion, while the politeness of a customer service representative is a
pure satisfaction driver for a specific transaction, since it cannot be de-
termined in advance. One example of a dual influence feature is airline
seating. The plane’s seat layout might influence someone’s decision to
book a specific flight, while their specific seat and its proximity to the
seat in front and the aisle is likely to affect their satisfaction with the
flight itself.
In addition, some studies have found that there may be an inverse
relationship between the rating people give importance and their level
of satisfaction with the feature; in particular, respondents often give
features with which they are not at all satisfied more importance than
features with which they are completely satisfied. If their experience
. measuring satisfaction 
subsequently changes to make them more satisfied with the feature,
they lower its importance if asked to reassess their satisfaction (Oliver
, p.). For these reasons, most recent research into satisfaction
does not use this approach (Oliver , p.), but instead calculates
overall satisfaction as the sum of the individual satisfaction ratings for
each dimension.
An alternative way of measuring satisfaction uses a disconfirmation
approach (Applegate , p.). The term ‘disconfirmation’ refers to
the gap between the expected level of performance, and the actual/per-
ceived level; a disconfirmation-based survey typically asks respondents
to indicate their expected level of performance, and the level they re-
ceived. The difference between the two measures is calculated, and used
to indicate the gaps between expected and actual (or perceived) per-
formance. The assumption is that the smaller the gap, the greater the
‘satisfaction’. Oliver presented a detailed discussion of the advantages
and disadvantages of this approach (, p.–); one of his key
points is that in some cases, there can be no gap between expected and
perceived performance because both are low, but respondents can still
be dissatisfied with an aspect of a service or product. He also suggested
that this approach is best used when a researcher is trying to understand
the relationship between people’s expectations and their assessment
of their satisfaction, as opposed to understanding the dimensions that
determine someone’s overall satisfaction.
Hayes provided guidance on determining the underlying dimensions
needed to measure satisfaction with a particular type of product or
service, (, p.–). He noted that while a small number of generic
dimensions can apply to different products and services, such as avail-
ability and convenience, it is not realistic or meaningful to develop
standard dimensions that can be used across a broad range of products
and services. This means that it is necessary to identify the dimensions
that are most important for the specific type of product or service being
evaluated.
Hayes recommended two techniques for identifying the dimensions
that are important for measuring satisfaction:
. using industry-specific literature (, p.); and
. asking individual customers, consumers, or users to describe spe-
cific positive or negative experiences, and using content analysis
to reduce this list to identifiable dimensions (, p.–).
User satisfaction with software and information systems has been stud-
ied extensively, and there is already a body of literature that identifies
dimensions that have been found to be important in determining satis-
faction. This literature is discussed in the following section.
 literature review
. satisfaction with information systems and software
User satisfaction has been one of the most popular and enduring topics
in the information systems literature, in part because it has been used
as a surrogate measure of information system (IS) success for many
years. In a review of  articles about user satisfaction with information
systems, Zviran and Erlich () said that satisfaction is “the most
prevalent measure of IS success due to its applicability and ease of use”
(p.).
.. Classifying satisfaction with information systems and software
Seddon, Staples, Patnayakuni and Bowtell () presented a two-
dimensional framework for classifying IS studies of satisfaction, based
on the nature of the application/system being assessed, and the type
of respondent whose perspective is sought. The six application/system
categories were: an aspect of IT use; a single IT application; a type of IT
application; all IT applications used by an organisation; an aspect of sys-
tem development methodology; and an IT function in an organisation.
The five types of respondents were: independent observers; individuals;
groups; managers; or countries. This results in a total of  unique com-
binations, and Seddon et al. suggested that each of these might require
a different instrument to measure success/satisfaction. Their analysis of
 studies showed that individual () and manager () perspectives
for a single type of IT application were the most frequent combinations
studied. Their research also showed that researchers used a range of
measures to assess satisfaction, many of which built on earlier measures.
Seddon et al. argued that this is a strength of IS evaluation research,
since it allowed researchers to focus on what is most relevant in a study’s
context, rather than using inappropriate general measures. The current
study focuses on individuals’ satisfaction with their experience of a
FLOSS project; the best fit with Seddon et al.’s categories is an aspect
of system development methodology, since FLOSS projects can involve
any type of IT application.
Examining research into user satisfaction with information system-
s/software showed there were some inconsistencies with terminology.
Some studies, such as Guimaraes, Staples, and McKeen (), used the
term satisfaction in their measures, but used the term ‘system quality’
or ‘system success’ for the constructs in their models. Other researchers
asked questions about effectiveness (or quality), but then named the
measure satisfaction. Literature covering both approaches has been
included in this review.
. satisfaction with information systems and software 
.. Measuring satisfaction with information systems and software
In , Zirvan and Erlich reviewed the literature on user satisfaction,
identifying six major user satisfaction scales and  individual studies
that measured user satisfaction. The sections below discuss these six sat-
isfaction scales, summarising their initial development, validation, and
subsequent use by other researchers. One point to keep in mind is that
these scales were all developed for a conventional software/information
systems context, and consider only the user perspective on satisfaction.
Bailey and Pearson ()
Bailey and Pearson’s widely cited  paper is generally regarded as
the first significant achievement in developing a generic instrument
for measuring user satisfaction with information systems, particularly
because it considered more than just the output of the computer system.
It was not the first study to measure how satisfied users were with an
information system—earlier research included Gallagher (), whose
study focused on the value of the reports produced by a management
information system, and Jenkins and Ricketts (, cited in Zviran
and Erlich, ), who studied user satisfaction with the output of de-
cision support systems. Bailey and Pearson used a sequential mixed
methods approach to develop their questionnaire, which consisted of
 statements about characteristics of computer-based information sys-
tems or services, or staff of the information systems department, with
six semantic differential scales for each statement. Four of these were
pairs of adjectives reflecting different feelings or judgements about the
individual characteristic; in addition, each included a satisfactory/unsat-
isfactory scale and an important/unimportant one. Bailey and Pearson
used data from  respondents to test the psychometric characteristics
of the instrument, and found that it had high reliability and acceptable
content, predictive, and construct validity.
The instrument Bailey and Pearson developed is very much a product
of its time. First, it calculated overall satisfaction using the weighted
importance*satisfaction approach that is typical of early research into
consumer satisfaction. The difficulties with this approach are evident in
the results of their first, qualitative stage, which involved interviews with
 middle management customers of their organisation’s information
systems department. They note that “causes of satisfaction vary from
user to user” (p.), and that all but nine of the  initial dimensions
were ranked in the top five by at least one interviewee. This reinforces
the idea that satisfaction is a complex construct, and that individual
 A semantic differential scale anchors the ends of the scale with two words having opposite
meanings, such as ‘bad’ and ‘good’, in contrast to a conventional Likert-style scale, which
typically asks people to indicate their level of agreement with a statement using choices
that include ‘Strongly disagree’, ‘Neutral’, and ‘Strongly agree’.
 literature review
circumstances play a large part in determining someone’s satisfaction
with a product or service.
Bailey and Pearson’s use of the phrase ‘computer user satisfaction’ is
somewhat misleading for the reader, because their instrument covered
not just computer use, but also interactions with the organisation’s infor-
mation systems department. They made the assumption that all of the
computer use was mediated in some way by this unit in the respondent’s
organisation. This may have been true in the s, when Bailey and
Pearson carried out their initial research, but it is not necessarily the
case in the st century, which has been termed the age of ‘ubiquitous’
computing (Elliott and Kraemer , p.). Some of the questions in
Bailey and Pearson’s instrument, such as those about production sched-
ules, volume of output, and error recovery (defined as “the methods
and policies governing correction and rerun of system outputs that are
incorrect”, p.), reflect the predominant batch processing model used
in the early s, and would not be appropriate today.
Bailey and Pearson’s instrument has been widely used by other re-
searchers, of whom only a small number have used the full  items
unchanged. In most cases, they have chosen a subset of items that are
particularly relevant to their context and modified them so that they are
more meaningful to the sample group. Factor analyses of the underlying
dimensions of the Bailey and Pearson instrument, including variations,
have had varying results. Raymond (, ) found four dimensions
from his -item version; these were output quality, user–system rela-
tionship, support, and attitude to EDP staff. In contrast, Tan and Lo
() identified eight factors from the full -item scale: information
quality, user attitude, user knowledge and involvement, security, system
integration, user interface, system utility, and management support.
All of this research occurred in the late s and early to mid-s,
and use of the Bailey and Pearson instrument has declined since then,
though it is still cited frequently as an early model of an instrument to
measure user satisfaction.
Ives, Olson, and Baroudi ()
Ives, Olson, and Baroudi reviewed four previously proposed measures of
what they termed ‘user information satisfaction’, noting that they could
be grouped into two broad categories. The first had a narrow focus on the
products or outputs of the information system, with questions about the
accuracy and relevance of the information and its presentation, while the
second took a broader perspective, asking about organisational support
and interactions with information technology department staff. They
placed Bailey and Pearson’s  survey in the second category. Ives,
Olson, and Baroudi then conducted a two-stage, large-scale empirical
study to validate the  items used in Bailey and Pearson’s scale. The first
stage used the original -item questionnaire, and the second a shorter
. satisfaction with information systems and software 
questionnaire with four questions about the quality of service provided
by the data processing group. Ives, Olson, and Baroudi received 
responses for the first survey, and  for the second one. The results
from the second survey were treated as an independent measure, and
used to assess the predictive validity of the longer Bailey and Pearson
instrument. This showed a . correlation between the two surveys
(significant at the . level).
Ives, Olson, and Baroudi then conducted a detailed analysis of each
individual item’s reliability and correlations with the short survey in
order to improve the quality of the Bailey and Pearson instrument and
reduce the amount of time required to complete it. Their resulting ‘short-
form’ instrument retained  of the original  items, with two semantic
differential scales per item, and covered:
• users’ relationship with IT staff,
• IT staff attitudes,
• IT responsiveness to change requests,
• time required to develop new systems,
• user training,
• user understanding of system,
• user participation,
• accuracy of output,
• precision of output,
• relevance of output,
• completeness of output,
• reliability of output, and
• communication with IT staff.
Ives, Olson, and Baroudi found that this shorter instrument had a .
correlation (significant at the . level) with Bailey and Pearson’s
longer questionnaire. It was the most widely used instrument in the
literature Zirvan and Erlich () reviewed. Baroudi and Orlikowski
() conducted a survey to test the psychometric properties of this
instrument, and found that it had acceptable construct validity. A factor
analysis of their data, which were drawn from  employees of 
different companies, identified three underlying dimensions:
• EDP staff and services,
• information product, and
• respondent knowledge and involvement.
 literature review
In a subsequent confirmatory factor analysis using data from  re-
spondents, Doll, Raghunathan, Lim, and Gupta () found that four
dimensions, which they termed EDP staff, EDP services, information
product, and knowledge and involvement, provided the best fit with
their data. This was cross-correlated with two further data sets, which
also confirmed the four-dimension structure.
Following on from Baroudi and Orlikowski (), other researchers
have tested the psychometric properties of the scale in different contexts.
Galetta and Lederer () is the most widely cited of these. They tested
the reliability of the scale by having their respondents complete the
instrument twice, the second time after they had been presented with
information about reasons for general system failures and successes.
They found that some responses changed, even though their subjects’
experience with the system being evaluated remained the same. As a
result Galetta and Lederer concluded that there were issues with the
instrument’s reliability, but another interpretation is that the presence of
additional information, even though it was about other systems, affected
the way in which their subjects judged their satisfaction. This could be
expected given the nature of satisfaction, discussed in Section . on
page .
Other researchers have treated the scale as a standard way of measur-
ing user satisfaction, using the scale in its original form, or with minor
variations. Some examples are Barki and Huff (, ), Nelson and
Cheney (), Tait and Vessey (), Igbaria and Nachman (),
Joshi (), Hawk and Dos Santos (), Kettinger and Lee (), Mc-
Keen and Guimaraes (), and Sengupta and Zviran (). McKeen,
Guimaraes, and Wetherbe () used  questions from the Ives, Olson
and Baroudi instrument, omitting three questions that overlapped with
other constructs they were testing (relationship with IS staff, participa-
tion, and communication with IS staff). Yoon, Guimaraes, and O’Neal
() used only the nine items associated with output quality and
user–system relationship in their research exploring factors associated
with expert systems success. This version was subsequently used by
Guimaraes, Yoon, and Clevenson () and Guimaraes, Staples, and
McKeen (). Guimaraes and Igbaria () chose ten items that fo-
cused on output quality. Palvia (–) used the full  items with
a single semantic differential scale to measure user satisfaction with
synchronous and asynchronous training. Whitten () showed that
similar reliability and factors could be achieved using a single scale per
item, which reduced the size of the instrument to  responses instead
of .
The flexibility of Ives, Olson, and Baroudi’s approach to measuring
user satisfaction is shown by its ongoing adoption by other researchers.
However, it is based on an assumption that users are supported by
information systems staff, which may not apply in a FLOSS context.
. satisfaction with information systems and software 
Miller and Doyle ()
The next significant approach to measuring satisfaction was developed
by Miller and Doyle (). They were interested in evaluating the effec-
tiveness of the information systems function in financial services sector
organisations, and based their instrument on two previous studies: Bai-
ley and Pearson () and Alloway and Quillard (). Their -item
questionnaire used  items from Bailey and Pearson,  from Alloway
and Quillard, plus two new ones. Though they did not provide a detailed
rationale for their choice of items, they said that they wanted to assess
general information systems effectiveness, using satisfaction as a surro-
gate. In designing their survey, they followed the then current approach
of asking respondents to judge the importance and the performance
of each item to their organisation, where performance was assumed
to be synonymous with satisfaction. Their results, based on responses
from  managers in companies in the financial services sector, found
that the importance responses showed few patterns, and did not map
into clearly defined factors. Unlike Bailey and Pearson (), Miller
and Doyle did not use the importance ratings to calculate a weighted
overall satisfaction score; instead they calculated total satisfaction as
the arithmetic mean of the responses.
In contrast, the performance (i.e., satisfaction) responses had good
internal reliability (a Cronbach’s alpha of .), with a factor analysis
identifying seven dimensions:
• system characteristics (including characteristics of output such as
completeness, accuracy, relevance, and currency),
• strategic management,
• user involvement,
• IS staff responsiveness,
• end user control,
• IS staff quality, and
• service reliability.
These suggest that overall satisfaction is influenced by a combination
of characteristics of the system, the organisational context, and the
individual user. This is consistent with the idea drawn from the more
generic customer satisfaction literature that satisfaction is more complex
than it appears on the surface, and that in order to fully understand the
factors that influence it, researchers need to measure a range of user,
contextual, and system/software attributes.
Guimaraes and Gupta ()
The goals of the three previous studies were to develop reliable in-
struments for measuring user satisfaction with information systems in
 literature review
organisations. Guimaraes and Gupta () had a more specific aim:
their study was intended to develop a reliable instrument to measure
senior management satisfaction with the information systems depart-
ment in their organisation. They modelled their approach on Bailey and
Pearson (), but developed a new list of items chosen to reflect the
specific concerns of an organisation’s senior managers when assessing
the performance of a unit in their organisation. They did not use any
items from existing measurement scales.
The Guimaraes and Gupta instrument had  items grouped into
five factors: relationships with other departments, relationships with
management, technical image, service quality, and cost/benefit to the
organisation. The data they gathered from  respondents represent-
ing  companies showed that most questions had adequate internal
reliability (all but two constructs had Cronbach’s alpha values greater
than .) and content validity.
The general nature of this study means their approach, at least at
the factor level, appears less dated than the previous three, and their
questions could be used with only minor changes today. Their findings
reinforce the idea that satisfaction is context-dependent, and a compar-
ison of their main dimensions with those of Miller and Doyle ()
shows little overlap. The concepts which are closest in meaning are their
dimensions of service quality, which is similar to what Miller and Doyle
() termed ‘service reliability’, and ‘relationship with other depart-
ments’, which is similar to Miller and Doyle’s ‘IS staff responsiveness’.
However, the wording of the questions that relate to these four concepts
is very different in the two survey instruments, which suggests that the
similarity is coincidental, and that a different underlying concept is
being measured in each case.
The significance of Guimaraes and Gupta’s work is that it shows the
importance of considering the nature of the population being surveyed
when developing an instrument to measure their satisfaction with an
aspect of an information system. The instruments developed by Bailey
and Pearson (), Ives, Olson and Baroudi (), and Miller and
Doyle () were all intended to gather information from people who
were the intended users of the system, while Guimaraes and Gupta were
interested in senior management perceptions of the effectiveness of the
organisation’s information systems department. It seems obvious that
different measurement techniques will be needed for senior managers,
because aspects that are relevant to users may not be equally relevant to
senior managers. In addition, senior managers are likely to give greater
weight to aspects that are not usually considered by users. For example,
Guimaraes and Gupta asked about company expectations of the MIS
department and company control over MIS activities, neither of which
is likely to be considered by users of information systems who are not
involved in company-wide decision-making.
. satisfaction with information systems and software 
Doll and Torkzadeh ()
The previous examples of instruments to measure user satisfaction were
developed for three distinct situations: measuring people’s satisfaction
with the services and output they receive from their IT department
(Bailey and Pearson ; Ives, Olson, and Baroudi ), measuring
people’s satisfaction with services and output they receive from their IT
department in a specific industry (Miller and Doyle ), and measur-
ing senior management’s satisfaction with the performance of their IT
department (Guimaraes and Gupta ). None of these instruments
is easily generalisable to end users who use computers and software
relatively independently. Doll and Torkzadeh () developed their
End-User Computing Satisfaction (EUCS) instrument specifically for
users who have a degree of control over their use of computers and
software, and do not rely on an IT department to mediate it. Their final
instrument had  questions, covering five dimensions: content (four
items), accuracy (two items), format (two items), ease of use (two items),
and timeliness (two items). Doll and Torkzadeh validated their instru-
ment with  responses representing  different applications. This
showed that the latent variables had Cronbach’s alpha values of . or
higher for each dimension, and a factor analysis showed appropriate
loadings on the five dimensions. A subsequent confirmatory factor anal-
ysis by Doll, Xia, and Torkzadeh (), using survey data gathered
from  users of  different applications, supported the five dimen-
sions, as did a survey of  student users of CASE tools by Kim and
McHaney ().
The EUCS instrument has been used in many subsequent studies,
often with slight modifications. Simon, Grover, Teng, and Whitcomb
() used the -item EUCS with a -step Likert-scale ranging from
‘disagree’ to ‘agree’ in a study of the impact of training methods and
cognitive ability on satisfaction, comprehension, and skill transfer. They
found that the scale had a Cronbach’s alpha value of ., and did not
do any further factor analysis on their results. Though such a high value
raises questions about whether there was duplication between individ-
ual items on the scale, Simon et al. () did not do any further analysis
of individual items. Aladwani () also used the -item scale in a
study of undergraduate student satisfaction with email technology, test-
ing two versions of the wording: one was in the first person “the e-mail
technology provides me with the information I need in time” and one in
the third “the e-mail technology provides one with the information (s)he
needs in time”. Aladwani found no significant difference in responses for
the two versions. Rainer and Harrison () used a slightly modified
version of the Doll and Torkzadeh instrument to measure overall user
satisfaction with the computer-based systems they used, and included
 CASE is an initialism for Computer-Aided Software Engineering, which typically involves
the use of software to assist with the development of a computer system, following a
structured methodology.
 literature review
a wider range of end-users in their sample than the original Doll and
Torkzadeh study, which restricted its sample to major users. They found
that the five dimensions Doll and Torkzadeh identified were supported
by a confirmatory factor analysis, and suggest that this generic approach
is suitable for measuring overall user satisfaction with computer sys-
tems, as well as with a specific application. McHaney and Cronan ()
used the EUCS to test developers’ and users’ satisfaction with computer
simulation software, with only minor changes to the wording to reflect
the context. They concluded that the instrument was valid as a mea-
surement of user satisfaction with computer simulation software, based
on  responses. Aladwani () used the EUCS as part of a wider
study that examined the impact of management advocacy and internal
computing support on user attitudes to computers and their satisfaction,
calculating overall satisfaction as the mean of the  items. Somers,
Nelson, and Karimi () used the full -items to measure user satis-
faction with enterprise resource planning systems, and found that all
five dimensions were supported by their data from  end-users in 
organisations.
Some research has raised questions about the suitability of the EUCS
in different contexts. Chen, Soliman, Mao, and Frolick () used con-
cepts from the EUCS to study data warehousing users’ satisfaction, but
modified the wording to fit a data warehouse context. They also added
six items relating to the support provided by the information centre
to end users. Their results, based on responses from  users, showed
that the items relating to information currency, availability, response
time, ease of use, and accessibility were not well correlated with overall
satisfaction, suggesting that these EUCS dimensions did not translate
well to a data warehousing context. After eliminating these questions,
and performing a factor analysis on the remaining questions, they found
three dimensions: end-user support; accuracy, format, and preciseness
of information; and fulfilment of user needs. Townsend, Demarie, and
Hendrickson () adapted the four items relating to satisfaction with
information content in their study of desktop videoconferencing, find-
ing that the scale had a Cronbach’s alpha of ., but do not provide
a description of the specific changes they made. They also used three
other items from the EUCS (accuracy, format, and ease of use), but used
them as a ‘system utility’ construct, rather than as part of overall user
satisfaction.
Four of the dimensions (content, accuracy, format, and timeliness)
make an implicit assumption that access to ‘information’ generated
by someone else is the primary purpose of the software or system(s);
the ease-of-use factor is the only one that relates to the use of the soft-
ware/system(s) to create information, or communicate it to others. This
means that it may be difficult to apply the EUCS to software whose
primary purpose is to create information. Studies that have used the
EUCS to evaluate web sites or web-based information systems have had
. satisfaction with information systems and software 
differing results. Xiao and Dasgupta () used a slightly modified
EUCS instrument to measure user satisfaction with web-based portals.
Their results, based on  responses from university students, had good
psychometric values for all questions except ‘Does the system provide
sufficient information?’. Abdinnour-Helm, Chaparro, and Farmer ()
used the EUCS for evaluating people’s experience of using a web site,
after making minor changes to the wording (such as changing ‘system’
to ‘site’). Their results, based on  responses from university students,
show that all five dimensions were identifiable, but that the ‘timeliness
factor had poor loadings. They suggest that this factor needs to be rede-
fined to make it more relevant to this context, perhaps by changing it to
measure the number of steps required to find the required information.
Zviran, Glezer, and Avni () used the  items to measure user sat-
isfaction with commercial web sites. In contrast to Xiao and Dasgupta
() and Abdinnour-Helm, Chaparro, and Farmer (), they found
that all five dimensions could be clearly identified, but that the first
factor, content, accounted for .% of the variance in user satisfaction,
suggesting that the other four dimensions are much less closely linked
to satisfaction in this context.
Etezadi-Amoli and Farhoomand ()
Etezadi-Amoli and Farhoomand () developed an independent in-
strument to measure end-user computing satisfaction, arguing that pre-
vious instruments had been limited by their focus on the information
products of the system being assessed, and that other aspects needed to
be considered, in particular its individual and organisational impacts.
They identified six dimensions: functionality, ease of use, quality of
output, support, security, and documentation, based on  responses
from people in a range of positions in  different organisations. Etezadi-
Amoli and Farhoomand’s approach is more general than that taken in
the previous studies, and their inclusion of documentation and support
as individual dimensions implicitly acknowledges the changing nature
of the end-user computing environment, moving from being relatively
passive ‘consumers’ of information produced by an organisation’s IT
department to more active users of software which is an integral part of
their daily tasks. Despite this broader approach, the Etezadi-Amoli and
Farhoomand instrument has not been used extensively in subsequent
research.
Other instruments
The six measurement scales discussed above are not the only approaches
to measuring user satisfaction with software or information systems. Zir-
van and Erlich () identify six studies that used a single question to
measure overall user satisfaction, and eleven that used an independent
approach, rather than using or modifying an established scale. Other
 literature review
research has focused on developing instruments for specific settings or
types of software, often using one or more of the six ‘standard’ scales as
a starting point. Selected examples of these other approaches include:
• Palvia () and Palvia and Palvia (), who developed a list of
dimensions that contribute to small business owners’ satisfaction
with their IT systems; their measurement instrument included
vendor support and training and education as dimensions that
contribute to an overall satisfaction measure;
• Cho and Park (), who developed the electronic commerce
user-consumer satisfaction index (ECUSI), with ten dimensions
(product information, consumer service, purchase result and de-
livery, site design, purchasing process, product merchandising,
delivery time and charge, payment methods, ease of use, and addi-
tional information services), and calculated an overall satisfaction
score as
n∑
d=1
sd;
• Ong and Lai (), who developed a scale to measure user satis-
faction with knowledge management systems, using existing user
satisfaction instruments and incorporating additional statements
that are relevant to knowledge management. The final version,
tested with  respondents using in-house knowledge manage-
ment systems in four companies, showed that four dimensions
(content, ease of use, personalisation, and community) explained
.% of the variance in overall satisfaction;
• Wang and Liao (), who developed a scale to measure mobile-
commerce user satisfaction, which had  items, grouped into four
dimensions (content quality, appearance, service quality, and ease
of use);
• Ramasubbu, Mithas, and Krishnan (), who considered cus-
tomer satisfaction with enterprise system support services, measur-
ing overall satisfaction with a single question, and asking respon-
dents to rate their satisfaction with four dimensions: responsive-
ness, technical skills, behavioural skills, and the extent of support,
using a -point scale ranging from ‘not satisfied’ () to ‘highly
satisfied’ (). They used a single question per dimension, because
their goal was to have a high response rate; to achieve that they be-
lieved they needed a short survey. However, because of this, they
were unable to quantify the reliability or validity of their data.
Ramasubbu, Mithas, and Krishnan found that behavioural skills
were more important than technical skills in determining overall
customer satisfaction, based on responses from  customers (a
% response rate);
• Tojib, Sugianto, and Sendaya (), who developed a scale to mea-
sure user satisfaction with business-to-employee portals, finding
. satisfaction with information systems and software 
five dimensions: usefulness, confidentiality, ease of use, conve-
nience, and portal design; and
• Bargas-Avila, Lötscher, and Sébastian (), who developed a
new scale to measure user satisfaction with an intranet, finding
two main dimensions (content quality and intranet usability) that
explained .% of the total variance in satisfaction.
.. Dimensions of satisfaction
The previous section showed how the various instruments to measure
user satisfaction with information systems and software have evolved as
the context for using technology changes. The underlying factors they
measure relate to different aspects of this context. This section lists the
individual factors identified in the instruments that were examined,
grouped in broad categories to show whether they apply to aspects of
the the system, the information it provides, the community, tools (which
are resources needed to use the software), the user, or are specific to a
particular type of application.
The list of system-related dimensions of satisfaction in Table  on the
following page shows that  different underlying concepts have been
measured as components of user satisfaction with a system/software.
The only one that is common to a large number of studies is ‘Ease of
use’. Some concepts appear to be similar, such as Appearance, Layout,
and Site design. Reliability and Service reliability are also likely to be
measuring the same underlying concept, as are Ease of use and Usability.
However, overall the table shows that most of these have been used
in a single study, with no apparent overlap between their underlying
meanings.
There is considerably more agreement within the information di-
mensions of satisfaction than with the system-related ones. Table  on
page  lists the actual names used in the studies, but it is clear that
there is considerable overlap among them. Some of the terms used ap-
pear to be synonyms for the same concept, such as ‘Output quality’ and
‘Quality of output’; this concept might also be the same as ‘Information
quality’, ‘Content quality’, and ‘Information product’. The terms used to
name the top four dimensions are the ones used by Doll and Torkzadeh’s
EUCS, and reflect its popularity as a standard instrument to measure
user satisfaction.
Table  on page  shows that community-oriented dimensions have
been considered by a number of researchers. From the names some
appear to be similar or to overlap, such as EDP services, EDP staff, and
EDP staff and services; and End-user support, Support, and Support
factor. However, overall there appears to be little consensus on what di-
mensions should be measured to assess satisfaction with the community
component of the software/system.
Table : System dimensions of satisfaction
dimension
no. of
studies references
Ease of use 
Doll and Torkzadeh (); Doll, Xia, and
Torkzadeh (); Kim and McHaney
(); Rainer and Harrison ();
Somers, Nelson, and Karimi ();
Abdinnour-Helm, Chaparro, and Farmer
(); Zviran, Glezer, and Avni ();
Etezadi-Amoli and Farhoomand ();
Cho and Park (); Ong and Lai ();
Wang and Liao ()
Security 
Tan and Lo (); Etezadi-Amoli and
Farhoomand ()
Appearance  Wang and Liao ()
Capability  Kekre, Krishnan, and Srinivasan ()
Confidentiality  Tojib, Sugianto, and Sendaya ()
Convenience  Tojib, Sugianto, and Sendaya ()
Functionality  Etezadi-Amoli and Farhoomand ()
Installability  Kekre, Krishnan, and Srinivasan ()
Intranet usability 
Bargas-Avila, Lotscher, and Sebastian
()
Layout  Muyelle, Moenaert, and Despontin ()
Maintainability  Kekre, Krishnan, and Srinivasan ()
Performance  Kekre, Krishnan, and Srinivasan ()
Portal design  Tojib, Sugianto, and Sendaya ()
Reliability  Kekre, Krishnan, and Srinivasan ()
Service reliability  Miller and Doyle ()
Site design  Cho and Park ()
System
characteristics  Miller and Doyle ()
System integration  Tan and Lo ()
System quality  McKinney, Yoon, and Sahedi ()
System utility  Tan and Lo ()
Usability  Kekre, Krishnan, and Srinivasan ()
Usefulness  Tojib, Sugianto, and Sendaya ()
User interface  Tan and Lo ()
Web system
satisfaction  Cheung and Lee ()

Table : Information dimensions of satisfaction
dimension
no. of
studies references
Accuracy 
Doll and Torkzadeh (); Doll, Xia, and
Torkzadeh (); Kim and McHaney
(); Rainer and Harrison ();
Somers, Nelson, and Karimi ();
Abdinnour-Helm, Chaparro, and Farmer
(); Zviran, Glezer, and Avni ()
Format 
Doll and Torkzadeh (); Doll, Xia, and
Torkzadeh (); Kim and McHaney
(); Rainer and Harrison ();
Somers, Nelson, and Karimi ();
Abdinnour-Helm, Chaparro, and Farmer
(); Zviran, Glezer, and Avni ()
Timeliness 
Doll and Torkzadeh (); Doll, Xia, and
Torkzadeh (); Kim and McHaney
(); Rainer and Harrison ();
Somers, Nelson, and Karimi ();
Abdinnour-Helm, Chaparro, and Farmer
(); Zviran, Glezer, and Avni ()
Content quality 
Wang and Liao (); Bargas-Avila,
Lotscher, and Sebastian ()
Information product 
Baroudi and Orlikowski (); Doll,
Raghunathan, Lim and Gupta ()
Information quality 
Tan and Lo (); McKinney, Yoon, and
Sahedi ()
Accuracy, format,
and preciseness of
information
 Chen, Soliman, Mao, and Frolick ()
Fulfilment of user
needs
 Chen, Soliman, Mao, and Frolick ()
Information  Muyelle, Moenaert, and Despontin ()
Output quality  Raymond ()
Quality of output  Etezadi-Amoli and Farhoomand ()
Web information
satisfaction
 Cheung and Lee ()

Table : Community dimensions of satisfaction
dimension
no. of
studies references
Training and
education  Palvia (); Palvia and Palvia ()
Vendor support  Palvia (); Palvia and Palvia ()
Community  Ong and Lai ()
Consumer service  Cho and Park ()
EDP services  Doll, Raghunathan, Lim and Gupta ()
EDP staff  Doll, Raghunathan, Lim and Gupta ()
EDP staff and
services  Baroudi and Orlikowski ()
End-user support  Chen, Soliman, Mao, and Frolick ()
IS staff quality  Miller and Doyle ()
IS staff
responsiveness  Miller and Doyle ()
Management
support  Tan and Lo ()
Relationships with
management  Guimaraes and Gupta ()
Relationships with
other departments  Guimaraes and Gupta ()
Strategic
management  Miller and Doyle ()
Support  Etezadi-Amoli and Farhoomand ()
Support factor  Raymond ()
Technical image  Guimaraes and Gupta ()
Table : Tool-related dimensions of satisfaction
dimension
no. of
studies references
Additional
information services  Cho and Park ()
Product information  Cho and Park ()

. other characteristics related to user satisfaction 
Table : User-related dimensions of satisfaction
dimension
no. of
studies references
Attitude to EDP
staff  Raymond ()
End user control  Miller and Doyle ()
User attitude  Tan and Lo ()
User involvement  Miller and Doyle ()
User-system
relationship  Raymond ()
Tools are information resources that support users, and make it possi-
ble for them to use the system/software independently. Table  on the
preceding page lists two tool-related dimensions of satisfaction iden-
tified in the literature, which is lower than the number of dimensions
found in the other categories. This may reflect researchers’ lack of aware-
ness of the importance of tools to software users, or it may mean that
tools are only important in certain contexts.
Table  on this page shows that user-related dimensions of satisfaction
are no longer measured as part of satisfaction, with the only studies
that included these concepts being published  or more years ago.
As Section . on the current page shows, user characteristics are now
considered to be a factor that influences the way a person assesses their
satisfaction with software, rather than something that contributes to
their satisfaction.
The  dimensions of satisfaction in Table  on the following page have
each been used by a single study, as might be expected. Each of these
dimensions represents a concept that is important in the specific appli-
cation context being studied, and is unlikely to be of interest outside
that context.
. other characteristics related to user satisfaction
The previous section discussed the aspects of an information system/-
software that have been used to measure user satisfaction with a sys-
tem/software. However, research has shown that other characteristics,
such as the individual’s background, or the wider organisational context,
also have an effect on a respondent’s reported level of satisfaction. A
large number of constructs have been studied as predictor variables
with respect to satisfaction, such as use, information quality, system
quality, and support quality, which form part of Delone and McLean’s
success model (, ).
 literature review
Table : Context-specific dimensions of satisfaction
dimension
no. of
studies references
Cost/benefit to the
organisation  Guimaraes and Gupta ()
Delivery time and
charge  Cho and Park ()
Fulfilment of user
needs  Chen, Soliman, Mao, and Frolick ()
Payment methods  Cho and Park ()
Personalisation  Ong and Lai ()
Product
merchandising  Cho and Park ()
Purchase result and
delivery  Cho and Park ()
Purchasing process  Cho and Park ()
.. The FLOSS context
Two studies that examined individual and organisational factors were
used to identify predictor variables relevant to the FLOSS context of
this research. McKeen, Guimaraes, and Wetherbe () found that
user participation had a . correlation with user satisfaction, sig-
nificant at p6.. They also found that both user influence and user–
developer communication had positive correlations with satisfaction,
significant at p6., while task and system complexity acted as mod-
erators of the relationship between participation and satisfaction. In a
subsequent study, Guimaraes, Staples, and McKeen (), examined
the relationship between satisfaction and user participation, user expe-
rience, user–developer communication, user training, and user conflict.
Their findings showed a similar correlation between participation and
satisfaction, but found no significant relationship between satisfaction
and user influence or user–developer communication. The variables
they studied are all relevant in a FLOSS context, since participation in a
FLOSS project varies from person to person, and FLOSS projects rely on
a range of asynchronous communication tools to allow participants to
work effectively together. Similarly, participants in a FLOSS project are
likely to have a range of experience and training, suggesting that these
would be useful variables to examine.
One other study was used to identify possible factors to include in this
research. Mahmood, Burn, Gemoets, and Jacquez () conducted a
meta-analysis of  user satisfaction studies, and distinguished between
. other characteristics related to user satisfaction 
experience and skills/knowledge. Experience related to the length of
time the user has been using an information system/software, while
skills and knowledge were more general. Since many FLOSS projects are
relatively new, and people’s experience with them may be limited, this
research considered both concepts as predictor variables, to see which,
if either, of them is significant.
The sections below discuss each of these concepts in more detail,
grouped as individual characteristics and organisational characteristics,
following the approach used by Sabherwal, Jeyaraj, and Chowa ().
The individual characteristics are skills and knowledge, experience,
training, and participation, and the organisational characteristics are
user influence, user–developer communication, task complexity, and
system complexity.
.. Individual characteristics
Individual characteristics vary from person to person, and include at-
tributes that relate to knowledge and skills, and level of participation.
Since a person’s judgement of how satisfied they are with a product or
service involves an assessment of how well it meets their expectations,
it makes intuitive sense that there will be variations between individual
users’ satisfaction because of differences in their backgrounds.
Skills and knowledge
People with higher levels of skills in using computers may be more
satisfied with the software that they use, since they are likely to be able
to work more efficiently, and may also be more able to solve their own
problems. In addition, people with higher skills may have more realistic
expectations about what can and cannot be done than people with low
skill levels, and therefore have smaller gaps between their expected
and actual levels of performance. In a FLOSS context, individual skills
and knowledge may be particularly important, because in many FLOSS
projects, support is provided by other participants, rather than by a
commercial service provider, and the level of this support may vary
from project to project.
Research interest in individual skills and knowledge began in the late
s, with Munro, Huff, Marcolin, and Compeau () publishing one
of the first articles to examine what they termed ‘user competence’. Blili,
Raymond, and Rivard () found that end-user skills had a low but
statistically significant effect on user satisfaction, accounting for %
of the variance (p<.). Similarly, Jang () found a path coefficient
of . between computer competence and satisfaction, significant at
p<., in a study of users of an electronic document exchange system.
In contrast, in their study of small business owners’ satisfaction with
 literature review
their computer systems, Palvia and Palvia () found no significant
correlation between skills and satisfaction.
Different authors have taken different approaches to measuring users’
skills. Blili, Raymond, and Rivard () used a concept they called
‘end user computing competence’, which is related to user skills and
knowledge, asking their respondents to choose from four categories
of computer user, ranging from non-programming end-user through
to functional support personnel. This classification was based on the
way users accessed information in databases, assigning them to a higher
category if they used command-level and/or programming languages
rather than pre-defined menus. This distinction is much less clear today
because menu-driven interfaces are now more common than command-
line ones.
Palvia and Palvia () used a single item that asked respondents to
assess their computer skills as poor, average, and good. This approach
is straightforward, but it relies on users’ ability to judge their skills
realistically, and the use of only three values limits the scale’s ability to
discriminate between different levels of user skills.
More recently Torkzadeh and Lee () developed a  item scale to
measure end-user computing skills covering technical skills, business
knowledge, educational background, and computing skills. The instru-
ment was tested by asking practitioners to identify any gaps in coverage,
and whether the questions could be easily understood. Data from 
respondents showed that  of the questions had good correlation with
respondent’s overall assessment of their skills, and high internal reliabil-
ity. This is a generic scale, suitable for use with any type of application
software, unlike the -item scale to assess user knowledge of using
spreadsheets developed by McGill and Dixon (), which included
questions that related only to spreadsheet functionality.
Training
Effective training can be expected to result in more confident users,
which would increase their satisfaction. Considerable research has in-
vestigated this relationship, starting with Nelson and Cheney ().
Although training may be related to knowledge and skills, it is gener-
ally measured separately. Training in using software and information
systems can come from a variety of sources, including self-study that
makes use of documentation or online resources, or through formal
courses offered by software vendors or other service providers.
However, empirical research has shown varying correlations between
training and satisfaction. Guimaraes, Staples, and McKeen () found
that there was a . correlation between training and satisfaction, sig-
nificant at p6.; in contrast, Al-Gahtani and King () found no
significant relationship between training and satisfaction. In a meta-
analysis of  studies that examined the relationship between training
. other characteristics related to user satisfaction 
and what they termed ‘implementation success’ (usually measured as
user satisfaction), Sharma and Yetton () found that the mean corre-
lation was ., with a range of −. to .. This range of correlations
suggests that the impact of training is sensitive to the context in which
the software or information system is being used.
The Nelson and Cheney scale for measuring the effectiveness of train-
ing asks people to indicate the extent of training they received from
different sources, such as vendor training, in-house training, or self-
study.
Experience
Section . on page  explained that a person’s assessment of their
satisfaction with a product or service is a cumulative judgement, based
on their experiences. This suggests that extent of experience may af-
fect people’s satisfaction with a FLOSS project. Experience is related to
knowledge and skills, but differs in that it includes the concept of time
or duration. As people gain experience in using software or information
systems, they are likely to develop more realistic expectations, which
will then affect their satisfaction ratings. In a meta-analysis of  stud-
ies of user satisfaction, Mahmood, Burn, Gemoets, and Jacquez ()
found that user experience had had a large combined effect size (.)
on respondents’ level of satisfaction. In an analysis of  articles dealing
with user acceptance of information technology, Sun and Zhang ()
found that experience had a moderating effect on the relationship be-
tween perceived ease of use and behavioural intention. However, other
research has found conflicting results for the relationship between expe-
rience and satisfaction. Guimaraes, Staples, and McKeen () found
that experience had a . correlation with satisfaction, significant at
p6., though it had a very small effect, increasing R2 by only ..
Lawrence and Low () studied users of two systems, and found that
user experience had a significant influence on satisfaction at the .
level for  users of one system, but was not significant for  users of
a different system. The differences between these results suggest that
the effect of experience varies with the context of the information sys-
tem/software being assessed. No studies have examined the relationship
between experience and satisfaction in the context of a FLOSS project.
Experience is typically measured using a scale first used by Igbaria,
Guimaraes, and Davis (), which asks respondents to rate the extent
of their experience relative to other members of the project team for five
aspects of technology use: using systems of this type, using this particu-
lar system, using computers in general, as a member of a development
team, and as a member of this development team.
 literature review
Participation in system development
Participation in system development, and its effects, have been the sub-
ject of extensive research in information systems. The terms used for
participation vary, with some researchers using the term ‘user involve-
ment’ rather than ‘user participation’. This section reviews research that
has used both terms, but follows Barki and Hartwick’s () recommen-
dation to distinguish between participation, which they defined as “the
set of operations that individuals have or have not performed” (p,),
and involvement, which they argued was a subjective state representing
the user’s judgement of the system’s importance and relevance. This the-
sis is concerned with actual participation, rather than the psychological
state of involvement.
In a meta-analysis of  studies that considered user satisfaction as an
outcome variable, Mahmood et al. () found that user participation
in system development had the largest combined effect size on satisfac-
tion of all the variables considered. Their meta-analysis of  studies
that examined relationships between a range of individual and organisa-
tional factors and satisfaction, found participation had a path coefficient
of . with satisfaction, significant at p<.. More recently, He and
King () conducted a meta-analysis of  empirical studies of user
participation in system development, which showed that participation
had been studied as a predictor variable for the outcome variables satis-
faction, use intention, use (meaning actual use), individual impact, team
performance, project quality, and project success. Their results showed
that a majority of studies () had examined the relationship between
participation and satisfaction, and that participation and satisfaction
had the highest integrated effect size of ., significant at p<. level.
The individual effect sizes for participation ranged from . to .,
which suggests that context has an impact on the size of the correlations
between participation and satisfaction.
Most studies have considered the impact of user participation on
satisfaction only from the users’ point of view. Subramanyan, Weisstein,
and Krishnan () examined the relationship between user partici-
pation and satisfaction from the developers’ perspective as well. Their
data were gathered from a conventional systems development context,
with clearly defined roles for users and developers. They found dif-
ferences between user and developer satisfaction that varied with the
extent of user participation in projects at two stages of their life-cycle:
new developments and maintenance projects. Their findings generally
showed that users who had extensive participation in new developments
were less satisfied than those who participated less, while the opposite
was the case for maintenance projects. Developer satisfaction followed
a different pattern, increasing along with user participation for new
developments, but decreasing for maintenance projects.
. other characteristics related to user satisfaction 
Participation in system development has been measured in different
ways. Markus and Mao () noted that some researchers have focused
on the system development process, asking questions about participa-
tion in requirements generation, software development, and system
testing, while other researchers have focused on implementation and
project management. Igbaria and Guimaraes () asked survey re-
spondents to indicate how much they had been involved in nine specific
activities; this approach was also used by Yoon, Guimaraes, and O’Neal
(). Doll and Torkzadeh (b) developed a general-purpose instru-
ment to measure participation, with eight items relating to three aspects
of a conventional system development project: systems analysis, imple-
mentation, and administration. However, because all of these measures
assume that the project being assessed used a conventional life-cycle
approach to system development, none is suitable for the context of a
FLOSS project. This is because FLOSS development processes typically
lack these explicit stages.
.. Organisational characteristics
In a FLOSS context, organisational characteristics refer to characteristics
of the overall project, or characteristics of the respondent’s interactions
with the project and/or software.
Perceived influence
When people participate in a software development project, they expect
this participation to have an effect. Markus () described the main
goal of participation as the improvement of the system’s functionality
and interface so that it is a closer match to users’ mental models (p.).
For this to happen, the users must be able to influence the development
process and priorities. Edström () was one of the first to study the
impact of users’ perceived influence on their perceptions of the success
of a software development project, finding that there was a . correla-
tion between the two (significant at the % level). McKeen, Guimaraes,
and Wetherbe noted that if there is no or limited participation, then
there can be little or no influence (, p.). Doll and Torkzadeh
(a) suggest that perceived influence is important when people par-
ticipate in systems development because it makes them feel that their
time has been well spent, and their efforts are appreciated. McKeen,
Guimaraes, and Wetherbe () found that perceived user influence
had a . correlation with satisfaction, significant at p 6.. More
recently, Larsen () found that influence had a . path coefficient
with Doll and Torkzadeh’s () End-User Computing Satisfaction
(EUCS) instrument’s accuracy, significant at p6., and a . path coef-
ficient with EUCS ease of use, significant at p6.. These values were
 literature review
similar to those for communication (. with EUCS accuracy and .
with EUCS ease of use, both significant at p6.).
Several approaches to measuring perceived influence have been de-
veloped. Edström () used a single question that asked respondents
how much influence they had had in each of six stages in the software
development process. The most common instrument for measuring
perceived influence was developed by Franz and Robey (); it asks
respondents to indicate the extent to which they, rather than IS staff,
made key decisions at the design and implementation stages of a soft-
ware development project. An implicit assumption in this measure is
that users and IS staff have different responsibilities, which may not
necessarily be the case in a FLOSS context, since the distinction between
users and developers can be less clear-cut.
Perceived developer communication quality
Communication is generally assumed to be an important aspect of
developing information systems/software, since developers need to
understand user requirements in order to implement them effectively.
Studies of the role of good communication in information system de-
velopment can be traced back to Edström (), with many other
researchers stressing its importance. Some examples include Robey and
Farrow (), and Gefen and Keil (). Robey and Farrow ()
found that good communication reduced conflict during the develop-
ment of an insurance processing system, while Gefen and Keil ()
found that perceived developer responsiveness, a construct which is
related to developer communication, had a . path coefficient with per-
ceived usefulness and a . path coefficient with perceived ease of use
(both significant at p<.). McKeen, Guimaraes and Wetherbe ()
found that there was a low, but statistically significant correlation be-
tween perceived quality of developer communication and satisfaction
(., p6.). While these examples suggest that the relationship be-
tween developer communication and satisfaction is consistently strong,
Guimaraes, Staples, and McKeen () found no significant correlation
between the two constructs in their results, suggesting that context may
be important to this relationship. Perceived communication quality has
not yet been tested in a FLOSS context.
Perceived complexity
Rogers’ widely used Diffusion of Innovation theory (DOI) included the
concept of complexity as one of five factors that influences people’s will-
ingness to adopt a new technology (). Rogers defined complexity
as “the degree to which an innovation is perceived as relatively difficult
to understand and use” (, p.). Complexity has been studied in
the context of information system adoption more often than in studies
of user satisfaction. Though some studies, such as Agarwal and Prasad
. other characteristics related to user satisfaction 
(), replaced the concept of complexity with ease of use, Rogers’
definition makes it clear that the DOI concept of complexity is broader,
involving the cognitive element of understanding as well as ease (or
difficulty) of use. Sharma and Yetton () made a clear distinction
between the two concepts, arguing that complexity is a broader concept,
including technology and support requirements as well as ease of use.
Sun and Zhang () recognised this difference, suggesting that per-
ceived complexity affects the relationship between perceived ease of use
and behavioural intention. They argued that perceived ease of use is
more important when the underlying technologies are perceived to be
difficult to understand than when they are considered simple. In the
FLOSS context for this thesis, the broader concept of complexity was
judged to be more appropriate than the narrower concept of ‘ease of
use’, particularly because the line dividing users and developers is less
clear than in conventional systems development projects.
McKeen, Guimaraes, and Wetherbe () identified two types of
complexity: system complexity and task complexity. System complexity
is associated with the overall environment, while task complexity re-
lates to uncertainty participants have about aspects of their activities.
Where people need to choose between alternative ways of accomplish-
ing a specific goal, task complexity will be high. System complexity, on
the other hand, relates to the way the system as a whole is perceived.
McKeen, Guimaraes, and Wetherbe () found that both task and sys-
tem complexity moderated the relationship between participation and
satisfaction. In particular, they found that the correlation between par-
ticipation and satisfaction was higher when perceived task and system
complexity were both high, and lower when task and system complexity
were both low. They argued that this showed that it is particularly im-
portant to involve users in information system/software development
when the requirements were complex, since that would help ensure the
system’s developers developed a better understanding of what functions
the system needed to provide. In contrast, Blili, Raymond, and Rivard
() found that task complexity had a direct relationship with satis-
faction, acting as an independent predictor. Their results showed that
task complexity had a −. path coefficient (significant at p<.) with
satisfaction, suggesting that as user tasks became less certain (i.e., more
complex), their perceived satisfaction with software decreases slightly.
As the range of tasks people can carry out with software increases,
the importance of both task and system complexity as a moderator of
satisfaction may increase, and so this concept was judged to be relevant
to the context of this research. Task complexity is usually measured
using Rizzo, House, and Lirtzman’s  scale assessing role conflict
and ambiguity, and system complexity using Tait and Vessey’s 
scale that asked people to assess complexity relative to other systems
they had used.
 literature review
.. Satisfaction and FLOSS projects
Only a few studies have examined satisfaction in a FLOSS context.
Crowston, Howison, and Annabi () posted a message on Slash-
Dot, a popular developer news site, asking for readers’ views on what
measure(s) would represent FLOSS project success. Two of the result-
ing suggestions were user and developer satisfaction, suggesting that
research into participant satisfaction with FLOSS projects would be very
relevant to the developer community. However, only four studies were
identified that considered satisfaction in this context.
The first, Chin and Cooke (), used a model derived from research
on factors that influence job satisfaction to measure the relationship
between Linux developers’ intrinsic and extrinsic motivations for being
involved with the project and their intrinsic and extrinsic satisfaction
with their participation in a FLOSS project. Their results showed that
intrinsic satisfaction, related to individual achievement and challenges,
was correlated with opportunities to develop technical skills, intrinsic
and extrinsic motivation, and group trust. Extrinsic satisfaction was
less important, and did not correlate as strongly with other variables,
suggesting that extrinsic satisfaction was not as important to their re-
spondents. Their results were limited by a small sample size (), and
low correlations between measurement items for their constructs which
meant that most of their measures involved a single item. In addition,
because some FLOSS participants work on the projects as volunteers,
rather than as part of their paid employment, using concepts related to
job satisfaction may not have been appropriate in this context. This may
also explain why the intrinsic satisfaction component of the model was
more important than the extrinsic one.
The second, Lee, Kim, and Gupta (), measured user satisfaction
with the Linux operating system as one component of a research model
based on DeLone and McLean’s  IS success model. They measured
satisfaction only from the users’ perspective, and used McKinney, Yoon,
and Zahedi’s  -point scale to measure overall satisfaction; their
results showed that there was a significant positive relationship between
both perceived software quality and perceived community service qual-
ity and user satisfaction. However, perceived community service quality
had no significant relationship with use, though perceived software
quality did. Their measure of perceived community service quality was
based on concepts in the SERVQUAL model, but omitted the ‘tangible’
component. Their rationale for doing so was that the community was
virtual, with no tangible components, but this overlooked such tools as
documentation and email discussion list archives. This shows again that
researchers have given little attention to the importance of the role tools
play in a FLOSS context.
 SERVQUAL is a discrepancy-based approach to measuring customer perceptions of service
quality.
. other characteristics related to user satisfaction 
Casaló, Cisneros, Flavián, and Guinaliu () looked at the influence
of reputation on community members’ satisfaction with their partic-
ipation in the social networks associated with a FLOSS project. They
measured overall satisfaction using three questions that asked respon-
dents to say whether they made a correct decision to participate, how
satisfied they were with their experience of the online network, and how
satisfied they were with their relationship with the online network and
its members. Casaló, Cisneros, Flavián, and Guinaliu did not distinguish
between different types of participation, and considered all respondents
to fit in the single category of ‘developer’.
Braccini, Silvestri, and Za () conducted a small-scale survey of
students who used the Moodle electronic learning management system.
They based their questions on the ISO  and ISO  software
quality model, restricting them to the dimensions they judged to be
relevant to end users: functionality, reliability, usability, and quality
in use. Their results were limited by the small size of their sample (
responses), and the use of a -item Likert scale for responses. This meant
the response distribution had a low variation, shown by the standard
deviations which ranged from . to .. Their results showed that
respondents had a high level of general satisfaction (a mean of . out
of ), and that reliability had the lowest score (.).
.. Implications for this research
While the examples in the previous sections demonstrate the popular-
ity of satisfaction as a research topic in information systems, they also
show that there have been many different approaches to defining and
measuring satisfaction in this context, with no consensus about which
approach is best. This extensive body of literature has not resulted in
a single, widely used scale that is suitable to measure user satisfaction
with software/information systems. Although most authors refer to
‘user satisfaction’ as if all research has been measuring the same under-
lying concept, the preceding discussion shows that there is considerable
variation in what is being asked and how the various researchers have
named the factors that contribute to satisfaction.
The recent research literature also appears to show that the number of
approaches to measuring satisfaction is increasing, rather than consoli-
dating around a single approach. Though Chen, Rogers, and He ()
suggested that this means there are fundamental problems with the way
satisfaction has been defined and measured, most of the earlier stud-
ies have demonstrated acceptable internal reliability, with Cronbach’s
alpha values of . or higher. In addition they have shown that they
have adequate construct validity, generally indicated by the results of
a factor analysis showing that individual questions map onto distinct
 Moodle is a FLOSS learning management system originally released in  and installed
in over , sites by mid-. (http://moodle.org/stats/)
 literature review
dimensions. There have been several studies of the test–retest reliability
of the Doll and Torkzadeh () EUCS instrument. Though Galetta
and Lederer () questioned its reliability, subsequent research by
Hawk and Raju (), Torkzadeh and Doll (), Hendrickson, Glor-
field, and Cronan (), and McHaney, Hightower, and White ()
have confirmed that the instrument demonstrates adequate test–retest
reliability.
Since the evidence presented in these articles shows that all these
instruments gathered reliable and valid data in the specific research
context where they were used, one possible conclusion is that there are
underlying difficulties with the way the construct of ‘user satisfaction’
has been conceptualised. However, another interpretation comes from
acknowledging satisfaction as a complex construct, composed of a num-
ber of interrelated aspects. Oliver identified six different approaches
to assessing satisfaction, relating to the different types of comparisons
people may make when they indicate their satisfaction with a product
or service. These are need fulfilment, expectations, quality, value, eq-
uity, and regret (, p.). It may be unrealistic to expect a single
instrument to capture all of these aspects. The current diversity rein-
forces Seddon et al.’s  comment that this is a strength of IS research
into satisfaction. The range of approaches means that researchers have
a choice of instruments and approaches which can be adapted to the
specific context for the software/system being assessed.
The purpose of this research, to examine factors that influence partic-
ipant satisfaction with FLOSS projects, is a new context for information
systems satisfaction research. None of the existing instruments has
been developed specifically for this context, and this research therefore
needed to determine which dimensions are most relevant to participants
in a FLOSS project. This was done in part by identifying key charac-
teristics of FLOSS projects from previous research, complemented by
interviews with a purposive sample of people with differing levels of
involvement in selected FLOSS projects.
. theoretical model for this research
The theoretical model developed for this research draws primarily on
factors that affect user satisfaction with information systems/software
identified in Mahmood et al. (), plus McKeen, Guimaraes, and
Wetherbe () and Guimaraes, Staples, and McKeen (). These
factors were supplemented with two additional factors from the FLOSS
literature — perceived process and product openness.
Figure  on the facing page illustrates the preliminary research model
developed for this research. Each of the factors is discussed in the fol-
lowing sections.
Figure : Research model

 literature review
.. Perceived influence
Perceived influence was discussed in Section .. on page . In a
FLOSS context, perceived influence relates to the extent to which a
participant’s ideas and suggestions are implemented in the software,
or affect other decisions relevant to the project. Previous research that
considered the relationship between perceived influence and satisfaction
has had mixed results, with McKeen, Guimaraes, and Wetherbe ()
finding that there was a statistically significant, positive correlation
between the two variables. In contrast, Guimaraes, Staples, and McKeen
() found no statistically significant relationship. This suggests that
context plays a role in determining how strong the relationship between
perceived influence and satisfaction is, which justifies its inclusion in
the current research.
.. Perceived developer communication quality
Perceived developer communication quality was discussed in Section
.. on page . Since most FLOSS projects cross organisational bound-
aries, and may involve participants from around the world, this con-
struct was considered to be particularly relevant to the current research.
While it makes intuitive sense that there would be a strong correlation
between perceived developer communication quality and satisfaction,
the results of two studies that considered this factor differ. McKeen,
Guimaraes, and Wetherbe () found a low but statistically signif-
icant correlation between the two variables, but Guimaraes, Staples,
and McKeen () found no evidence of a statistically significant re-
lationship. This suggests that it is similar to perceived influence, and
that context may play a role in determining how strong the relationship
between perceived developer communication quality and satisfaction is,
which justifies its inclusion in the current research.
.. Participant skills and knowledge
Participant skills and knowledge were discussed in Section .. on
page . In a FLOSS project, participants may come from a wider variety
of backgrounds than in a conventional software development project,
which typically involves employees selected because they have the re-
quired skills and knowledge. Since FLOSS projects have flexible bound-
aries, and may involve people who have never met face-to-face, the same
selection criteria are unlikely to apply. As with perceived influence and
perceived developer communication quality, previous research into the
relationship between participant skills and knowledge and satisfaction
has had varying results, with Blili, Raymond, and Rivard () and
Jang () finding evidence to support a statistically significant, pos-
. theoretical model for this research 
itive relationship, while Palvia and Palvia () found no significant
correlation. Again, context may play a role in determining when this
relationship is significant, which justifies including participant skills
and knowledge in the current research.
.. Participant training
Participant training was discussed on page  in Section ... Training
has not previously been considered in the context of a FLOSS project,
but as with skills and knowledge, there is likely to be considerable
variation in the type of training that participants have had. As with
the constructs discussed above, previous research into the relationship
between training and satisfaction has had varying results, with Sharma
and Yetton () finding that correlations ranged from -. to . in
their meta-analysis of  studies. It appears that context again plays a
role in determining when this relationship is significant, which justifies
including participant training in the current research.
.. Participant experience
Participant experience was discussed in Section .. on page . In a
FLOSS project, participants are likely to have differing levels of expe-
rience, and as with participant skills and knowledge, standard criteria
are unlikely to be used to select participants for a FLOSS project. While
some research, such as Guimaraes, Staples, and McKeen (), has
shown a significant correlation between experience and satisfaction,
other research, such as Lawrence and Low (), has found the oppo-
site. Context appears to play a role in determining when this relationship
is significant, which justifies including participant experience in the
current research.
.. Extent of participation
The concept of participation was discussed in Section .. on page .
This factor measures the extent to which individual users, or user rep-
resentatives, are active participants in the FLOSS project’s community.
There is an extensive body of research discussing the importance of user
participation in system development, and overall these show that there
is a strong relationship between user participation and satisfaction. He
and King’s  meta-analysis showed an overall positive correlation
between participation and satisfaction, though its strength varied, and
appeared to be context dependent.
FLOSS projects evolve only when members of their communities
participate in project-related activities, and the ways in which they
contribute code has been studied in the past. This material was reviewed
 literature review
in Section .. on page . However, the relationship between extent
of participation and satisfaction has not yet been studied in a FLOSS
context, which justifies including this concept in the current research.
The standard approach to measuring participation involves gener-
ating a list of activities that involve users, and asking respondents to
indicate whether they had carried out each activity. As approaches to de-
veloping software change, these lists of activities have also needed to be
modified. For example, McKeen, Guimaraes and Wetherbe () used
Ives and Olson’s  -item list of activities as a starting point, but
removed items that no longer applied, modified the wording of others
to reflect changes in terminology, and added five items to cover newer
forms of participation. Barki and Hartwick () said that a measure
of user participation should include both formal and informal activities,
and should cover all stages of the system development process. Their
measure, which included  items, was based on the traditional water-
fall approach to developing information systems, with clearly defined
stages and built-in assumptions about the roles of users and information
systems staff.
Section .. on page  showed that a definitive list of FLOSS roles
and activities has not yet been developed, and none of the existing scales
for measuring participation is suitable for this context. This led to the
first sub-question for this research, What types of contributions do partici-
pants make to free/libre and open source software projects? This question
needed to be answered in order to develop a suitable measurement scale
to assess the extent of participation in a FLOSS project.
.. Perceived complexity
Section .. on page  discussed the concept of complexity and its
relationship to satisfaction, and identified two types of complexity: sys-
tem complexity and task complexity. FLOSS projects cover a range of
application areas, and can be assumed to vary in complexity. McKeen,
Guimaraes, and Wetherbe () showed that both system and task com-
plexity modified the relationship between participation and satisfaction.
Since the relationship between complexity and satisfaction has not yet
been studied in the context of a FLOSS project, it was included as a
moderating variable in this project’s research model.
.. Perceived process openness
Perceived process openness was discussed in Section .. on page .
This concept relates only to FLOSS projects, and was first developed by
Ye et al. (). It refers to the extent to which FLOSS project participants
are able to participate in project decision-making. There have so far been
no empirical studies of the impact of process openness on participant
. theoretical model for this research 
satisfaction, and no scales exist to measure it. Two relationships between
perceived process openness and satisfaction have been hypothesised:
first, that it is an independent predictor variable for the outcome variable
satisfaction, and second that it moderates the relationship between
extent of participation and satisfaction. The development of this scale
for this research is discussed in more detail in Chapter .
.. Perceived product openness
Perceived product openness was discussed in Section .. on page .
It is similar to perceived process openness in that it was identified by Ye
et al. (), and it was conceptualised in the context of a FLOSS project.
Perceived product openness relates to the way the project releases new
code, and the extent to which information about the project’s future
plans is available to FLOSS project participants. There have so far been
no empirical studies of the impact of product openness on participant
satisfaction, and no scales exist to measure it. Two relationships between
perceived product openness and satisfaction have been hypothesised:
first, that it is an independent predictor variable for the outcome variable
satisfaction, and second that it moderates the relationship between
perceived influence and satisfaction. The development of a measurement
scale for this research is discussed in more detail in Chapter .
.. Hypotheses
Figure  on page  shows the hypotheses that were tested in this
research. Hypotheses supported by previous research are shown as solid
lines in Figure  on page , while those that are new are shown as
broken ones.
h The higher the perceived participant influence, the higher the par-
ticipant satisfaction.
Previous studies of this relationship have had differing results.
McKeen, Guimaraes, and Wetherbe () found that (perceived)
user influence was an independent predictor of user satisfaction
(p 6 .), while Guimaraes, Staples, and McKeen () found
that it had no significant relationship with satisfaction. This dis-
crepancy suggests that the relationship needs further testing. In
addition, both studies surveyed users involved in in-house systems
development projects, and cannot necessarily be generalised to
the type of cross-organisational teams typically found in a FLOSS
project.
h The higher the quality of perceived community member communi-
cation, the higher the participant satisfaction.
 literature review
As above, previous studies of this relationship have had differ-
ent results. McKeen, Guimaraes, and Wetherbe () found that
(perceived) user/developer communication was an independent
predictor of user satisfaction (p6.), while Guimaraes, Staples,
and McKeen () found that there was no significant relation-
ship between the variables. This discrepancy suggests that the
relationship between these needed further testing. As with partic-
ipant influence, the relationship needs to be studied in a FLOSS
context. Since much of the literature on FLOSS projects emphasises
the importance of communication between participants, we would
expect to find a positive relationship between communication and
satisfaction.
h There is a positive relationship between participant skills and knowl-
edge and participant satisfaction.
Previous studies of this relationship have had varying results.
Lee, Kim, Lee () and Palvia () found that there was no
significant relationship between perceived skills and satisfaction,
while Yoon and Guimaraes () found a statistically significant
relations between user characteristics (which included user skills)
and user satisfaction (., significant at p< .).
h There is a positive relationship between participant training and
participant satisfaction.
Training can increase people’s confidence in their ability to use
software effectively. However, previous studies of the relationship
between training and satisfaction have had inconclusive results.
The role of training in a FLOSS context has not been previously
tested with empirical data.
h There is a positive relationship between participant experience and
participant satisfaction.
Mahmood et al.’s () meta-analysis identified  studies that
considered the impact of user experience on satisfaction, all of
which had a statistically significant, positive relationship between
experience and satisfaction.
h There is a positive relationship between the extent of participation
and participant satisfaction.
Previous research has consistently shown that there is a statisti-
cally significant relationship between participation and satisfac-
tion. Examples include McKeen, Guimaraes, and Wetherbe ()
and Lawrence and Low (), both of which found positive cor-
relations between the two factors significant at p<..
ha The greater the perceived system complexity, the greater the rela-
tionship between extent of participation and participant satisfac-
tion.
. summary 
hb The greater the perceived task complexity, the greater the relation-
ship between extent of participation and participant satisfaction.
McKeen, Guimaraes, and Wetherbe () found that both system
and task complexity were a moderators of the relationship between
participation and satisfaction (p6.); the more complex the
system, the stronger the relationship between participation and
satisfaction. FLOSS projects range from extremely simple to very
complex, and this hypothesis will examine the effect of perceived
complexity in a FLOSS context.
ha The higher the perceived process openness, the greater the relation-
ship between extent of participation and participant satisfaction.
hb There is a positive relationship between process openness and
participant satisfaction.
Ye et al. () identified the FLOSS project characteristic of prod-
uct openness, but did not examine its impact on participants’
satisfaction or on levels of participation. Hypotheses a and b
represent two possibilities. Under Hypothesis a, process open-
ness influences the relationship between perceived participant
influence and participant satisfaction, while Hypothesis b says
that it has a direct influence on participant satisfaction. No previ-
ous research has been done to test this relationship, and therefore
the proposed research will examine both hypotheses.
ha The higher the perceived product openness, the greater the rela-
tionship between perceived participant influence and participant
satisfaction.
hb There is a positive relationship between product openness and
participant satisfaction.
Ye et al. () identified the FLOSS project characteristic of prod-
uct openness, but did not examine its impact on participants’
satisfaction. Hypotheses a and b represent two possibilities. Un-
der Hypothesis a, product openness influences the relationship
between perceived participant influence and participant satisfac-
tion, while Hypothesis b says that it has a direct influence on
participant satisfaction. No previous research has been done to
test this relationship, and therefore the proposed research will
examine both hypotheses.
. summary
This chapter reviewed selected literature on FLOSS project structures,
community practices, the nature of satisfaction, and how it has been mea-
sured for information systems/software. This showed that researchers
 literature review
have taken a range of approaches to measuring satisfaction, and that sat-
isfaction measures have evolved as information systems/software moved
from mediated to ubiquitous computing, and as web-based information
systems became more popular.
The chapter also discussed factors that influence user satisfaction
judged as being relevant to the context of a FLOSS project, and pre-
sented a preliminary research model and hypotheses. The next chapter
discusses the research methodology used to answer the research ques-
tions, including the way the concepts were measured.
3
M E T H O D O LO G Y
This section begins with a discussion of the philosophical paradigms that
shaped the research design, followed by a description of the research
methodology.
. philosophical paradigm
All research is based on fundamental assumptions about the nature of
the world and sources of knowledge about it. These assumptions are
often referred to as the research philosophy (Pickard , p.), world-
view, or paradigm (Creswell and Plano Clark , p.). The choice
of research design is influenced by these assumptions, as well as the
nature of the research questions. Bryman identified two main aspects
of the philosophical worldview that need to be considered: ontology
and epistemology (, p.–). The specific ontology and epistemol-
ogy that underpin a research project also determine the most suitable
methodology to answer the research questions. The three main types of
methodology are qualitative, quantitative, or a combination of the two
generally referred to as ‘mixed methods research’ (Creswell and Plano
Clark , p.).
.. Ontology
The term ‘ontology’ refers to the researcher’s position about the na-
ture of reality, especially social concepts (Bryman , p.; Creswell
and Plano Clark , p.; Henn, Weinstein, and Foard , p.).
Two of the main ontologies used in social research are objectivism and
constructionism.
Objectivism takes the perspective that social phenomena have an
independent existence and can be treated as objects. Researchers who
use an objectivist ontology assume that there is a single reality that
can be described or measured, and that the researcher is an indepen-
dent observer of the phenomena. In addition, objectivism focuses on
relationships between concepts (Bishop , p.).
In contrast, constructionism says that social phenomena are produced
by people’s interactions, and that there are multiple views of reality,
based on individual perspectives (Creswell and Plano Clark , p.).
This approach says that the meaning of social concepts changes slowly
as culture evolves (Bishop , p.). Constructionists often study

 methodology
social phenomena to understand how this meaning changes over time
(Bryman and Bell , p.).
A researcher’s choice of ontology is reflected in the selection of a
research design. Objectivist research focuses on measurement, and often
uses quantitative methods such as surveys and statistical analysis in
order to produce generalisable results, while constructionist research
focuses on developing a rich description of attitudes and experiences,
focusing on differences between individuals gathered from qualitative
data. Section . on page  and Section . on page  showed that
research into satisfaction generally follows an objectivist ontology, focus-
ing on measuring satisfaction and understanding factors that influence
it. Therefore, this research also takes an objectivist approach, which is
demonstrated in the way it treats a FLOSS project as an object that can
be studied in order to classify types of activities. The objectivist ontology
is also apparent in its assumption that differences in satisfaction can be
measured and related to other constructs.
.. Epistemology
Epistemology is concerned with the nature of the sources of knowledge
associated with the phenomenon of interest to the researcher (Bryman
, p.). Researchers who study social issues must consider whether
the approaches traditionally used in the sciences can be adapted to
studies of social phenomena, or whether the subjective nature of social
phenomena means that they require a different approach.
Scientists who study the so-called ‘real’ world are concerned with
repeatable physical phenomena that can be observed, documented, and
measured. In addition, the researchers making the observations are
considered to be independent of the object being observed. This view,
which says that knowledge comes from observations based on concrete
evidence, is described by the term positivism (Orlikowski and Baroudi
). Positivism is usually associated with a search for generalisable
models that can be tested and verified or disproven (Henn, Weinstein,
and Foard , –). In addition, positivist research is usually quan-
titative, involving measurements and statistics (Bryman , p.).
An alternative view is interpretivism, which takes the view that social
phenomena are fundamentally different to ones that occur in nature, be-
cause they involve individual perceptions. Interpretivism says that these
perceptions, and the meanings people attach to them, are subjective,
and will vary between people depending on their social and cultural
background, as well as the meanings they place on objects, events, and
relationships (Henn, Weinstein, and Foard , p). Social researchers
who use an interpretivist paradigm acknowledge the social context of
their research, and generally seek to develop a deep understanding of
the ways their research participants view the world, rather than testing
. philosophical paradigm 
specific hypotheses. Gorman and Clayton (, p.) said that interpre-
tivism is generally inductive, and is used for theory building rather than
theory testing. Interpretive research is usually qualitative, involving
words and descriptions, rather than measurements (Bryman , p.).
In addition, it typically uses a flexible and unstructured research design
that may evolve as the research progresses (Henn, Weinstein, and Foard
, p.).
The positivist focus on outcomes means that it does not result in
a deep understanding of individual perspectives—instead positivism
seeks objective answers, while interpretivism is inherently subjective.
More recently, a third epistemology has been described, known as post-
positivism. Its origins are in the traditional positivist paradigm; Creswell
() said that postpositivist research is similar to positivism, since
it seeks to “describe causal relationships of interest” (p.). However, a
postpositivist approach acknowledges that the evidence used for this
may be imperfect or incomplete (Pickard , p.), which means that
postpositivists say that it is therefore not possible to ‘prove’ a hypothesis
(Creswell , p.). A postpositivist researcher therefore does not claim
that a hypothesis is proven, but instead says that it is consistent with
the evidence.
Creswell (, p.) identifies the key steps in postpositivist research
as:
. Theory development;
. Hypothesis generation;
. Data gathering;
. Hypothesis testing; and
. Theory revision.
These steps represent the deductive approach that is typical of posi-
tivism, and therefore also of postpositivism. In contrast, interpretivism
does not generate theory until after the data are collected, and it does
not involve hypothesis testing.
These differences between positivism, interpretivism, and postposi-
tivism suggest that the researcher’s beliefs about knowledge shape the
nature of the research question, and this then determines the choice
of the epistemological paradigm used in a research project. This re-
searcher’s educational background includes an undergraduate degree
in chemistry and mathematics, which are both positivist disciplines.
However, she also recognises that all observations are incomplete, and
that context may be important in conducting social research. This means
that the thesis takes a postpositivist perspective, measuring the effect
predictor variables have on the outcome variable ‘participant satisfac-
tion’. The central question of this thesis, What factors influence participant
satisfaction with a free/open source application software project?, assumes
 methodology
that specific factors can be identified objectively, and that their influence
on satisfaction can be measured.
.. Research methodologies
Creswell (, p.) identifies three common research methodologies:
. qualitative;
. quantitative; and
. mixed methods.
Qualitative research is typically used to explore and understand prob-
lems from the research participant’s point of view, and is most commonly
used when the researcher has a constructivist ontology and an interpre-
tive epistemology. It does not usually start with a theory or hypotheses,
but instead looks deeply at the meaning of the data collected in order to
identify themes or patterns. Qualitative research follows an inductive
approach, in which theory is developed from the data collected (Bryman
, p.).
In contrast, quantitative research collects measurements and examines
relationships between variables, reflecting an objectivist ontology and a
postpositivist epistemology. It usually follows a deductive approach, by
collecting data that is intended to test a theory (Pickard , p.).
Mixed methods research generally combines both qualitative and
quantitative data. In the s and s, this was considered to be ques-
tionable because of the differences in the main philosophical paradigms
the underpin the two approaches (Creswell and Plano Clark , p.).
More recently, mixed methods research has become more acceptable
because researchers have recognised that using “both types of data
will result in a better understanding of the research problem than one
data type alone could produce” (Creswell and Plano Clark , p.).
Pickard noted that mixed methods research is a good match for a post-
positivist epistemology, since the qualitative data can be used to support
the quantitative findings (, p.). In addition, gathering both quali-
tative and quantitative data provides a form of triangulation, because it
provides multiple sources of evidence to test the hypotheses (Leedy and
Ormrod , p.).
. specific techniques
This research used a two-stage sequential mixed methods approach to
answer the research questions identified in Section . on page . Specif-
ically, it followed what Creswell and Plano Clark call an exploratory
sequential design (, p.), since it began with a qualitative stage
intended to gain familiarity with the research context, followed by a
. specific techniques 
quantitative stage to test a theoretical model. In Creswell and Plano
Clark’s  notation, it was a qual→QUAN study, indicating that the
qualitative stage was intended to assist with development of the instru-
ment used in the subsequent quantitative stage (p.).
Stage  was a two-part qualitative investigation of a purposive sample
of FLOSS projects and their participants, designed to gain a deeper
understanding of the research setting, in particular the types of con-
tributions participants make to FLOSS projects. The data gathered in
this stage were also used to review the preliminary research model and
associated hypotheses, and to inform the development of the survey
instrument.
Stage  involved a quantitative survey of participants involved in
a range of FLOSS projects to test the research model and hypotheses.
Both stages of the project gathered data from human subjects, which
meant that the researcher needed human ethics approval in order to
proceed. Section . on page  discusses the ethical issues involved in
this research, as well as the consent process.
The specific techniques used in each stage of the research are dis-
cussed in the following sections.
.. Stage : Qualitative investigation
The main objectives of this stage of the research were to gain a deeper
understanding of the ways in which participants in FLOSS projects
interact, in order to review the preliminary research model, and to
gather data to answer the first research sub-question:
What types of contributions do participants make to free/libre
and open source software projects?
Population
This section discusses the approach used to select an appropriate sub-
population of FLOSS projects for the research.
Section . on page  showed that FLOSS communities are virtual,
with participants using a range of channels to communicate with each
other. Williams and Liong found that recruiting subjects from online
communities was problematic (, p.), recommending that re-
searchers studying a virtual community find ways of establishing a con-
nection with their subjects through shared interests and practices. One
technique used to establish this type of connection is through a shared
background; this researcher has worked as a librarian, and currently
teaches in a postgraduate library and information studies programme,
suggesting that library-related FLOSS projects may be suitable for her.
A wide range of FLOSS projects intended for library and information
managers has become available in the last  years. The OSSLIB (open
source software for libraries) web site (http://www.osslib.org/) listed
 methodology
over  projects in September , growing to over  projects by
late . These vary in size and complexity from simple Perl scripts to
generate statistics from transaction logs (Ovid Statistics Log Report Gen-
erator) to library management systems (Evergreen, Koha, OpenBiblio,
and PhpMyLibrary) to software for creating digital libraries/reposito-
ries (Greenstone, DSpace, EPrints, and Fedora). Some of this software is
intended to be used primarily by systems librarians, while other projects
have both librarian and end-user interfaces. Several of these projects
have hundreds of users; there is one plug-in to a commercial library
management system that has over  users. These characteristics sug-
gested that this sub-population provided a suitably diverse range of
projects for this research, and also had the type of connection with the
researcher’s background recommended by Williams and Liong ().
Much of the literature about FLOSS projects for LIM applications is in
the form of descriptive case studies, intended to inform practitioners
about the software’s existence and functionality. Recent examples in-
clude Darby (), Sessoms and Sessoms (), Lascarides (),
and Helling ().
In addition, restricting research to particular applications or subject
domains is established practice in FLOSS research. In an early example,
Hertel, Niedner, and Hermann () restricted their survey to mailing
lists used by members of the Linux kernel community. In another, Maass
() studied members of the Apache Cocoon project. Crowston et al.’s
 review of  papers published between  and  showed
that the highest proportion of empirical studies of FLOSS projects were
case studies of a single project, and that studies involving high num-
bers of projects were based on data harvested from FLOSS repositories.
They also found that Linux and Apache were the most common projects
studied, followed by Mozilla and Gnome. Porter, Williams, and Weitzer
() say that survey fatigue, defined as “overexposure to the survey
process”, is a common reason for low response rates to surveys. Because
of the emphasis placed on Linux, Apache, Mozilla, and Gnome in previ-
ous research, participants in these communities may be suffering from
survey fatigue. By choosing to study a group of FLOSS projects that have
not been studied extensively in previous research, the researcher hoped
to minimise the problem of survey fatigue. However, this also may limit
the generalisability and comparability of the results, which is discussed
further in Section . on page .
Choice of sampling technique
The choice of sampling technique was determined by the purpose of
this stage of the research. Four approaches to sampling were considered:
• convenience;
• snowball;
. specific techniques 
• random; and
• purposive.
In a convenience sample, respondents are selected because it will be
easy to interview them (Bryman , p.). Convenience samples
are unlikely to be representative of a population, and some types of
respondents may be over- or under-represented (Alreck and Settle ,
p.). This means that the results from a convenience sample cannot
be generalised to the wider population. Leedy and Ormrod suggested
that convenience sampling is best suited for exploratory research (,
p.), while Bryman and Bell noted that convenience sampling may be
used when a researcher is presented with an unexpected opportunity to
gather data (, p.). When the interviews for this stage of the re-
search were being planned in mid-, only two New Zealand libraries
had implemented FLOSS systems, and only two library-related FLOSS
projects were known to have New Zealand-based developers. Although
the exploratory nature of this stage of the research suggested that conve-
nience sampling might be a suitable approach, the limited number of
potential interviewees conveniently available in the researcher’s home
country means that convenience sampling was rejected.
’Snowball’ sampling is an iterative process of developing a sample
from a small group of initial key informants (Pickard , p.). These
initial interviewees are asked to suggest other people for the researcher
to approach for subsequent interviews. Bryman (, p.) noted
that this is useful when it is difficult to identify people with specific
characteristics, or when it is important for interviewees to have specific
relationships with each other. One example of this is when researchers
want to be able to compare individual perspectives on a specific event
experienced by several people, or when they want to survey family
members. However, Bryman also recommended that this approach be
used with caution, because it is likely to result in a sample that is
not representative of the population. Bryman and Bell suggest that a
snowball sample is most appropriate when it is impossible to identify a
sample using a sampling frame (, p.). Since this research was
not intended to gather comparative data, snowball sampling was not
considered suitable for this project.
In a random sample, every member of the population has an equal
chance of being selected as a research participant (Alreck and Settle
, p.). This requires access to a list of all individuals in the popu-
lation, so that a probability sampling technique such a drawing names
from a hat, or using entries from a table of random numbers to iden-
tify sample members, can be used (Pickard , p.-). While data
gathered using a random sample have the advantage that the results
are more likely be generalisable to the wider population than with a
non-random sample, using one for this research was not feasible because
of the reasons discussed in Section . on page . Specifically, there
 methodology
are no authoritative lists of FLOSS projects and their participants from
which to draw a random sample.
Purposive sampling is a form of non-random sampling commonly
used in qualitative research (Pickard , p.). Bryman () de-
scribed a purposive sample as “strategic” (p. ), meaning that poten-
tial respondents are identified based on their ability to provide data
relevant to the research questions. In addition, a purposive sample is
intended to produce a sample that reflects different characteristics of
the population (Bryman and Bell , p.). Gorman and Clayton
(, p.) emphasised that a purposive sample needs to include
respondents with a range of characteristics that are relevant to the re-
search project. Pickard reinforced this by suggesting that a researcher
preparing a purposive sample use a simple framework of relevant char-
acteristics before the sample is drawn (, p.). The main limitation
of a purposive sample is that it is not representative of the total popula-
tion, and is therefore not suited for quantitative studies. However, Stages
 and b of this research were qualitative, and by using a purposive
sample, the researcher was able have a mix of interviewees in differ-
ent roles, and from different projects. In their study of the processes
FLOSS projects used to assign work to specific developers, Crowston, Li,
Eseryel, and Howison () used a framework of five characteristics
of FLOSS projects they felt were most relevant to their research. This
shows that purposive sampling has previously been used in a similar
context to this research, and therefore a purposive sample was chosen
as the best fit for this research project. Details of the characteristics used
to select the sample are provided in Section .. on the current page.
.. Stage : Qualitative investigation
This stage used qualitative methods to develop the participation and sat-
isfaction measures, and to validate the preliminary model of factors that
influence user satisfaction, shown in Figure  on page . A qualitative
approach was selected as the most appropriate for this phase because it
is best suited to the collection of in-depth data, and for the development
of theories and concepts (Bryman , p.–).
Stage a: Document review
This phase involved the ongoing document review of a purposive sam-
ple of  LIM FLOSS projects. Projects were chosen to include a range
of community sizes (measured as number of sites, as far as this could
be determined), project ages, application types, number of developers,
software complexity, and activity levels, in order to develop a prelimi-
nary list of activities carried out by participants in the projects. These
characteristics were used as the selection criteria for two reasons. First,
they could be observed for all potential projects, meaning that a project
. specific techniques 
would not be excluded from consideration because of missing informa-
tion. Secondly, they represented aspects of the project and its community
that were known to vary, and could be selected to include as many com-
binations of characteristics as feasible, in order to achieve maximum
variation, as recommended by Pickard (, p.).
Table  on the next page shows the range of characteristics in the
sample, and Section . on page  includes a description of each project
and its characteristics.
For each project, documentation, email discussion archives, source
code, and web sites were examined to identify typical activities carried
out by project community members.
Stage b: Interviews
The next phase of the qualitative stage involved individual interviews,
in order to validate and improve the preliminary research model shown
in Figure  on page . The population from which the sample for this
stage of the research was selected included the authors of articles and
conference papers about LIM FLOSS projects, as well as people who
participated in project-related email discussion lists and contributed to
the osslib portal. This range of sources of information about project
participants was used in order to develop a population for the sampling
frame that was as broad as possible, given the limitations associated
with FLOSS project data discussed in Section . on page .
A preliminary list of  names was drawn up as the sampling frame
for this stage. Prospective interviewees were chosen from the list using
a purposive sampling approach that considered gender, project role (to
the extent that this could be determined), background, and observed
level and type of activity.
As with Stage a, a purposive sample was chosen because it ensured
that interviewees represented different viewpoints and experience, and
were involved in a range of roles in different projects. In addition, the
sample was chosen so that both genders were represented equally. The
criteria used to choose the sample also ensured that it included people
who were involved in different roles; in particular, the sample included
people who were developers, users, and system administrators. Section
. on page  describes the characteristics of the interviewees.
In total,  interviews were conducted, involving  people (one
interviewee chose to involve two co-workers in the interview). The
interviewees represented six different LIM FLOSS projects—at this point,
analysis of the interview data showed that theoretical saturation had
been reached, and that no significant new insights were likely to be
gained by further interviews (Bryman , p.).
The interviews used open-ended questions to gather qualitative data
focusing on types of participation, satisfaction with FLOSS software, and
the constructs included in the preliminary research model. The main
Table : Summary of project sample characteristics
characteristic value
number of
projects
Number of sites Low: fewer than  
Medium: between  and  
High: more than  
Project age Less than  years 
- years 
More than  years 
Application type Integrated library system 
Institutional repository 
Digital library 
Record manipulation utility 
Electronic resource
management 
Web portal 
Journal publishing 
Number of developers Low: - 
Medium: - 
High: More than  
Complexity Low: - data types 
Moderate: - data types 
High: more than  data types 
Activity level
Low: less than one message per
week/one release per year 
Moderate: - messages per
week/two releases per year 
High: more than  messages per
week/more than two releases
per year 

. specific techniques 
advantage of using semi-structured interviews for this stage was that all
interviewees were asked the same basic questions, but the interviewer
could probe for further elaboration, if the original answer was brief
(Bryman and Bell , p.–). The face-to-face interview guide is
included as Appendix E on page . The five questions were based on
the key components of the preliminary research model, covering:
. Interviewees’ background, including their education and skills;
. The FLOSS project they were using or contributing to;
. Interviewees’ relationship with the project, including their own
and other participants’ contributions;
. Interviewees’ satisfaction with various aspects of the project; and
. An opportunity to comment on anything else they wanted to
mention.
Since the LIM FLOSS community is global, with projects and partici-
pants based in North America, Europe, and Australasia, email was used
as the main interview communication medium, with face-to-face and
telephone interviews being done when possible. The advantage of using
an asynchronous email technique was that respondents did not need
to be in a compatible time zone, unlike synchronous techniques such
as face-to-face, phone, or chat (instant messaging). This approach also
allowed respondents to reply at their convenience (Mann and Stewart
: ). However, asynchronous email interviews also have disadvan-
tages, such as the inability to see an interviewee’s body language, and
increased difficulty in building rapport between the interviewer and the
interviewee (Bryman , p.). Data obtained from email interviews
may be more formal than that from face-to-face ones, and responses
may be more considered, since interviewees have had more time to con-
sider the questions. However, since most participants in FLOSS projects
communicate with each other using asynchronous channels such as
email, using email interviews was considered a suitable technique for
this research.
For the email interviews, the interview questions were broken into
three groups of questions, with each group sent in a separate message
over a period of – weeks. Appendix H on page  includes a copy
of this version of the interview guide. The questions were included as
part of the body of the message and interviewees answered them using
the ‘reply’ command. This approach was selected to increase people’s
willingness to participate, as it involved a smaller amount of time for
each reply than if all of the questions were sent at once in a single
message. By ensuring that the interaction took place over a longer time
period than a single interview, the email exchanges took the form of
an extended conversation, and had a degree of informality. However,
one interviewee, known to be a frequent user of instant messaging,
 methodology
asked to be interviewed using that medium rather than email, and this
interview was therefore conducted at a mutually convenient time. The
email interviews took place between  November  and  March
.
The face-to-face interviews were held between  November 
and  February . They ranged in duration from  to  minutes,
with a median of  minutes. There was a general correlation between
the length of time taken for the interview and the length of time the
interviewee had been involved with the project; overall, the greater the
interviewee’s experience with the project, the more they had to say. The
same pattern was apparent in the email interviews: people with more
experience tended to give longer answers, and were generally aware of
more aspects of the project than people who were relatively new to the
project.
All interviewees were initially invited to participate in the research
project by email, and were asked to reply if they were willing to be
interviewed. A copy of the introductory email messages are included in
Appendices B on page  and F on page .
Face-to-face and telephone interviews were recorded on a digital
recorder, and subsequently transcribed. The researcher did the tran-
scription personally, which meant that she was able to reflect on each
interview as she was transcribing it, and became more conscious of
recurring themes and patterns. A copy of the interview transcript was
sent to each interviewee as soon as possible after the interview, so that
they could check it for accuracy as recommended in Creswell and Plano
Clark (, p.).
Two interviewees made minor corrections to the transcripts of their
interviews, primarily to names of projects and people. One interviewee
sent a lengthy response, expanding the answers to some questions, and
providing more background detail to explain the initial responses. This
interviewee provided brief answers during the interview, and had did
not responded to further probing about during the interview. She may
have been more comfortable providing the additional detail in an asyn-
chronous mode, rather than in the face-to-face context of an interview.
These additional data were incorporated into the transcript before it
was analysed, following the practice outlined in Pickard (, p.).
The email and single instant messaging interviews had the advantage of
being ‘self-transcribing’, and therefore email interviewees were just sent
a final ‘thank you’ message.
.. Stage : Quantitative survey
The second stage of the research involved developing and administering
a quantitative, web-based survey to test the model and hypotheses.
. specific techniques 
Quantitative methods are best suited for collecting measurements for
statistical testing (Bryman , p.).
This type of data was needed to test the model and hypotheses, and
provide an answer to the primary research question, What factors influ-
ence participant satisfaction with a free/libre and open source application
software project? These data were also used to answer the second sub-
question Do the factors that influence satisfaction vary for different types of
participation? If so, in what way?
A self-completion web-based survey was chosen as the most appro-
priate method of reaching the target population for this stage of the
research, since potential respondents could be located anywhere in the
world. Other advantages of web-based surveys are that they are low
cost, since they do not involve printing or postage costs, and they save
time (Yun and Trumbo ). In addition, they reduce coding errors,
since respondents are in effect coding the data themselves when they
choose responses from a pre-defined list (Umbach ). Finally, it is
possible to reach a wider population of potential respondents with a
web-based survey, since invitations to complete it can be sent to email
discussion lists as well as to individual email addresses. This approach
is particularly suitable when it is difficult to develop a complete sam-
pling frame for the target population. This was the case for this research,
since FLOSS users are not required to register in order to download and
install the software, meaning that it was not possible to develop a list
of all participants in the selected projects. The drawbacks of web-based
surveys include coverage error, measurement error, and non-response
error (Umbach , p.).
Coverage error occurs when the sample is not representative of the tar-
get population; this generally occurs when email addresses are missing
or out-of-date, causing some members of the population to be omitted
from the sample frame. To minimise coverage error, the invitation to
complete the web-based survey for this research was sent to email dis-
cussion lists, rather than individuals, since most people keep their email
discussion list subscription addresses up-to-date.
Measurement error occurs when respondents choose an inaccurate
response that does not reflect their opinion. It can happen when response
options are inappropriate or confusing, or when the appearance of the
survey changes due to the use of a different operating system or web
browser (Umbach , p.). Development of the survey, discussed in
more detail in Section .. on the following page, followed Umbach’s
recommendations to minimise measurement error; in particular, it used
radio buttons that allowed only a single response when appropriate,
and the researcher tested the survey instrument on multiple operating
systems and Web browsers.
Non-response errors occur when the people who respond to a survey
are not representative of the total population, introducing bias in the
survey results. Umbach says that non-response bias is a particular prob-
 methodology
lem when potential respondents have different levels of technical ability
or varying levels of access to the Web (, p.). Since all FLOSS
projects are web-based and their participants use web-based tools to
communicate with each other, this concern does not apply to the target
population.
Because the potential respondents could be based in different coun-
tries, using a structured interview, where the researcher administers the
survey instrument and records the responses, was considered impracti-
cal. This approach was also likely to limit the number of respondents,
since it would require them to be in a compatible time zone due to the
synchronous nature of this technique.
Other research methods that provide data suitable for hypothesis test-
ing, such as conducting a laboratory or field experiment, were not appro-
priate for the proposed research. In discussing experimental research,
Bryman says “manipulation, then, entails intervening in a situation to
determine which of two or more things happens to people” (, p.);
it would be impractical, and also unethical, to artificially manipulate
characteristics of free/open source software projects to measure changes
in participants’ satisfaction.
Stage a: Developing the survey instrument
The results of Stage  were used to review the conceptual model and de-
velop a web-based survey to test it. Where possible, existing scales were
used or modified for the model’s constructs, since these were known
to have appropriate reliability and validity. New scales were developed
for the product and process openness constructs, since these had not
been previously used in empirical research. Extent of participation was
measured in two ways, first by asking respondents what their current
role in the project was, and second by asking them to identify specific
activities they had carried out as part of their participation.
The survey was created using NSurvey software (version ...)
hosted on a School of Information Management server. This software
was released under the GNU General Public License version ., which
meant that it qualified as FLOSS, a characteristic that was expected
to be very important to some potential respondents, and therefore in-
fluence their willingness to complete the survey. By choosing survey
software that met the FLOSS definition, the researcher showed that she
respected the beliefs of potential respondents who shared Stallman’s
view that software licensing had an ethical component. Failing to do
this could have meant that these people would not complete the survey
on principle, introducing non-response bias.
The survey design followed the best practices for a web-based survey
outlined by Umbach (). It was designed as a single, scrollable page,
to ensure that respondents could read through the complete survey
before beginning it, to minimise non-response bias. The survey did not
. specific techniques 
capture information identifying respondent’s IP addresses, use cookies
to record visits, or include a counter that measured visits, since Umbach
said that all of these can cause people to refuse to complete a survey, and
therefore increase non-response bias. To minimise measurement error,
it used pre-coded radio buttons allowing only a single response, where
possible. Umbach recommended avoiding drop down boxes, which in-
crease the length of time required to complete a survey. The survey
included only one drop down box, for country of residence. All ques-
tions were optional. Though this had the potential to reduce the overall
quality of the data, since respondents could omit a significant number
of questions, forcing them to answer questions would also have had
consequences. First, it may have made people reluctant to complete the
survey, thereby increasing the number of non-responses. Secondly, it
could have caused them to choose inappropriate responses, resulting in
measurement error (Umbach ).
The researcher tested the survey on computers running Mac OS X and
Windows XP, using the Safari (Mac OS), Internet Explorer (Windows
XP), and Firefox (both platforms) web browsers, to ensure that there
were no significant differences in the way the survey appeared. Finally,
the survey was kept short, so that most respondents could expect to
complete it in  to  minutes, which was slightly longer than Porter’s
recommendation of  minutes as the optimal maximum length for a
survey ().
A copy of the final version of the survey is included as Appendix K on
page . As noted above, existing measures were used for the various
constructs, with minor changes to wording to make them suitable for
the research context.
The first section of the survey asked for information about the re-
spondent’s background, including demographic information about age
(Q), gender (Q), highest educational qualification (Q), and country
of residence (Q). This section also included questions about the length
of time the respondent had been using a computer, measured in years
(Q), and their self-assessed level of knowledge and skills in a number
of areas (Q), using a rating scale ranging from ‘minimal’ to ‘extensive’.
The next section of the survey asked about participant’s attitude
toward and use of free/open source software, at work and/or at home.
By including home use of FLOSS, the survey design acknowledged that
their employer’s policy might restrict their ability to use FLOSS at work,
but it allowed respondents to express a preference in a situation where
they would have more control over the decision.
The third section asked respondents to choose one library or infor-
mation management free/open source software project they used or
were involved with in some way. If they were involved with more than
one project, they were asked to choose the one that they had used or
contributed to most recently. The questions in this section asked them
to:
 methodology
• name the project (Q),
• say how long they had been using or contributing to the project
(Q),
• name their current role (Q),
• identify other roles they had held in the project (Q),
• indicate how much time they had spent per week working with
or contributing to the project in the last six months, on average
(Q),
• indicate how much of this time had been part of their paid em-
ployment (Q),
• indicate which activities they had carried out with the software
(Q and ),
• identify training they had received that related to their use of the
software (Q and ),
• indicate their satisfaction with various aspects of the project (Q),
• compare the extent of their experience of using the software rela-
tive to their perception of other people involved with the project
(Q),
• indicate their views on the developers’ communication styles
(Q),
• indicate their perceptions of the project’s culture (Q)
• indicate the amount of influence they have had on the software,
either locally or on the shared version (Q and )
• assess the complexity of the software and the work they do with it
(Q).
The final question was open ended, and gave respondents an oppor-
tunity to make further comments on the project, or reasons for their
satisfaction or dissatisfaction with it.
Stage b: Pilot study
The survey instrument was tested with a pilot study involving six respon-
dents selected from non-LIM FLOSS projects. Hair, Babin, Money, and
Samouel, () recommended that a pilot study could involve as few as
four people if most questions had been previously validated, which was
the case for this research, since many of the scales were adapted from
previous research. The main purpose of the pilot study was to improve
the survey’s format, questions, and scales, and to determine how long it
was likely to take respondents to complete it. Pilot study respondents
. specific techniques 
were asked to complete the survey and comment on its length, wording,
and structure. Only question  generated feedback from more than one
person. It was reworded and rechecked with the people who commented
on it until they reported that its meaning was clear.
Since feedback from the pilot study related to just one question, and
most of the questions were based on previously used questions, it was
decided not to undertake a formal pretest. In their discussion of the
use of pretests, Presser et al. () said “we have much better tools
for diagnosing questionnaire problems than fixing them” and report
that after using three different methods to pretest  questions, and
subsequently revising  of them, “the revised questions generally did
not appear to outperform the original version” (p. ). In other words,
while pretesting is good at identifying questions that may pose problems
for respondents, it does not lead to any improvement in the questions
themselves. This supports the decision to rely solely on the responses
from the pilot study, which provided consistent feedback.
Stage c: Web-based survey
The last data collection stage consisted of a self-administered web-based
survey to gather quantitative data to test the model and hypotheses. A
copy of the survey is included as Appendix K on page .
population and sample As discussed in Section .. on page ,
the research selected participants in LIM FLOSS projects as its popu-
lation. The technique of harvesting individual email addresses from
email discussion list messages in order to issue individual invitations
to participate, which has been used in previous FLOSS survey research
(see Sagers  for an example), was considered, but rejected because it
would result in a bias toward active project participants. Neilsen ()
claimed that roughly % of participants in most virtual communities
are lurkers, spending their time observing rather than interacting with
other community members. Therefore the approach of issuing an open
invitation to complete the survey was chosen, because it was better
suited to the proposed research, which sought responses representing
different types of participation. This approach assumes that people who
have voluntarily joined an email discussion list do so because they have
an interest in the project, but their presence on the list does not imply
that they all have similar roles or involvement with the projects. In most
cases this group is likely to include the project’s initiator/owner, its core
developers, and regular users of the software, as well as other interested
parties.
In order to attract respondents who were involved with different
projects, an invitation to complete the survey was sent to the email
discussion lists for three active FLOSS library projects, the Open Source
for Libraries email list, and the CodeLib email list. The text of the
 methodology
invitation email message is included in Appendix J. Once the initial
invitation was ‘out in the wild’, it was more widely disseminated by
third parties who had an interest in the research topic. After receiving
the initial invitations, several people offered to repost it to other relevant
email lists, including another library FLOSS project-related list, and a
list for Indian librarians with an interest in technology. In addition, a
number of library-related bloggers posted the invitation on their blogs,
including Michael Stephens’ Tame the Web, Nicole Engard’s What I
Learned Today, and Meredith Farkas’s Information Wants to be Free.
This publicised the survey to a range of communities, and potential
respondents representing a variety of backgrounds, projects, and nation-
alities. The survey was available from  October  through to 
November .
The main advantages of this approach were that the survey was simple
to administer, and respondents could complete it at their convenience.
The disadvantages were that it was not possible to control who answered
it, and the respondents were likely to be people who are interested in
the topic of the research, which could bias the results.
The target number of responses was determined by the number of
constructs in the model. Green’s rules of thumb () were used to
estimate this number. To use multiple regression with a model having
N predictors, the minimum sample size is 50+ (8 ∗N); based on the
research model, this meant a minimum of  usable responses. For
testing the relationships of the individual predictor variables to the
outcome variable, the minimum sample size is 104+N, which is .
Since the research is intended to test both of these, the larger value ()
applied.
. ethical considerations
Both stages of the research involved human subjects, and ethical permis-
sion was required from the School of Information Management Human
Ethics Committee. Separate applications were submitted for Stages b
and c, and are included as Appendices A on page  and I on page .
In Stage b, potential interviewees were initially invited to participate
in the research by phone or email, depending on their location. If they
indicated that they were interested in being interviewed, they were sent
a copy of the project information sheet. Face-to-face interviewees were
also asked to sign a consent form, while the phone, email, and IM inter-
viewees were asked to indicate that they were aware of the conditions
for the research, which were posted on a web page. The URL for this
page was included in all of the email messages sent to interviewees, to
ensure that they remained aware of the conditions during the interviews.
Copies of these documents are included as Appendices B on page 
through G on page . Interviewees were told that their identity would
. data analysis 
be kept confidential, and that the thesis and any publications result-
ing from the research would not include any information that would
identify them.
Respondents to the web-based survey in Stage c viewed an electronic
version of the information sheet at the beginning of the survey. The
survey was designed to be anonymous, and no data that would identify
individuals were collected.
A consequence of these guarantees for privacy is that this thesis does
not associate individuals with specific projects, and the projects with
which the interviewees were involved are not named, to prevent people
familiar with the projects from speculating about who the interviewees
were. Since the purpose of the research is not to measure respondents’
satisfaction with specific projects, but rather to develop and test theory
about general factors affecting this, naming individual FLOSS projects
is unnecessary.
. data analysis
Both phases of Stage  gathered qualitative data, and content analysis
was used to identify themes and patterns. For the preliminary analysis,
manual coding was used to identify key phrases in the interview tran-
scripts for each of the main constructs, such as educational background,
activities, roles, and satisfaction. A photograph of some of these working
documents is included as Appendix L on page .
This stage of the research had a relatively narrow focus, first to iden-
tify types of participation, in order to answer the first research sub-
question, What types of contributions do participants make to free/libre and
open source software projects?; and second to validate the preliminary
conceptual model presented in Section . on page . Using qualitative
analysis software such as NVIVO was considered for the analysis, but re-
jected in favour of traditional manual coding and categorisation. Pickard
noted that this type of software is best suited for large-scale, complex
qualitative projects, because of the time required to learn to use the soft-
ware effectively (, p.). In addition, she said that the researcher
still needs to do the coding, analysis, and categorisation, whether or not
analysis software is used. Since the number of interviews was relatively
small, and the purpose of this stage of the research was clearly defined,
manual coding was considered to be the better approach.
.. Stage a: Development of participation construct
Specific types of contributions to FLOSS projects were identified by
reading individual postings to selected email discussion lists, and from
project web sites. These were listed in an OpenOffice Calc spreadsheet,
and then assigned to categories based on the general purpose/object of
 methodology
Figure : Stage b analysis flow diagram
the activity (such as code, community, resource). In addition, a list of
project roles was developed from the small number of projects that had a
more formal organisation structure. Sample pages from the spreadsheets
are included as Appendices L on page  through N on page .
.. Stage b: Validation of preliminary model and the participation
construct
The data from the interviews were analysed using the approach outlined
in Bryman (). Transcripts from the synchronous interviews and
the text of the email and IM interviews were first read through several
times, in order to gain an overall impression of the main points made
by the interviewee. They were then analysed question by question. Each
response was first coded to identify roles and activities; these were then
compared to the lists of roles and activities developed from the Stage a
data analysis. Once all the transcripts had been coded, a master list of
project activities was prepared in an OpenOffice Calc spreadsheet, and
the activities were then grouped by broad theme. Figure  on this page
illustrates the process.
The main goal of this stage of the analysis was to identify themes
that were discrete with minimum overlap, so that each activity could be
clearly placed in a single main theme. A similar approach was taken to
identify key project roles. To confirm that the themes were as complete
as possible, once the main themes were identified, a new project, out-
side the original sample, was observed independently, and its activities
classified by theme. No gaps were identified, though the distribution of
activities in this project followed a different pattern.
. data analysis 
The next stage of the qualitative analysis focused on satisfaction
with the FLOSS project, and again the transcripts were read through
several times before this aspect was coded. This part of the analysis also
involved looking for patterns in responses, and comparing responses
from different interviewees, in order to test the preliminary model and
identify any gaps.
Once this analysis was complete, the research model was reviewed to
take into account the new insights gained from this stage of the research,
and the results used to design the quantitative survey used in Stage c.
The results of this review are discussed in Section . on page .
.. Stage : Quantitative survey
Data were exported from NSurvey in XML format. Using a combination
of XSLT and a simple PHP program, the XML file was converted to a
comma-delimited format; this was imported into OpenOffice Calc and
the resulting file was then transferred to PASW (formerly SPSS) version
 for further analysis.
The initial approach to analysing the survey data used descriptive
statistics (frequency and per cent) for the ordinal and nominal data, and
content analysis for the free text questions. Appendix Q on page  lists
each question in the survey, its description, the measurement scale used,
and the initial analysis technique. The following section summarises the
way each construct was measured.
Construct measurement
When they were available, existing scales from previous research were
used to measure each construct, since their reliability and validity had
already been determined. Minor changes were made to the wording to
suit the context of this study.
Each construct in the research model was measured using multiple
indicators. Bryman (, p.) identified three reasons for this. First,
using more than one measure increases the reliability of the data, since a
single indicator might involve considerable measurement error. Second,
using only one question may not adequately represent the construct
being measured, or may be too general. Finally, using more than one
measure allows finer distinctions to be made between respondents, since
more combinations of responses are possible. The response scales in the
survey followed Hinkin’s  recommendation to offer five Likert-type
options, since scales with more items have not been shown to result in
increased reliability.
Strictly speaking, the data from Likert-type scales are ordinal, which
restricts the types of statistical tests that can be used with them. How-
ever, Bryman and Cramer said that it is now common practice to treat
multiple-item Likert-scales as interval, since the resulting values are not
 methodology
restricted to a small number of categories (, p. ). This research
followed their recommendation and treated the summary data that was
derived from the multiple item scales as interval.
The following section lists each construct in the order it appeared in
the survey instrument, and identifies the main changes that were made
to existing measurement scales.
participant knowledge and skills (question ) This scale
was based on Torkzadeh and Lee’s  scale, adapted for a FLOSS
context. It consisted of eight of the original  items, omitting the items
that related to designing screens, output formats, and using mainframes.
Torkzadeh and Lee found that the scale had a Cronbach’s alpha of ..
Hulin, Netemeyer, and Cudeck () suggested that such high values of
alpha may occur when the number of items in the scale is very high, or
when there are items that are too similar in meaning. Though they did
not specify an absolute cut-off value, they recommended using common-
sense in reviewing scale items if they result in a high value of alpha,
which is what was planned for this scale.
extent of participation (questions  and ) This was de-
veloped for this research, since existing scales to measure participation,
such as the one in Guimaraes, Staples, and McKeen (), assumed
that system development followed a structured process. This is not nec-
essarily the case for a FLOSS project, where the development process
has been characterised as a “bazaar” model (Raymond, ). This scale
was based on the most common activities identified by the participants
in the Stage  interviews. It consisted of  items, covering both user
and developer activities, with a dichotomous (Y/N) response scale. An
open-ended question was included to give survey respondents an op-
portunity to add any other types of contributions they had made to the
project.
participant training (questions  and ) This was based
on Nelson and Cheney’s  proposal, which was used by Guimaraes,
Staples, and McKeen (). They found that the scale had a Cronbach’s
alpha of .. This research used four of Guimaraes, Staples, and McK-
een’s five items, omitting the item relating to in-house company courses,
which was not considered relevant to the present study. Since train-
ing has not been studied extensively in the context of FLOSS project
participants, an open-ended question was also included to give survey
respondents an opportunity to indicate any other types of training they
felt were important.
participant satisfaction (question ) This question asked
respondents to assess their satisfaction with  characteristics of a
FLOSS project that the Stage b interviewees identified as important, us-
. data analysis 
ing a measurement scale ranging from ‘not at all satisfied’ to ‘completely
satisfied’. The wording of this measurement scale was chosen to min-
imise positivity response bias, since early satisfaction research showed
that a more normal distribution of responses occurred when all options
included the term ‘satisfied’, using qualifiers like ‘not’ or ‘somewhat’
(University of Minnesota, Department of Psychology ). In contrast,
using a scale from ‘Very dissatisfied’ to ‘Very satisfied’ resulted in a
strong bias to the upper end of the scale, with most responses between
‘Satisfied’ and ‘Very satisfied’. Since one of the assumptions of multiple
regression is that the predictor variables are unconstrained, this type of
positivity bias would have been a problem (Field , p.).
participant experience (question ) This scale consisted of
four items that asked respondents to rate their experience relative to
their peers, adapted from Guimaraes, Staples, and McKeen (). They
found that the scale had a Cronbach’s alpha of .. The measurement
scale ranged from ‘Considerably less than most’ to ‘Significantly more
than most’.
developer communication quality (question ) This scale
was based on the Communicator Competence scale originally developed
by Monge, Buckman, Dillard, and Eisenberg (). It used nine of
the original items, omitting the ones involving listening and speaking,
which were not considered to be relevant to the virtual context of a
FLOSS project. Guimaraes, Staples, and McKeen () also used this
scale, finding that it had a Cronbach’s alpha of .. Hulin, Netemeyer,
and Cudek’s () cautions were also planned for this scale, if its alpha
was found to be this high. The measurement scale ranged from ‘Strongly
disagree’ to ‘Strongly agree’. Participants could also choose an ‘n/a’
option.
process and product openness (question ) These scales
were developed for the current study. Process openness was measured
using five items, while Product openness involved four. The measure-
ment scale ranged from ‘Strongly disagree’ to ‘Strongly agree’. One item
was reverse coded, meaning that a low score on the scale indicated a
more open process and vice versa.
perceived influence (questions  and ) Previous studies
of the relationship between influence and satisfaction have been done in
the context of in-house software development, and so the scale used was
not appropriate for a FLOSS context. This construct was measured with
two questions, asking participants about the extent of their influence
locally, and on the overall project.
 methodology
software and task complexity (question ) This research
adapted Tait and Vessey’s  scale for system complexity for a FLOSS
context. It consisted of two items asking about the complexity of the
software requirements and design. Tait and Vessey found that the scale
had a Cronbach’s alpha of ., and McKeen, Staples, and Wetherbe
(), who also used the scale, found that it had a Cronbach’s alpha of
. . Task complexity was measured with three items from Rizzo, House,
and Lirtzman’s  scale, which was first published in . In their
 study, McKeen, Staples, and Wetherbe found that this scale had a
Cronbach’s alpha of ..
Specific techniques
operating system use Data entered as free text in questions  and
 were initially analysed using content analysis, in order to identify
suitable categories for further analysis. In particular, names of specific
versions of operating systems were translated to six new dichotomous
variables to show whether the respondent used Windows, Mac OS,
and GNU/Linux (for work use and for personal use); similarly, two
new variables were set up to identify the total number of operating
systems used by the respondent, coded as one (), two (), or more than
two (). Finally, two more new variables were created to categorise the
respondent’s work and personal operating system use as ‘proprietary
only’ (), ‘FLOSS only’ (), or ‘mixed’ ().
participant role Questions  and  related to respondent’s cur-
rent and previous roles in the project. Because there were many possible
variations in roles between different projects, these were both free-text
fields to allow respondents to enter a term that was meaningful to them,
rather than using predefined roles that would limit their responses to
the researcher’s perspective. The values entered by respondents were
listed and compared, and two new variables were set up to categorise
respondents as ‘Developers/Non-developers’ and ‘Users/Non-users’.
Respondents were assigned to the ‘Developer’ category if their current
or previous role included working with source code, and to the ‘User’
category if they identified a role that indicated they were a user of the
software. Examples of roles assigned to ‘Developer’ included developer,
maintainer, and interface designer. Examples of roles assigned to the
‘User’ category included user, project manager, and trainer.
construct reliability The guidelines provided by de Vaus (),
Bryman (), and Field () were used to assess the reliability of
each measurement scale. Table  on the next page shows the initial
approach to measuring the constructs in the research model.
The internal reliability for all constructs except Extent of participa-
tion and Influence was tested using Cronbach’s alpha, a widely-used
. data analysis 
Table : Construct composition
construct question(s)
no. of
items range
calculated
as
Skills and
Knowledge   – Mean
Extent of
participation   – Count of ‘Yes’
Training   – Mean
Satisfaction   – Mean
Experience   – Mean
Developer
communication   – Mean
Project openness  a–e  – Mean
Product openness  f–g  – Mean
Influence /  – Maximum
Software
complexity a–b  – Mean
Task complexity c–e  – Mean
statistical technique for assessing the degree of correlation between re-
sponses to a set of questions. This technique could not be used for Extent
of participation and Influence, because of the way these constructs were
measured. Extent of participation was measured as the total of the ‘yes’
responses for  different activities, and Influence was measured as the
maximum of respondents’ answers to questions  and .
The measurement of a construct was considered to have adequate
reliability if the value of alpha was . or higher (Bryman , p.).
The first step involved using the PASW Scale Reliability function, which
calculates Cronbach’s alpha and item–total correlations for a set of
items, and also indicates what value alpha would have if each item was
removed from the scale. When this indicated that alpha would increase
significantly, the item indicated was considered for removal from the
scale. In addition, the item–total correlation was checked to ensure that
all values were higher than . (Field , p.). Correlations less
than . indicate that the item does not correlate well with the other
items in the scale, and may measure a different underlying construct.
Hulin, Netemeyer, and Cudeck () suggest that very high values of
alpha may occur when the number of items in the scale is very high, or
when there are items that are too similar in meaning.
Once the reliability of the preliminary constructs had been tested,
factor analysis was used to confirm that the items making up each con-
struct mapped to the expected single factors. Items which did not load as
 methodology
expected were dropped from the construct, and alpha was recalculated
for the revised construct.
Once the components of each construct were confirmed, the arith-
metic mean of the questions relating to each construct was calculated
for each respondent and used in subsequent calculations. The mean was
used rather than the total so that missing data did not skew the results.
While there are other approaches to dealing with missing data, such
as deleting cases or imputing values based on sample or group means
(de Vaus , p.), using the mean is a standard approach when con-
structs are measured with more than one item, since it automatically
adjusts the scores based on the number of valid answers (de Vaus ,
p.).
model testing The theoretical model being tested in this research
has a single outcome variable and multiple predictor variables, which
means that hierarchical multiple regression was the most appropriate
statistical technique for testing the model (Hair, Black, Babin, Ander-
son, and Tatham , p.). This approach tests the extent to which
the predictor variables contribute to the variance (R2) in the outcome
variable.
Correlations were first calculated between each of the predictor vari-
ables and the outcome variable. Pearson’s r was used to measure the
correlation between pairs of variables.
Stepwise hierarchical regression was used to allow the order of the
predictor variables to be specified; the variables were selected based on
the amount of variance they explained, starting with the variable that
resulted in the highest value of R2. A regression coefficient indicates
how much effect one variable has on another (de Vaus , p.). It
can be expressed using the formula Y = a+bX, where X is the predictor
variable, Y is the outcome variable, a a constant, and b the slope of the
regression line. Where there is more than one predictor variable, the
equation takes the form Y = a+b1X1 +b2X2 +b3X3 etc. The value of
bi indicates direction and degree of influence the predictor variable Xi
has on the outcome variable Y, and it reflects the underlying units used
to measure the predictor variables. The beta (β) value, which represents
a standardised coefficient calculated in standard deviation units, is
more useful for comparing the amount of influence different predictor
variables have on the outcome variable (de Vaus , p.). The main
advantage of the stepwise approach to multiple regression is that it
results in a parsimonious model, including the smallest number of
predictor variables needed to explain the maximum variance in the
outcome variable (Hair et al. , p.).
Moderated regression analysis was used to test the effects of the hy-
pothesised moderator variables; the calculations involved are discussed
in Section .. on page .
. data analysis 
statistical significance The results of the regression analysis
were considered in terms of their statistical significance. Statistical
significance is the likelihood that the results represent a real effect in
the sample, rather than occurring due to chance (Field , p.). By
setting a predefined level at which the results are considered to be
significant, researchers seek to minimise false positives, or Type I errors.
Type I errors occur when the effect is not present in the population, but
the results suggest that it is. The standard technique for minimising the
occurrence of false positives is to set a high confidence level (usually
%) before saying that the results are statistically significant (Field
, p.). This means that there is a . probability that the results
will occur by chance. This research set its confidence level at % (p=.)
when discussing the results of the statistical tests. Only results that had
a . probability, or lower, were reported as significant. However, this
threshold does not eliminate the possibility of false negative, or Type II
results, since some effects might be present in the sample, but at a level
too low to be detected.
In order to minimise the possibility of missing small effects, a power
analysis was conducted. This is a statistical technique that assesses
whether the sample size is large enough to avoid false negatives (de
Vaus , p.). The magnitude of the effect size, which is the amount
of variance explained by the model, is important in a power analysis,
because larger samples are needed to detect small effects. In contrast,
a large effect may be detected using a small sample (Field , p. ).
Statistical power ranges from  to ; Field recommends a minimum
power level of . in order to be confident that a result minimises the
probability of false negatives as well as false positives (, p.). The
most common approach to determining the statistical power of a sample
is to use a standard table showing the sample sizes needed for different
effect sizes at a range of confidence and power levels. Ellis provided a
table showing that at a power level of ., the minimum sample size is
, to detect an effect size of ., but only  for an effect size of ..
He also noted that the minimum effect size that could be detected with
a sample size of  was ., but this value dropped to . with a sample
size of  (, p.). If the likely effect size is known in advance,
then it is possible to determine the minimum sample size needed to be
confident it will be detected. However, the conceptual model for this
research is new, and has not been previously tested with empirical data.
This means that it was not possible to estimate the effect size in advance,
in order to determine the sample size required for a power level of ..
Therefore a retrospective power analysis was conducted once the value
R2 had been determined, based on the tables in Ellis (, p., ),
since in multiple regression, the effect size is the value of R2.
 methodology
. reliability
Reliability is defined as the extent to which research results are consis-
tent and free from measurement error or noise (Ruane , p.-).
Different techniques are used to determine reliability in qualitative
research and quantitative research. In qualitative research, internal re-
liability relates to the extent to which members of a research project
agree about the meaning of the data, while in quantitative research,
internal reliability relates to the extent to which the measurement items
are consistent with each other (Bryman and Bell , p., p.).
Because of this, the two stages of this project used different techniques
to ensure that their results are reliable.
In the first, qualitative stage, the main technique used to increase the
reliability of the results included reviewing documents and interviewing
participants from a range of projects, and then comparing the results
of the analysis to ensure that they applied to more than one project.
In addition, the researcher made an effort to get to know members
of the local free/open source community, and attended local Software
Freedom Day activities. Gorman and Clayton () referred to this as
“immersion in the context” (, p.) and said that it offers researchers
opportunities to observe phenomena at different times and in different
places. This helped establish reliability by providing an alternative
perspective on the data, as the researcher gained familiarity with the
wider context of the research.
In Stage , the internal reliability of the measures was calculated
using Cronbach’s alpha, as discussed in .. on page . Scales that
were significantly below the recommended threshold value of . were
dropped from the analysis.
. validity
Validity is defined as the extent to which the research measures what it
claims to measure (Bryman and Bell , p.). In qualitative research,
Lincoln and Guba recommended credibility as one way of determining
the validity of qualitative research (, p.). Credibility is achieved
by using multiple accounts of the phenomenon being studied, comple-
mented by respondent validation and triangulation (Bryman and Bell
, p.). Respondent validation involves providing people who
have provided qualitative data with the preliminary research findings,
to see if there is a match between the findings and the participants’
perspectives. Triangulation involves gathering different types of data
about the phenomenon being studied, and comparing the results of the
analysis. In quantitative research, validity includes face validity, and
construct validity (Bryman and Bell , p.). Face validity mea-
sures the extent to which the meaning of the construct is reflected in
. validity 
the measures, and is essentially a subjective judgement (Ruane ,
p.). Construct validity is measured by determining the extent to which
the construct has the expected relationships with other variables. One
technique used to determine this is factor analysis.
Factor analysis is a statistical technique that analyses correlations
between items to identify communalities between items, which de Vaus
defined as the variance they have in common (, p.). Hair, Black,
Babin, Anderson, and Tatham said that factor analysis helps define
the “underlying structure among the variables” (, p.), and they
noted that it helps identify which items are can be combined for use in
subsequent multivariate analyses. Specifically, factor analysis tests the
individual items for convergent validity, and the constructs for discrim-
inant validity. Hair et al. define convergent validity as “the degree to
which to measures of the same concept are correlated” (, p.).
If the items for a construct exhibit convergent validity, they will be
grouped together in the factor analysis. Discriminant validity tests the
amount of correlation between different factors, which should be low
(Hair et al. , p.). High correlations between different factors
suggest that the factors overlap, and may not be clearly defined.
As with reliability, the two stages of this project used different tech-
niques to establish the validity of the results.
Stage  used a combination of document review for selected projects
and semi-structured interviews. This provided a form of triangulation,
which allowed the results of the document review to be compared with
the results of the interviews. Bryman notes that this combination can
increase researchers’ confidence in their findings (, p.). In ad-
dition, having the face-to-face interviewees review the transcripts of
their interviews provided a form of respondent validation, which Bry-
man says can ensure that they were recorded accurately (, p.),
and increase the creditability of the research. In addition, the prelim-
inary findings of this stage were discussed with members of the local
FLOSS community, in order to confirm that the results matched their
perceptions and experience.
In the second, quantitative stage, the first technique used to establish
face validity was the use of established scales, where these were avail-
able. In addition, factor analysis was used to check that individual items
mapped to their expected scales. The results of the factor analysis were
used to confirm which items could be grouped as variables in order to
test the research model in the subsequent stepwise hierarchical regres-
sion analysis. Items that did not exhibit sufficient convergent validity
were dropped from the analysis, and the extent of correlation between
factors was checked to ensure that all values were low to moderate.
 methodology
. summary
This chapter described the research design, beginning with its philosoph-
ical paradigm. The research took a postpositivist, objectivist paradigm,
treating knowledge as being objective and measurable. The research
design involved a sequential, mixed methods approach, using an initial
qualitative stage to develop the participation construct and validate the
proposed research model. Victoria University of Wellington’s policy for
ethical approval for research involving human subjects was followed,
and participants in the first stage were assured that their identity would
be kept confidential. The second, quantitative stage did not collect any
information that could be used to identify respondents. The online sur-
vey was designed following ‘best practice’ guidelines, and used existing
measurement scales whenever possible, modifying them to fit the FLOSS
context of the research where necessary. The reliability and validity of
the data were tested in multiple ways, to ensure that the results of the
research are as sound as possible.
4
P R O J E C T, I N T E RV I E W E E , A N D R E S P O N D E N T
D E M O G R A P H I C S
This chapter summarises the characteristics of the projects selected
for document review in Stage a, the interviewees in Stage b, and
the people who completed the Stage c web-based survey. Overall the
results show that LIM FLOSS projects cover the full range of project
characteristics, that most projects are international, and that people
from a range of backgrounds participate in them.
. stage a: document review for selected projects
This section describes the  projects selected for ongoing document
review. It begins with a description of each project, including its name,
purpose, and history.
Section .. on page  discussed the purposive sampling technique
used in this stage of the research. The projects were chosen to be repre-
sentative of the range of FLOSS applications available in the LIM field,
using as selection criteria:
• the number of installed sites;
• project age;
• the application type;
• the number of developers;
• the project’s complexity, and
• its activity level.
The number of installed sites was determined using several techniques,
depending on the project. Some project web sites included a page listing
known users of the software. In other cases, a harvesting site such as
OpenDOAR (http://www.opendoar.org/) provided statistics about the
number of known users of different institutional repository software
packages. In a small number of cases, little information was about
the user base was available, and the locations of people posting to the
project’s email discussion list and/or discussion forum were used as a
surrogate for the number of users.
The project age was determined by examining the source code archives
for the earliest release date for the software.
 OpenDOAR is an acronym for the Directory of Open Access Repositories, a directory of
academic open access repositories.

 project, interviewee, and respondent demographics
The application type was determined from the description of the
project’s functionality, available on its website.
The number of developers was established by examining the source
code archives for contributions by different people.
The complexity was estimated by identifying the number of data and
transaction types supported by the software.
Finally, the activity level was determined by reviewing archives of the
project’s email discussion list and/or discussion forum to determine
the average number of messages sent each week, as well as tracking the
number of releases of the software in the last five years.
Overall the typical FLOSS LIM project was found to have a low num-
ber of installations, a medium number of developers, but moderate to
high complexity. Because of the purposive approach to choosing the
sample, it represented a cross-section of combinations, giving a broad
perspective on the way the projects developed and the way participants
interacted. Table  on the next page summarises the characteristics of
each project.
.. Greenstone
The Greenstone project is one of the earliest FLOSS projects available
for the LIM field. It began as a research project in the Department of
Computer Science at the University of Waikato, and was first released
under the GPL in the late s. Greenstone is usually described as
digital library software, and its main purpose is to provide web-based
or CD-ROM access to a collection of digital documents. UNESCO and
the Human Info NGO, a humanitarian organisation that provides in-
formation, data processing and dissemination services, cooperate with
the Greenstone Digital Library Project in its development and distri-
bution. A detailed description of Greenstone’s purpose, history, and
development is available in Witten, Boddie, Bainbridge, and MacNab
() and Witten and Bainbridge (). The project’s web site is
http://www.greenstone.org/.
.. EPrints
The first version of EPrints was released in late . The project was
initiated by Stevan Harnad, an early proponent of the open access move-
ment to make scholarly and academic research more widely available.
EPrints functionality is designed to support institutional archiving of
research papers, and make them available on the Web. The software
also exposes the metadata for the items in the repository to search en-
gines such as Google. The School of Electronics and Computer Science,
University of Southampton, develops EPrints. Millington and Nixon
Table : Stage a Project Characteristics
no. of
sitesa
project
age
type no. of
devel-
opersb
complexitycactivity
leveld
 High More than
 years
Digital library Medium Moderate High
 Medium - years Institutional
repository
Medium Moderate Moderate
 High - years Integrated library
system
High High High
 Low Less than
 years
Integrated library
system
Medium High Moderate
 Low - years Record
manipulation
utility
Low Low Low
 Low More than
 years
Web portal Low Moderate Low
 Medium - years Integrated library
system
Low High Low
 Medium More than
 years
Electronic
resource
management
Low Moderate Moderate
 Medium - years Institutional
repository
Medium Moderate Moderate
 High - years Journal
publishing
Medium High Moderate
a No. of sites: Based on the number of installed sites that could be identified
as using the software. Low=fewer than ; Medium=between  and ;
High=over 
b Number of developers: Determined from the available source code. Low=-;
Medium=-; High=More than 
c Complexity: A categorisation based on principles derived from function point
analysis (Albrect and Gaffney ), which involved the number of data types
handled by the software, and the associated number of different transaction
types available to its users. As a rule, each different type of data defined for the
software requires some special processing, so systems that handle many different
types of data tend to have more transaction types as well. Low=- data types
and associated transactions; Medium=- data types; High=more than  data
types.
d Activity level: A categorisation based on the release frequency and the number of
postings to the project’s main email discussion list. Low=less than one message
per week, and no more than one release per year; Moderate=- messages per
week, and no more than two releases per year; High=more then  messages per
week, and more than two releases per year.

 project, interviewee, and respondent demographics
() provide a summary of EPrints features. The project’s website is
http://www.eprints.org/.
.. Koha
The Koha software was first released in late . The project was
initiated by the Horowhenua Library Trust in Levin, New Zealand, and
the software was developed by Katipo Communications in Wellington.
Koha is an ILS (integrated library system), providing functionality to
support a range library processes, such as acquisitions, cataloguing, and
circulation, as well as having an online catalogue for library patrons
to use. It is written in Perl and MySQL. Ransom, Cormack, and Blake
() describe the history and development of the project in detail,
including its adoption by other libraries around the world. The project’s
website is http://koha-community.org/.
.. Evergreen
The Evergreen software, first released in , was initiated by the Geor-
gia PINES (Public Information Network for Electronic Services). Like
Koha, it provides ILS functionality, supporting cataloguing and circu-
lation, as well as an online catalogue for library patrons. Evergreen is
written in Perl and PostgreSQL, plus JavaScript and XUL. Unlike Koha,
which was designed for use by a single library (or library system), Ever-
green’s original focus was on meeting the needs of a library consortium.
A majority of Evergreen’s current users are in North America. Molyneux
() provides an overview of the project’s history, development phi-
losophy, and future plans. The project’s website is http://www.open-
ils.org/.
.. MARC-Record
MARC-Record is a set of Perl utilities to manipulate bibliographic
records in the MARC (MAchine-Readable Cataloging) format. It was
based on an earlier project, marc.pm, developed by a group of library
programmers in the late s, and the first utility, MARC::Record,
was released in . Because the structure of MARC records is static,
this software is relatively stable, and it had the least activity in the
group selected for this stage of the research. The project’s website is
http://marcpm.sourceforge.net/.
.. MyLibrary
The MyLibrary software was designed to allow a library to provide its
users with the ability to personalise a portal view of the library’s col-
. stage a: document review for selected projects 
lection. Library staff create descriptions of resources that are available
to library users; these descriptions include detailed subject metadata.
Library users can create a personalised profile that indicates the sub-
ject(s) they are interested in, while the software uses this information
to display relevant information resources automatically. It was devel-
oped by Eric Lease Morgan, and first released by North Carolina State
University Library in . It is now developed and maintained by
Notre Dame University Library. Morgan () describes the most re-
cent version of the software, with a case study of its use at the Uni-
versity of Notre Dame’s Hesbrough Library. The project’s website is
http://mylibrary.library.nd.edu/.
.. PhpMyBibli
PhpMyBibli is also an ILS, developed in France. It was first released in
 by François Lemarchand, and is now maintained by the French
company PMB Services. It provides similar functionality to Koha and
Evergreen, specifically cataloguing, circulation, and an online catalogue.
Unlike Koha, which is primarily written in Perl, PhpMyBibli is written
in the Php programming language. A majority of PhpMyBibli’s users are
located in Europe. The project’s website is http://www.pmbservices.fr
/nouveau_site/pmbservices.html.
.. reSearcher
reSearcher is a suite of software packages that provides support for
library electronic resource management. Its components are:
cufts software that allows library staff to manage information about
electronic journals, aggregations of journals, and subscriptions;
godot software that matches citation information with journals, in
order to locate full-text versions in a single step; and
dbwiz a tool for searching across multiple databases.
These tools are used with Open KB, a database that records which
journals are available in which databases, and works with CUFTS and
GODOT. The software was originally developed by Simon Fraser Uni-
versity Library in British Columbia, with the support of the Council
of Prairie and Pacific University Libraries and the British Columbia
Electronic Library Network. Components of the reSearcher software
suite have been available since the late s; Stranack () provides
an overview of the history and main components of reSearcher. The
project’s website is http://researcher.sfu.ca/.
 project, interviewee, and respondent demographics
.. DSpace
The DSpace project began as a result of increased interest in providing
access to the research outputs of academic staff within a single insti-
tution. The software allows people to upload copies of articles, videos,
images, or other types of files to a central repository. Like EPrints, the
metadata associated with these documents can be exposed to search
engines such as Google, in order to make the resources more widely
available. The software was originally developed by MIT and Hewlett-
Packard; additional funding was provided by the Mellon Foundation
once the software was released under a FLOSS license in November .
DSpace is similar in purpose to EPrints, but written in a different lan-
guage (Java rather than Perl). Walker () discusses the history and de-
velopment of DSpace. The project’s website is http://www.dspace.org/.
.. Open Journal Systems
Open Journal System (OJS) is part of the Public Knowledge Project
started by John Willinsky at the University of British Columbia. OJS
supports publishing an online journal, including submitting articles,
assigning them to referees, adding referees’ comments, notifying authors
about the comments, and publishing the final version of the paper.
The first version of the OJS software was released in . Willinsky
() discusses the OJS software in more detail. The project’s website
is http://pkp.sfu.ca/?q=ojs.
. stage b: semi-structured interviews
This section presents and discusses the characteristics of the  people
who were interviewed for this research.
A total of  people was invited to be interviewed for this stage of
the research; six of the people who received invitations to participate in
email interviews and one person invited to participate in a face-to-face
interview did not respond to the invitation. In each case, a replacement
interviewee with similar characteristics, though not necessarily from the
same project, was selected, and subsequently interviewed. One person
accepted the invitation to be interviewed, and indicated a preference for
using instant messaging (IM) for a synchronous interviews, rather using
email. However, this person did not respond to several messages asking
to suggest a suitable time for the interview, and another interviewee
with a similar background was selected. One other person also asked to
use IM for the interview, rather than email. One face-to-face interviewee
suggested inviting two co-workers to participate in the interview, in
order to give a more complete picture of the use of the FLOSS application
within their organisation, and this suggestion was accepted.
. stage b: semi-structured interviews 
Table  on this page lists the characteristics of each interviewee, and
the type of interview.
Table : Stage b Interviewee Characteristics
participant type gender project
 Synchronous Female A
 Synchronous Male A
 Synchronous Male A
 Synchronous Female A
 Synchronous Male A
 Synchronous Male A
 Synchronous Female A
 Synchronous Female A
 Synchronous Female A
 Synchronous Female
()
B
 Asynchronous Male B
 Synchronous Male C, G
 Asynchronous Male A
 Asynchronous Female A
 Asynchronous Male A
 Asynchronous Male D
 Asynchronous Female D
 Asynchronous Male D
 Asynchronous Male D
 Asynchronous Male E
 Synchronous Female F
 Asynchronous Female A
The ethical permissions for the interviews said that the thesis and any
resulting publications would not include any information that could
be used to identify respondents, and therefore letters have been used
to identify individual FLOSS projects. These letters do not correspond
to the numbers in Table  on page ; it is not possible to associate
interviewees with specific projects, as this might make it possible for
someone familiar with the project to identify them.
Three projects listed in Table  on page  are not represented in the
interviews. This is because the people selected from the projects as po-
tential interviewees did not respond to the invitation to be interviewed,
and no similar participant in the project could be identified.
 project, interviewee, and respondent demographics
As Table  shows, just over half ( of ) interviews took place
using synchronous communication methods (face-to-face, telephone,
and instant messaging), and the remainder were asynchronous (email).
There was an even split of genders, with  female and  male inter-
viewees. The interviewees had a range of educational qualifications;
two had PhDs, three had postsecondary certificates or diplomas, one
was currently studying for a post-graduate diploma, one was halfway
through a Bachelor’s degree, one was studying for a Master’s degree,
and the rest () had completed either Bachelor’s degrees or Master’s
degrees.
Their experience with the FLOSS project they described varied. Two
had extensive experience (over  years), and at the other end of the
spectrum, four had approximately six months’ experience. The rest were
somewhere in the middle, and the median experience was between four
and six years using the software.
More than half of the interviewees were associated with the same
project, Project A. While this may introduce bias in the results of this
stage, this high proportion was in part because this project A had the
largest number of identifiable roles (project sponsor, core developer,
project manager, user, system administrator, interface designer, and
release manager), which ensured that the interviewees involved with the
project represented a broad perspective of views, something that was
not easy to determine for smaller projects. One developer had moved
onto a new project, and was no longer actively involved in the project; he
answered the questions based on his previous involvement, which gave
a historical perspective on the software and its community. In order to
minimise the effects of this bias, the types of activities identified by the
interviewees representing Project A were compared to those identified
by interviewees involved with other projects, and activities found in
more than one project were given priority in discussing the results.
Half of the interviewees were primarily software users, while the
other half had a more active role in the project. Developers, and peo-
ple in related roles, such as release manager and interface designer,
formed one third ( out of ) of the interviewees. One interviewee had
been involved in different roles in two different projects, and his inter-
view consequently covered both of these perspectives. Two interviews
involved project business owners, responsible for starting new projects.
One of the challenges in identifying potential interviewees was that
most of the people who could be identified for this stage of the research
were likely to be satisfied with the software, rather than dissatisfied with
it, because their activities were visible. People who had had a negative
experience with LIM FLOSS would be more likely to stop using the
software, and would therefore not participate in project email discussion
lists or write about their experiences, making them difficult to identify.
This suggests that the results of this stage of the research may be more
useful in identifying reasons that participants are satisfied with their
. stage c: web-based survey 
experience of a FLOSS project, while factors that lead to dissatisfaction
may be under-represented.
In order to locate potential interviewees who had a less than optimal
experience, a library in the early stages of its implementation of one of
the FLOSS integrated library systems was identified, and four of its staff
were invited to be interviewed. All accepted the invitation, and were
willing to discuss the negative aspects of their experience as well as the
positive ones, which gave a more balanced perspective to the interviews.
. stage c: web-based survey
In the three weeks that the survey was available,  respondents com-
pleted it; several partial responses in which only the demographic ques-
tions were answered were also submitted. These were discarded before
beginning the analysis; the demographic data provided suggest that
these responses were primarily from younger respondents (most in the
– age group). They had the same gender balance as the overall
survey.
The following tables summarise the demographic characteristics of
the respondents. Some respondents did not answer every question, be-
cause all of the questions were optional.
.. Age Group
Table  on the current page summarises the responses to Question .
Table : Age of respondents
age group n %
 or younger  .
–  .
–  .
–  .
–  .
–  .
–  .
–  .
–  .
 or older  .
Total  .
As Table  on this page shows, two respondents did not answer this
question. The results show that respondents represented all age groups,
 project, interviewee, and respondent demographics
and that the median age range was –. Because all age groups are
represented in the respondents, and the distribution is similar across the
bands from – through -, the results are unlikely to be biased
toward one particular age group.
.. Gender
As Table  on the current page shows, two respondents did not answer
this question.
Table : Gender of respondents
gender n %
Male  .
Female  .
Total  .
The results show that most respondents are men. This imbalance is
common in FLOSS survey research, with previous studies of FLOSS
developers, such as Ghosh et al. (), finding that women make up a
very small proportion of survey respondents (generally less than %).
The type of projects selected for this research has previously been under-
represented in FLOSS research, which has tended to involve large-scale
surveys directed at developers, or case studies of single projects, of-
ten Linux or Apache. Lamont (, p.) found that male library
computer systems department heads were approximately twice as com-
mon as female ones, which is similar to the proportions found in this
research. This finding suggests that the sample represents a different
population than earlier FLOSS research, but that it is representative of
LIM computer systems staff.
.. Educational qualifications
As Table  on the facing page shows, one respondent did not answer
this question. The results show that the typical respondent has a tertiary
education, and a majority has a Master’s degree. This is typical of the
target population for the survey, since a Master’s degree is generally
required for professional LIM positions.
.. Country of residence
Table  lists all countries with more than one respondent individually,
with countries which had just a single respondent been included as
‘Other’.
Table : Highest educational qualification
highest qualification n %
Secondary or high school
graduate
 .
Postsecondary certificate or
diploma
 .
Undergraduate degree  .
Postgraduate certificate or
diploma
 .
Master’s degree  .
PhD  .
Total  .
Table : Country of residence
country n %
United States  .
India  .
New Zealand  .
United Kingdom  .
Australia  .
Canada  .
Germany  .
Argentina  .
Belgium  .
Other  .
Total  .

 project, interviewee, and respondent demographics
As Table  on the previous page shows, all respondents answered
this question. The results show that respondents came from  countries,
including both developed and developing countries. The largest number
of respondents came from the United States, and the second largest
from India. New Zealand is over-represented in the results, with 
(.%) respondents. This may be because two of the widely used LIM
FLOSS projects, Greenstone and Koha, originated in New Zealand, and
the researcher is based there.
The ‘Other’ category includes six European Union (EU) countries, four
European countries that are not part of the EU, four countries in Africa,
four in Asia, three in South America, two in North America (Mexico and
Puerto Rico), one in the Caribbean, and one in Oceania.
.. Years using a computer
Table : Years using a computer
range n %
Less than  years  .
– years  .
– years  .
– years  .
– years  .
– years  .
More than 
years
 .
Total  .
All respondents answered this question. The median response is –
 years, and  (.%) respondents had used computers for  or
more years. This suggests that the survey results represent people who
are familiar with using technology.
.. Operating systems used
Questions  and  of the survey asked respondents to identify the
operating system(s) they used on computers provided by their employer,
and on computers they owned, respectively. Because of the many possi-
ble responses, this was an open question, to allow respondents to enter
as much information as they wished. Two respondents did not answer
question  and three did not answer question .
. stage c: web-based survey 
Table : Number of operating systems used
number n (work) % (work) n (home) % (home)
  .  .
  .  .
  .  .
 or more  .  .
Total  .  .
Table : Operating systems used
type n (work) % (work) n (home) % (home)
Windows  .  .
GNU/Linux  .  .
Mac OS  .  .
The results show that there is considerable variation in the underlying
platforms used by respondents, as shown in Tables  and . Table 
shows the number of operating systems used by respondents, Table 
indicates the specific type of operating stems used, and Table  shows
whether they use only proprietary operating systems, only FLOSS ones,
or a mix of each. Both tables show work and home operating system use
separately.
Approximately one-third of respondents used more than one operat-
ing system at work, at home, or both, meaning that the totals for the
columns are more than %.
These results show that the respondents use a range of operating
systems, and also that a higher proportion of respondents use Mac OS
and GNU/Linux than typically found in business and government.
The differences between the operating systems used in the two envi-
ronments shows that where respondents have a choice of which software
to use (that is, on their own computers), slightly more use GNU/Linux
Table : Type of operating systems used
type n (work) % (work) n (home) % (home)
Proprietary only  .  .
Mixed proprietary
and FLOSS
 .  .
FLOSS only  .  .
Total  .  .
 project, interviewee, and respondent demographics
than at work. In addition, fewer respondents use Microsoft Windows at
home than at work.
. understanding and use of floss
Questions , , , and  asked respondents to indicate their familiarity
with free/libre and open source concepts, and the extent to which they
use FLOSS software at work and on computers they owned. Table  on
this page and Table  on the next page summarise their responses.
.. Familiarity with FLOSS concepts
Overall the results show that slightly fewer than half of the respondents
have a preference for using FLOSS at work, and slightly more than half
have a preference for using it on computers they own. Approximately
equal proportions will consider using FLOSS at work or at home (.%
and .% respectively). Taken together, these results suggest that sur-
vey respondents are open to using FLOSS packages when they meet
their needs, and this is likely to introduce a bias in the survey results.
Since respondents were recruited for the survey because of their existing
interest in at least one LIM FLOSS project, this result was expected, and
the responses to this question confirm it.
Table : Familiarity with FLOSS concepts
familiarity n %
Not at all
familiar
 .
Slightly
familiar
 .
Somewhat
familiar
 .
Quite familiar  .
Very familiar  .
Total  .
All respondents answered question . As Table  on this page shows,
the results indicate that a majority of respondents considered themselves
to be very familiar with the idea of FLOSS.
. summary 
.. Attitude to using FLOSS
Table  on the current page summarises respondent answers to ques-
tions  and , which asked them to indicate their approach to using
FLOSS on work and home computers.
Table : Attitude to using FLOSS
attitude n (work) % (work) n (home) % (home)
It makes no difference to
me
 .  .
Other people make the
decision for me
 .  .
I prefer to use proprietary
software with vendor
support
 .  .
I will consider a free/open
source option
 .  .
I give preference to
free/open source whenever
possible
 .  .
I only use free/open source
software
 .  .
Other  .  .
Total  .  .
The single respondent who chose the ‘Other’ option for computers
provided at work indicated that he had little decision making power,
but did have a preference for FLOSS software if consulted. The person
who chose this option for computers he owned indicated that all of his
computers were provided by his employer.
. summary
This chapter presented the key demographic characteristics of the
projects selected for observation in Stage a, the Stage b interviewees,
and the Stage c survey respondents. It showed that LIM FLOSS projects
are varied, with differences in complexity, numbers of identifiable users,
activity level, and number of developers. The Stage b interviewees
represented six different projects, and included both technical and user
roles. Respondents to the Stage c web-based survey were diverse, repre-
senting  countries. They ranged in age from under  ( respondent)
to over  ( respondents). While they were all involved with at least
one FLOSS project, they also used both free and proprietary operat-
 project, interviewee, and respondent demographics
ing systems. Slightly fewer than half indicated a preference for using
free/open source software when they had a choice, and approximately
one third would consider it.
5
C O N T R I B U T I N G T O A F LO S S P R O J E C T
This chapter answers the first sub-question for this research project,
What types of contributions do participants make to free/libre and open
source projects? The choice of wording for this question deliberately
focuses on contributions rather than roles. Its answer does not involve
making an exhaustive list of activities that people participating in FLOSS
projects carry out; rather, it focuses on developing a typology that can
be used to classify activities, and give a rich perspective on what is
involved in creating a thriving FLOSS community. Section .. on
page  showed that existing literature about participant roles in FLOSS
projects generally uses frameworks and models that focus only on their
interaction with the project’s source code. The data gathered for the
first stage of this research show that coding is only one dimension, and
that participation in a FLOSS project community may involve a range of
other activities for people who lack the skills to write or test software.
. more than just code
Every FLOSS project is different. They are different in that the software
has a different purpose and functionality, the developers are different,
the users are different, the programming languages vary, the standards
vary, etc. However, projects share a number of characteristics. In partic-
ular, they all use a FLOSS licence to release the source code. They all
carry out similar activities, no matter how small or how large the project
is. They all involve a community of participants interacting with each
other to determine the future of the project. This stage of the current
research focused on these similarities, in order to understand the most
common types of contributions people make to FLOSS projects.
Using a code-centric perspective to represent FLOSS participant roles
omits a number of activities, such as those that relate to supporting
the community. These activities become more valuable as the software
is adopted by people who are not part of the original group of devel-
opers, and its number of users increases. This chapter describes seven
dimensions of participation, typical activities associated with each di-
mension, and four attributes of FLOSS project participation that overlay
the other dimensions. The approach used to identify these dimensions
is discussed at the beginning of Section . on the next page.
The goal in identifying these dimensions was to be able to categorise
all of the activities that were identified in the FLOSS projects that formed
part of the sample for Stage a of this research, or described by the in-
terviewees in Stage b, while at the same time keeping it as succinct

 contributing to a floss project
as possible. To provide a framework that gives a generic view of the
types of activities involved in a FLOSS project, the focus was on identi-
fying themes and activities common to a range of projects, rather than
activities that were found only in a single project.
. types of contributions made to floss projects
This section describes the types of contributions interviewees made to
FLOSS projects, not their specific roles. The early analysis showed that
all interviewees who were identified as users in Table  on page  did
more than passively use the software, which suggests that identifying
groups of activities is more realistic than trying to identify distinct roles.
The range of activities identified by Stage b interviewees, and from
the unobtrusive observation of  different projects in Stage a of this
research project, were listed and then categorised by the main objective
or goal of the action. Once these were listed, similarities between the
objectives were identified, and seven broad categories emerged from
the data. These are described below, followed by a discussion of four
important attributes that were found in all of the categories.
.. Use
While use of the software is not inherently a ‘contribution’ to a project,
without users the software would have no purpose, and there would be
no need for the other types of activities discussed below. In other words,
‘Software is for use.’, to paraphrase Ranganathan’s first law of library
science, “Books are for use.” ()
Users are the people for whom the software’s functions are relevant,
and their interactions with the software, whether frequent or infrequent,
test the extent to which the software meets their requirements. Every
user is likely to have subtly different needs and expectations for the
software, and the larger the pool of users, the more likely it is that
all features of the software will be used at some point. Half of the
interviewees included using the software when asked to describe their
role in the project. However, only one of them used the term ‘end user’
and gave the impression that use was the main focus of her interaction
with the software/project. Nevertheless, even this interviewee identified
changing parameters for the way the software worked as part of her
role, which goes beyond basic use. The other interviewees who were
classed as users in Table  on page  gave much more detail about
their typical activities, which ranged from reporting problems with the
software, to training colleagues in its use, to writing documentation.
In the context of library and information management application
software, it is also important to note that the core developers are not
generally users of the software. Most librarians do not have the technical
. types of contributions made to floss projects 
skills to develop software, and unlike many of the more widely known
FLOSS projects, such as GNU/Linux and Apache, there is likely to be a
clearer separation between the developers and the users in LIM FLOSS
projects. This means that the relationship between people who work
with the project’s code, and those who use the software, is more likely
to resemble that of a traditional software development project, with
the users being more actively involved in specifying requirements and
testing changes.
.. Interaction with code
There is a range of activities that fall under this heading. All of them
relate to the software and its current or future functionality. Most obvi-
ously, this includes writing new code and modifying existing code to fix
bugs or add new features. The most basic interaction with the source
code can simply involve reading it to understand how it works, but
the interview data show that most of the interaction project members
have with the code goes beyond this. Much of this is intended to lead
to improved functionality, whether through fixing a bug, specifying a
new requirement, designing an interface, testing changes, etc. Other
types of interaction with the code included reporting bugs, packaging
the code for a new release, or translating the user interface into another
language. All of the interviewees mentioned this type of activity, even if
they didn’t contribute code directly themselves. Most appreciated the
benefits that they gained from code contributed by other community
members.
.. Supporting the community
Once the user group has grown beyond the project’s initiators, there is
an increased need to support current community members. The most
common community-related activities included writing user and system
documentation and answering questions on project discussion lists and
forums. Table  on the following page shows the full list of community-
oriented activities identified by interviewees, and the number of times
each was mentioned.
As projects become more established, the range of support activities
offered by members of their communities grows, with experienced users
teaching new ones how to use the software, for example. For two of the
projects that formed part of the sample for this research, community
members organised user and developer conferences, and one project
had an active user group that met when convenient, usually held in
association with major library conferences.
One held its first conference in , and the second in , with
a third conference held in late . A second project, first released
 contributing to a floss project
Table : List of community-oriented activities
activity times men-
tioned
Write documentation 
Answer questions 
Provide training 
Run workshops 
Organise conference 
Organise user
interface translations

Set up user group 
Translate
documentation

several years after the previous one, held its first conference in ,
its second in , and its third in . A third project has also held
two conferences, in  and , and has recently announced a third
to be held in the third quarter of . In this case, the forthcoming
conference will be held on a different continent to the first two, showing
that the geographic distribution of members of this project’s community
is changing. This shows that participants in all three projects recognise
the importance of face-to-face contact for community building, and in
the case of the third, that it is important to hold conferences in different
locations to make it possible for more, and different, people to attend.
Two interviewees who were involved in the first project attended the
 conference, and both commented on the benefits they gained from
meeting people they had previously known only virtually.
One aspect of interacting with the community that was not mentioned
by any of the interviewees, but was observed in several of the projects,
was mentoring new community members. This took many forms, but it
often included encouraging them to contribute, or helping them under-
stand how to contribute in a more active way. Though the time spent
on mentoring activities may not always result in actual contributions
to the community, it is important to both the mentor and the ‘mentee’,
because of its potential to promote community spirit. In the FLOSS
projects that were observed in Stage a, the ones that had formal and
informal mentoring appeared more likely to grow and develop shared
values among members of their communities.
. types of contributions made to floss projects 
.. Outreach
Activities that fall into this category go beyond the project’s existing com-
munity, and are intended to promote the project to new users. Typical
outreach activities included giving presentations and/or demonstra-
tions at professional conferences, and writing articles for professional
and practitioner journals. In some cases, these activities included giv-
ing introductions to basic FLOSS concepts, which are still not widely
understood in the library profession, or in the wider community.
One example of an outreach activity intended to reach a wide audi-
ence is Software Freedom Day, held each year on the third Saturday in
September. Generally FLOSS supporters within a city or region decide
what, if any, activities they want to organise for this day. While much of
the activity is general, intended to introduce the concepts of free/libre
and open source software to members of the public, some communi-
ties also provide opportunities for demonstrations of specific software
packages, and may also give away installation CD-ROMs or USB mem-
ory sticks containing FLOSS software. Because Software Freedom Day
generally takes place on a Saturday, this means that most of the people
involved participate in their own time, rather than as part of their paid
employment.
.. Sponsorship
This involves seeking or providing resources to support the project, such
as funding new developments, providing web hosting facilities for the
community’s web-based tools, etc.
The choice of the term ‘sponsorship’ for this category of activities
was made after careful consideration of other terms, for example ‘sup-
port’. Conventional IT projects sometimes use the term ‘project sponsor’
to indicate the business owner of an individual project, but in other
contexts, such as conferences and cultural events, the term ‘sponsor’ is
used to indicate organisations and/or individuals who have provided
funds to support the event, or donated physical items, such as pens,
conference bags, or USB sticks. The activities observed in the FLOSS
projects in Stage a, and mentioned by interviewees in Stage b, were
similar to this type of sponsorship. Therefor, the term ‘sponsor’ seems
the most appropriate choice for activities that relate to providing a range
of resources, since no project can be undertaken without resources. To
have credibility, a FLOSS project needs to have a website, and meth-
ods for members of its community to communicate with each other.
These methods typically include asynchronous email discussion lists,
web-based discussion forums, or both, and many projects also use at
least one synchronous channel, usually IRC (Internet Relay Chat). All
 contributing to a floss project
of these require a web hosting service so that they are available to any
community member, or potential member.
While some projects use freely-available services for their web hosting,
such as the ones offered by SourceForge or Google Groups, others use a
dedicated project domain and other resources, which need to be funded
by someone. In some cases these are provided by the individual or
organisation that started the project, but for other projects these may be
provided by later adopters, often companies that have been established
to support the software on a commercial basis. One interviewee, a project
sponsor, mentioned the importance of setting up resources to support
the project early on, saying “we really realised that it needed to be
supported in some way”, and went on to discuss getting another user
of the software to provide funding to retain the software developers on
a maintenance contract, in addition to setting up user- and developer-
oriented email discussion lists.
Another type of sponsorship is funding specific enhancements that
are a priority for a particular organisation. While in some cases these
enhancements were done in-house and not contributed back to the wider
community, many sponsors chose to make their changes available to all
users by having them incorporated into the next release of the software.
This benefits the entire community, even though the enhancement is
usually specified and funded by a single user or organisation.
.. Management
Management activities all shared two characteristics: they involved
coordinating tasks and people, and they had a short term focus, often
relating to the next release of the software. Interviewees identified fewer
management activities than other types of activities, and tended to
associate clusters of management tasks with specific roles. As projects
grew and the associated procedures and roles became more formal,
these tasks became more important. This may be because the number of
people potentially affected by changes to the software is larger, and the
community needed to make sure that the consequences were considered
before the changes were implemented. Typical tasks in the management
category included overseeing the process of preparing a new release,
which often involved integrating code from a number of developers,
or managing a specific aspect of a project, such as translating the user
interface into other languages. Another activity that fitted into this
category was determining which features to include in planned releases.
In contrast to governance activities, which are described below, man-
agement activities generally related to the near future, and/or a specific
release. Another management task mentioned by one interviewee was
recruiting new developers for the project, by approaching them indi-
vidually to see if they would be interested in becoming involved. Most
. types of contributions made to floss projects 
Table : Management roles in FLOSS projects
role focus
Coordinator Project
Documentation manager Project
IT project officer Local
Operations manager Local
Project leader Local
Project manager Project
QA manager Project
Release manager Project
Team leader Local
Training coordinator Local
Translation manager Project
of the management activities identified by interviewees were given a
formal title, and acknowledged by other community members. Each
role was usually held by a single person at any given time, generally
changing only when new versions of the software were released.
There were also a number of management roles associated with local
(i.e. organisational) adoption and use of FLOSS; these included being
project manager of the initial implementation within the organisation,
for example, or managing a software upgrade when a new version is
released.
Table  on the current page shows the formal management roles
identified by interviewees, and whether their focus was on local use of
the software, or the wider FLOSS project.
.. Governance
Governance activities were related to management, but had a different
perspective, which is the rationale for having them in a separate category.
They were less concerned with specific releases and/or deadlines, and
more concerned with policies that affected the project’s community.
In contrast to management activities, which had a short-term focus,
FLOSS governance activities involved looking at long term issues, and
developing policies and procedures that were essential for the project’s
(or the community’s) future evolution. One interviewee showed a good
awareness of governance issues when discussing licensing options for
software the organisation was planning to release under a FLOSS license
in response to requests to make it more widely available, saying that
when he reviewed the current licence provisions he found that they
 contributing to a floss project
Table : Governance activities
activity
Choose/establish governing body
Correct misrepresentations in the media
Define community behaviour standards
Develop appointment process for formal roles
Establish copyright and licensing policy
Monitor behaviour
Monitor media
Resolve conflicts between community members
were contradictory. He noted that most of the code was released under
the Apache License, but one small piece used the GNU General Public
License version , and that according to the Free Software Foundation,
these licences were incompatible.
Like management activities, activities associated with project gover-
nance became increasingly important as projects grow in size.
In some cases, governance activities also involved setting up (or choos-
ing) an organisation to hold the project’s assets in trust on behalf of
the community; while the copyrighted source code itself is usually the
project’s main asset, other assets include domain names associated with
the project, documentation, and trademarks. People involved in the
project’s governance also managed the process of appointing commu-
nity members to formal roles, such as choosing the next release manager.
In keeping with the collaborative nature of FLOSS projects, they usu-
ally designed the process so that anyone interested in the project had
an opportunity to be involved in making the decision, for example by
voting for their preferred candidate. In larger projects, members of the
governance group were also involved in setting and documenting com-
munity standards for behaviour, or in following up complaints about
unacceptable behaviour. This became more important as the project
grew, and newcomers unfamiliar with the project’s history and norms
joined it. Some governance activities, particularly those involving con-
flict resolution, were managed behind the scenes, rather than in the
project’s public community email discussion lists or online forums.
Table  on this page lists the governance activities mentioned by
interviewees. In all cases these activities were carried out by an intervie-
wee whose main involvement with the project involved other types of
activities. None of the interviewees was only involved in project gover-
nance; the ones who mentioned activities related to governance did so
in passing, sometimes as an afterthought.
. attributes that cross all dimensions 
. attributes that cross all dimensions
The results of the Stage  data analysis also revealed four attributes that
provide additional context to understand roles and participation in a
FLOSS project. Each of these is associated with more than one type of
activity, and is described below.
.. Organisational focus
One aspect of participation in a FLOSS project that emerged from the
interviews is that there were two aspects to most interviewees’ involve-
ment with the project: a local one that related to their role within their
organisation (in other words, a role that related to their employment),
and one that related to their role in the wider project community, which
sits outside this organisation. Use is, of course, always related to the
organisation (or to be more precise, not part of the wider project), but
several of the people who were interviewed had an active local role
(for example, being the project manager for the implementation of the
software within the organisation), but little or no involvement with the
wider FLOSS community. In contrast, the core developers for two of the
projects included in the sample were employed to do this work, all of
which was expected to be released to the wider community, and so had
a purely “wider project” role.
Seven of the interviewees had a purely local focus; they used the
software in-house and had no communication or involvement with the
wider community. In one case, another staff member interacted with the
wider project community on their behalf as necessary, while in another,
the organisation had made extensive customisations to their version of
the software, and the interviewee did not feel it was necessary (or even
possible) to have that type of interaction, because this version of the
software was now unique.
.. Role formality
Another characteristic of FLOSS participation that occurs across the var-
ious dimensions is the extent to which the roles interviewees held were
formal or informal. A formal role had a job title and well-defined respon-
sibilities, and was recognised by other participants in the project, some
or all of whom might have been involved in the appointment process. In
contrast, an informal role did not have a title, and the tasks undertaken
varied from person to person. When asked how people get involved in
projects, several of the interviewees used the word ‘volunteer’, implying
that new participants took on a role that suited their current knowledge
and circumstances. One user who contributed documentation said that
 contributing to a floss project
she saw a gap that she had the skills to fill, and took this on because she
couldn’t contribute in any other way.
There is a relationship between organisational focus and role formality.
In general, the local roles held by the interviewees were formal, because
they formed part of their paid employment. There is some scope for
local roles to have a degree of informality, but this is most likely to
relate to activities such as mentoring or training new users, and most
participants who took on this type of informal local role also had a more
clearly defined formal role.
This is not true for roles within the wider project; most of the roles
participants held were informal. All of the projects that formed part of
the sample for this stage of the research had only a few types of formal
roles, held by a small number of people, particularly when compared
with the total number of people involved with the project.
.. Remuneration
The third of these shared attributes is the extent to which the inter-
viewees were paid for their work on the project. All interviewees were
paid for their formal, local roles, but only some were paid for their
project-related roles, whether formal or informal. Because most of the
participants in this research project used or developed the software as
part of their employment, they were paid for their local roles, both for-
mal and informal ones. Nonetheless, there is no requirement for people
to be paid for all of the work they do on FLOSS projects, even when
they take on a formal, project-related role. One participant was paid to
work as a full-time developer on the project, but also took on a formal
management role in the project, which he carried out on an unpaid basis,
largely in his own time. His paid work required him to write code for
new features, while his management role involved managing the next
release of the software, which included contributions from a number of
other developers.
.. Time commitment
Finally, the amount of time that the interviewees spent in FLOSS project-
related activities varied considerably. For some, it was the major part of
their employment, and they therefore were working with the software
on a full-time or near full-time basis. For others, the software was a
minor part of their role, and they fitted it in around their other work. A
third group, smaller than the other two, were involved with the project
on a purely voluntary basis, and worked on it in their free time.
. discussion 
. discussion
Every project included in the sample for Stage a was different, just as
every person interviewed for Stage b had a different perspective on the
project and roles within the project. Their involvement in the project
was a unique combination of formal and informal roles; one thing that
was particularly noticeable about the findings from this stage of the
research was that many interviewees carried out tasks that fell into a
number of dimensions, even though they identified themselves as a
‘developer’ or a ‘user’. Even people who described themselves primarily
as a user of the software also carried out outreach activities, most often
giving a conference presentation about their experience, or giving one-
on-one demonstrations to prospective users. One member of a FLOSS
project that was part of the Stage a sample expressed this in a recent
discussion board posting, saying “Everyone in [project X] wears at least
 different hats :)”.
Table  on the next page shows the distribution of types of activities
by interviewee. A !! indicates their main focus in the project. In
several cases an individual interviewee’s activities covered six of the
seven categories; in other words, they used the software or updated the
code, provided support to community members, worked to promote the
software to new users, provided resources (often in the form of space on
a shared server), managed at least one aspect of the project, and were
involved in determining overall policy for the project. These ‘omni-roles’
usually occurred in the smaller projects, and larger projects tended to
have a clearer separation of roles, with more specialisation. However,
even then interviewees whose activities were concentrated in one of
these areas generally showed an awareness that the other activities were
important for the health of the project community, suggesting that most
FLOSS participants understand that the project involves more than just
writing and testing source code. In general, the longer interviewees
had been involved with the project, the broader their perspective on
the range of activities carried out by other members of the project’s
community. This was the case for all types of primary involvement.
.. A user-centric view of a FLOSS project
Section . on page  identified seven types of activities community
members contribute in a FLOSS project. These are represented in Figure
 on page . The model places use at the centre, and groups the
remaining six types of activities in three pairs representing the concepts
of ‘project fitness’, ‘project viability’, and ‘project spirit’. For illustrative
purposes the three groups of activities were drawn as the same size, but
in practice their proportions will vary from project to project, depending
on a number of factors, such as the project’s size, age, and complexity.
Table : Interviewee activity summary
interview
no. use code support
out
reach sponsor manage govern
 ! ! ! !!
 !! ! ! ! ! !
 ! !! ! ! !
 ! !
 ! ! ! ! !!
 !! !
 !! !
 !! !
 !! ! ! ! ! !
 !! ! ! !
 ! ! !! !
 ! ! ! ! !! !
 ! !! ! !
 !! ! !
 ! ! !! ! !
 ! !!
 ! !! ! !
 ! !! !
 !! ! ! !
 ! ! ! ! !!
 !! ! ! !
 !! ! !
Total       

. discussion 
Figure : FLOSS contribution model
Any FLOSS project which does not have participants involved in all
seven types of activities over time is likely to be unsustainable in the
long term, so this framework may be helpful in considering a project’s
sustainability.
The three higher level categories were developed by considering
whether the six activities that support use could be grouped in a way
that gave additional insight into the activities identified in the FLOSS
projects. This involved comparing the six categories in terms of their
overall purpose, plus their long-term effects, until a meaningful com-
bination emerged. All combinations were considered, but the one pre-
sented in Figure  on this page was considered to be the simplest and
most meaningful. This model represents an interpretive perspective on
the seven types of activities, based on the researcher’s familiarity with
the projects, interviewees, and data gathered in Stages a and b of this
research.
Project viability
The concept of viability is familiar to everyone. The Oxford English
Dictionary online defines viability as the “ability to continue or be con-
tinued”. In the context of a FLOSS project, project viability relates to the
expectation that community members will able to carry out their formal
 contributing to a floss project
and informal roles for the foreseeable future, without disruption. Gover-
nance and sponsorship activities both contribute to a FLOSS project’s
viability by providing policies and resources that allow community
members to focus on achieving their own and the project’s goals.
Project fitness
In biology, fitness is defined as “The quality of fulfilling the require-
ments of a particular environment for survival and reproduction; the
capacity of an individual to survive and reproduce.” (“Fitness”, Oxford
English Dictionary online). A FLOSS project’s fitness is determined by
activities relating to coding and management. Coding activities are nec-
essary to improve the software’s functionality, either by adding new
features, or by fixing bugs. Any FLOSS project that does not involve cod-
ing activities will have static code that does not evolve to meet changing
user needs, and is likely to become irrelevant or obsolete over time. Simi-
larly, without some degree of management activity, the code changes are
unlikely to be released effectively, which may cause its users to become
frustrated. If this continues, users may seek alternative software and
leave the community.
Project spirit
A FLOSS project’s spirit is an intangible characteristic that describes the
“life” of the project, and this comes from the interactions of the various
members of its community with each other and with people outside the
project. The extent to which community members support each other
and work to attract new members will affect an individual’s sense of
belonging to the community. Over time it will add a sense of structure
and style to the project, establishing its core values.
. summary
This chapter answered the first research sub-question What types of
contributions do participants make to free/libre and open source software
projects? It identified seven distinct types of contribution: use, code,
community, sponsorship, outreach, management, and governance, ex-
tending the previous code– or developer–centric models. It concluded
by presenting a user-centric model of a FLOSS project, and identified
pairs of contribution types that established a FLOSS project’s spirit,
fitness, and viability. In combination, these three characteristics may be
thought of as determining a FLOSS project’s sustainability.
6
I N D I V I D UA L P E R S P E C T I V E S O N SAT I S FAC T I O N
This chapter begins with a discussion of the findings of the Stage b
interviews that relate to satisfaction with the software, followed by a
description of the dimensions that were used to measure satisfaction in
the Stage  survey.
. perspectives on satisfaction
As in the previous chapter, statements in the interview transcripts re-
lating to satisfaction were coded and the data grouped by broad theme.
This was a less structured process than the one used to analyse par-
ticipation, because the reasons given for interviewee’s satisfaction and
dissatisfaction were more varied, and reflected individual perspectives
more strongly, making the patterns and relationships more subtle.
.. Documentation
It will come as no surprise to anyone who has used FLOSS in any con-
text that poor quality documentation was the single aspect mentioned
most often, by both developers and users, when discussing aspects
of the project that affected their satisfaction (or in this case their dis-
satisfaction). Most interviewees who mentioned documentation (both
developers and users) said that it was weak, and that there was room for
improvement. However, they also acknowledged that this was typical,
with one interviewee who had experience of several FLOSS projects
saying “Documentation’s always a problem”.
One interviewee suggested that the only way the documentation
would be improved would be if the developers worked on it in their own
time, implying that no one in the community was prepared to sponsor
writing manuals. This interviewee then went on to say that this was un-
likely to happen because community members had other commitments
and priorities. However, two interviewees said that the documentation
for the software they were using was good, but out of date. One intervie-
wee implied that this was common, saying “things like documentation
and installation scripts always lag slightly behind”. Other interviewees
acknowledged that it was difficult to keep documentation up to date
when the software was changing frequently, with one saying “As soon as
you did a manual you’d have to change it the next day”.
Despite this widespread recognition that user-oriented project docu-
mentation could be improved, only two interviewees had contributed

 individual perspectives on satisfaction
documentation to the project they were involved with; one had written a
stand-alone user guide, and the other had contributed to a project wiki.
Other interviewees referred to writing in-house documentation, but did
not mention contributing this back to the wider project.
One interviewee mentioned that proprietary software documentation
is often written to support the vendor’s formal training programs, and
suggested that the lack of documentation for FLOSS projects was a con-
sequence of the community’s informal approach to training. However,
he also said that the software was intuitive and that formal training was
unnecessary, suggesting that he didn’t view the lack of documentation
as a significant issue.
One question that two of the interviewees raised was whether com-
munity members had the right skills to write good documentation. One
suggested that projects should try to attract technical writers to improve
the documentation, while the second thought that users would also need
to be involved, since they understood the workflows required to make
effective use of the software. This interviewee commented that there
was good information available about the technical aspects of installing
the software on different platforms, because the developers themselves
wrote about their experiences on the project’s email discussion list. How-
ever, he stated that users did not document their experiences in the
same way.
.. Community helpfulness
Another characteristic that contributed to interviewees’ satisfaction with
the FLOSS project they were discussing was the community itself. Most
of the interviewees gave examples of good communication between
community members, usually on the project mailing lists, and said that
this contributed to their satisfaction with the project. One interviewee,
who saw himself as an in-house user of the system, relied on another
staff member to interact with the wider project community; he said
that in his view this was not being handled particularly effectively, with
the consequence that their implementation of the software had more
problems than necessary. Several of the developers interviewed from the
same FLOSS project said that they were disappointed that users tended
not to answer questions on the project’s email discussion list, suggesting
that users expected this project’s core developers to answer even simple
questions. However, none of them had taken any steps to try to increase
user involvement in answering questions.
This example, along with the previous one, raises an interesting point:
even when FLOSS project participants perceive something as a problem,
they will not necessarily take any action to resolve it. It is not clear why
this is the case, since at least one of the projects with which interviewees
. perspectives on satisfaction 
were involved has a very open culture, and was generally described as
being friendly and welcoming to new members.
Other people, usually those who were in project initiator roles or were
early adopters of the software, mentioned seeing the community grow
as something that gave them satisfaction. One said that seeing versions
of the interface in different languages, even though she couldn’t read
them herself, was a “thrill”.
.. Software characteristics
Several interviewees mentioned the software’s functionality, and/or its
ease of use, as contributing to their satisfaction with it, while others
felt that the opportunity for them to change the software to suit local
conditions was its most important characteristic. One interviewee said
that she was disappointed with the software because the functionality
was very similar to their previous proprietary system, and her view was
that the organisation had believed that the FLOSS package would be
“better than what we had”.
A different group of interviewees had customised the FLOSS package
they were using so much that they weren’t able to upgrade to the most
recent release, but they did not see this as a significant issue, since they
did not perceive the new features in this release as important or relevant
to them.
Reliability was another aspect of the software that several intervie-
wees mentioned. One said that “It’s been going the whole time—it’s
very reliable”, while another said that their system had been running
continuously for three months with no problems. This interviewee then
said that it was very easy to recover from failures because of the sys-
tem’s architecture, in contrast to what was required for the proprietary
software his organisation had previously used, which he described as
“painful”.
.. Cost
Cost was mentioned by four interviewees. One relied on commercial
support for the software, saying that it represented value for money
(in comparison with using proprietary software). A second said that
she began using the software because she could no longer afford the
fees charged for proprietary software. A third interviewee said the lack
of license fees meant that they could run development and training
versions of their system alongside their production one, which he saw
as a key benefit of using FLOSS.
The most extensive discussion of cost came from an interviewee who
said that cost was not a factor in their decision to move to a FLOSS
package; he explained that they expected their overall costs to be similar
 individual perspectives on satisfaction
to using proprietary software, but that they would be spending the
funds on customisation and fixing bugs, which he saw as being a better
use of the money than contributing to a private company’s profits.
.. Personal benefits
Two interviewees identified personal benefits that resulted from their
involvement with a FLOSS project, which increased their satisfaction.
In one case, the interviewee attended a conference and was able to
meet leading figures in the wider FLOSS community because of his
involvement with the project; the second person had been invited to
be on a state-wide library technology committee, and felt that this was
because of her adoption of FLOSS software for her library, which her
peers perceived as being innovative.
.. Complexity
Two people mentioned complexity as an issue; one said that the under-
lying technology software stack needed for the software was complex,
and had a steep learning curve; the other stated that the software was
difficult to install, and that the developers needed to pay more attention
to packaging it as a ‘one-click’ installation.
.. Other comments
Several aspects of a FLOSS project were mentioned by only a single in-
terviewee. The first discussed quality assurance for new releases, which
he felt could be improved, since he had found a number of bugs in the
most recent release. Another interviewee described a lack of informa-
tion about the project’s future as a source of dissatisfaction, and made a
number of suggestions about how this could be improved using social
media such as blogs. He felt that regular updates from the project’s key
decision-makers would contribute to an enhanced feeling of being part
of the community. This comment related to a project that had few users
involved in answering questions on the project’s email discussion list,
and suggests that product openness may be important in encouraging
contributions from software users.
.. Attitude
One finding that emerged from some interviews was the importance of
the interviewees’ attitude towards FLOSS in determining their overall
satisfaction with the software/project. This was most evident in a series
of four interviews that related to the same implementation of one LIM
FLOSS package. One interviewee had a technical background, and is best
. perspectives on satisfaction 
described as the project’s internal ‘champion.’ He was frank in admitting
that the project’s implementation had not been % successful, but
explained that their ability to manage the project in-house and make
changes to meet local needs meant that he was positive about its future.
The other three interviewees from this organisation were all users; two of
them had had formal roles on the project’s implementation team, while
the third’s work was directly affected by the implementation. All three
of the users said that they were initially enthusiastic about the project,
and understood how using FLOSS was different from their previous
proprietary system. Similarly, all three were willing to discuss the issues
with the system’s implementation, and its effects. However, while two
of them (A and B) were still positive about the system’s potential, the
third (C) expressed significant dissatisfaction, saying “I’ve been really
disappointed with it”. This was despite acknowledging that most of
the problems she had identified had been sorted out quickly by their
in-house developer.
One of the reasons for C’s disappointment was that the software didn’t
meet her expectations in terms of initial functionality; she had been
expecting something that was significantly better (from her perspective)
that the system it replaced. In addition, C didn’t enjoy being able to
be involved in determining its future, and felt that she (and the people
she worked with) lacked the skills to make good decisions about what
needed to be changed, saying “I feel we’re trying to do it when we’re
not really qualified”. C had a strong preference for purchasing software
that didn’t need any local changes, and that provided all of the essential
functionality ‘out of the box’. She also expressed concern about the
amount of time that was required to identify the enhancements that
were needed to meet the library’s requirements, implying that this would
not be needed if they had licensed a proprietary system. Her perspective
was that by choosing a FLOSS package, the organisation had made a
poor decision, saying “we really are re-inventing the wheel”. In contrast,
A and B, who were also affected by the implementation issues, were
still optimistic about the system’s future. In particular, B, who had been
the staff member most affected by the issues, identified a number of
problems that had created a stressful work environment for her team,
but still said “I like the idea of the open source software” and “I’m sure
things will come right in time”. A’s perspective was that having the
ability to make local changes was very important, and this compensated
for the problems, because of the potential to have something that could
be tailored to meet the library’s specific needs in the future. In addition,
A referred to himself as an “advocate” for the software, saying that part
of his position involved promoting the software to other staff in the
organisation.
One explanation for the the difference between C’s assessment of
her satisfaction with the software compared to that of A and B is her
underlying attitude to FLOSS. This is particularly evident when compar-
 individual perspectives on satisfaction
ing her background to that of B. They had similar levels of education
and experience; both had the same library-related qualification, and
both had over  years’ experience of working with proprietary library
software. They had both used the FLOSS package they were discussing
for the same amount of time, and had experienced the same range of
problems. But the interviews showed that one was positive about the
system’s future, while the other was very negative.
Indirect evidence of interviewees’ attitude to the FLOSS package they
used was also shown by their actions in promoting it to prospective
users; in other words, activities that are part of the ‘outreach’ category.
Over half of the interviewees had either given demonstrations of the
software to small groups of people, presented a paper at a conference, or
written an article about it. As might be expected, the longer interviewees
had been involved with the project the more likely it was that they had
undertaken some outreach activities; however, one person who had been
using the software for one year (less than most of the other interviewees)
was particularly active in promoting it, having given several conference
papers and demonstrations. Her second email interview was delayed
because she was demonstrating the software in another city when I sent
the questions, and did not have time to respond promptly.
Interviewees definitely hoped that other people would be encouraged
to adopt the software because of their recommendations. One person
expressed strong disappointment that no other libraries in her region
had adopted the software she had demonstrated, even though it was
easy to install and use, and also provided functionality that was not part
of standard ILS offerings.
One explanation for these types of voluntary activities is that the
interviewees felt a commitment to the software, because of their positive
experiences with it. They wanted to encourage other people to gain
the same type of experience by sharing their stories. This highlights a
difference between FLOSS and proprietary software: public servants
may be discouraged from promoting proprietary products, because
this could be seen as a conflict of interest under the applicable code of
conduct. However, because promoting a FLOSS package does not involve
recommending a specific supplier, there is no conflict of interest.
Several other interviewees also mentioned that FLOSS was important
to them for philosophical reasons. One developer made the point that
he had worked on open source projects exclusively since , and
another said that he and other members of his project team were “open
source fans”, releasing their software under a FLOSS license because
they believed it was the right thing to do.
. measuring satisfaction with a floss project 
. measuring satisfaction with a floss project
The previous section shows that there are a wide range of factors that
contribute to participant satisfaction with a FLOSS project, and that
these do not overlap with the existing measures of satisfaction with
information systems/software discussed in Section . on page .
In order to answer the main research question for this research, it
was therefore necessary to develop a scale to measure participant satis-
faction with their experience of a FLOSS project. This research used a
characteristic-based approach to measure satisfaction. Section .. on
page  showed that there was considerable variation in the underlying
dimensions of satisfaction measured by different instruments developed
in previous research. The individual dimensions from previous research
were compared to the broad themes identified in Section . on page 
in order to develop an initial list of items considered to be particularly
appropriate in a FLOSS context.
This list contained the following  items (in alphabetical order):
. easy to add new features;
. easy to configure to meet local needs;
. easy to install;
. easy to learn;
. easy to use;
. free from bugs;
. functionality;
. helpfulness of community;
. quality of documentation;
. release frequency; and
. reliability.
Items , , , and  appeared on the list of system dimensions of satis-
faction, and were also mentioned by interviewees, suggesting that they
were important characteristics and should be included in this research.
Items , , , , and  were mentioned by more than one interviewee,
and were included because they were judged to be key characteristics of
a FLOSS environment, based on the researcher’s understanding from her
ongoing document review of project email discussion lists. Item , easy
to learn, was included because one interviewee noted that the FLOSS
system had a ’steep learning curve’, and this was a characteristic not
reflected in the other items. Finally, item  was included because the
FLOSS projects selected for ongoing document review in Stage a varied
 individual perspectives on satisfaction
considerably in their release frequency, which was another characteristic
not reflected in the other items.
The initial list was reviewed by a FLOSS developer, and several FLOSS
users, to ensure that it had face validity, and that it covered dimensions
they considered to be most important. Bryman and Bell (, p.)
defined face validity as the extent to which the scale measures the
underlying concept, and said that one way of establishing it is to ask
other people. One additional item was added as a result of this review,
security and access control. In addition, the meaning of ‘reliablity’ was
clarified with the addition of “(i.e., doesn’t freeze, crash, or lose data)”
to make it clear that it was the reliability of the software that was being
assessed, as opposed to the reliability of the information the system
provided. The final list of attributes used in the survey was:
. easy to add new features;
. easy to configure to meet local needs;
. easy to install;
. easy to learn;
. easy to use;
. free from bugs;
. functionality;
. helpfulness of community;
. quality of documentation;
. release frequency;
. reliability (i.e. doesn’t freeze, crash, or lose data); and
. security and access control.
Definitions of these attributes were not included in the survey itself,
since this would have made it longer, which could have decreased the
response rate. This means that individual respondents may have in-
terpreted the meaning of the attribute slightly differently, leading to
ambiguity in the results. However, since none of the people involved
in the pilot test raised any questions about the meaning of any of these
items, the list was considered to be sufficiently clear on its own.
 This was treated as a single item, since LIM FLOSS projects typically treat both as part of
the system administration module. In multi-user systems, they refer to the ability to create
individual user accounts with different levels of access to the various system modules.
. summary 
. summary
This chapter discussed the results of the Stage b interviews that illus-
trated interviewees’ individual perspectives on satisfaction. It showed
that documentation was the aspect of the FLOSS project that was dis-
cussed most often, followed by community helpfulness and specific
software characteristics. Their underlying attitude towards FLOSS ap-
peared to have a significant influence on some interviewees’ satisfaction,
even when they had similar experiences with the software. It concluded
with a discussion of the development of a scale to measure participant
satisfaction with a FLOSS project for the Stage  web-based survey.

7
S U RV E Y R E S U LT S A N D M O D E L T E S T I N G
This chapter begins by reviewing the research model presented in Figure
 on page , and then presents the results of the web-based survey, be-
ginning with descriptive statistics showing the pattern of responses. The
chapter concludes with the inferential statistics that test the constructs,
model and hypotheses.
. research model review
The research model presented in Figure  on page  included nine
constructs that were considered potential predictor variables influenc-
ing participant satisfaction with a FLOSS project. The individual per-
spectives on satisfaction discussed in Chapter  on page  included
additional constructs, such as attitude. Each new construct was con-
sidered for inclusion in a revised model, particularly in terms of its
relevance to the main research question, its relationship to constructs
in the preliminary research model, and the nature of its influence on
satisfaction. This last point applied Oliver’s distinction between factors
that influence someone’s initial decision to select a product or service
(“choice selectors”), and those that influence satisfaction (“satisfaction
drivers”) (, p.) to each new concept.
The interviewees generally indicated that being able to control costs
was one of their reasons for choosing a FLOSS product, which implies
that it is more likely to be a choice selector than a satisfaction driver.
In addition, survey respondents would need to have budget authority
in order to be able to provide meaningful answers to questions about
cost, which might have discouraged or disqualified potential survey
respondents. Therefore cost was not included as a component of the
model.
Attitudes toward the potential benefits of FLOSS were also considered
for inclusion in the model. This is also likely to be a choice selector
rather than a satisfaction driver, though it could also be what Oliver
() termed a “dual influence factor”, meaning that it affects both
initial choice and subsequent satisfaction. Since the primary purpose of
the research was to measure satisfaction drivers, attitude was not added
to the model. A further reason for excluding attitude from the model
was that all respondents had already chosen to use FLOSS software,
which suggested that the range of responses would be limited. To see if
this was the case, questions about attitude to FLOSS were included in
the survey, to measure the spread of attitudes across respondents.

 survey results and model testing
Figure  on the next page shows the final version of the research
model tested in this research, including the number of items for each
factor included in the survey. There are no changes from the preliminary
model in Figure  on page . The hypothesis numbers are not included.
. survey results part 
This section presents the results of the web-based survey.
.. Project name
Question  asked respondents to name the project on which they
would base their answers to subsequent questions. Some respondents
entered a local variation of the project name, rather than the name of the
underlying project, and five others listed more than one project. Since
the purpose of this research was not to compare individual projects, but
rather to identify which factors contribute to respondents’ satisfaction
with the software, these responses were included in the subsequent
analysis. One reason for this was that the document analysis of some
projects indicated that a few organisations integrated two or more FLOSS
projects into a single local application, and it might not have been
possible for any respondents from these organisations to restrict their
responses to a single project.
The list of software that was generated from this question included
integrated library systems (Koha, Evergreen, PhpMyBiblio, repository
software (DSpace, EPrints, Kete), wiki engines (ikiwiki, MediaWiki), dig-
ital library software (Greenstone), blogging software (WordPress), web
content management software (Drupal, Joomla!, Mambo), and signon
management software (Shibboleth). In the cases where the respondent
had used a local name or a generic term such as ‘institutional repository’,
the underlying software could not be identified, and it was assumed
that the specific implementation was based on a FLOSS package. Koha
was named most often, by  respondents, followed by DSpace (). The
distribution had a long tail of  projects that were named by just one
person.
.. Length of time using or contributing to the project
Table  on page  shows the length of time respondents had been
using or contributing to the project. Only a small proportion, .% (
respondents) had been involved with the project for more than  years,
while .% () people had been involved with it for less than  months.
The largest proportion of respondents was in the  to  years category,
suggesting that the typical respondent was familiar with the software,
and had a realistic perspective on its development history and future.
Figure : Research model with items

 survey results and model testing
Table : Length of time using or contributing to project
length of time n %
Less than  months  .
Between  months and one year  .
– years  .
– years  .
– years  .
– years  .
More than  years  .
Total  .
.. Project roles
Questions  and  asked respondents to indicate their current role in
the project, and to indicate any other roles they had held, if any. As with
the list of projects in Section .. on page , there was considerable
variation in the data respondents provided in answering these questions,
and as the literature review found, there was little standardisation in the
terms respondents used to identify their current and previous roles. A
majority of respondents (, or .%) indicated a single current role,
while  (.%) indicated two roles, and  (.%) three. One respondent
named four current roles: implementer, documentor, integrator, user.
A total of  different current roles were identified by the survey
respondents. The most common was ‘user’, named by  (.%) re-
spondents; the next most common roles were developer ( or .%),
maintainer ( or .%), and trainer ( or .%). Fifty respondents
(.%) indicated that they were solely users, with no other current
role, though  of these (.%) had previously held other roles, such
as developer or trainer. Several respondents indicated formal positions,
such as library manager ( respondents), repository manager ( respon-
dents), systems administrator ( respondents), while others identified
specific types of contributions to a FLOSS project, such as bug reporter
(), bug triager (), content creator (), or website designer (). A few
respondents added adjectives to qualify their roles, naming them as
‘advanced user’, ‘experimental user’, or ‘high end user’. One respondent
was a self-described ‘[Project] ambassador: news/marketing/advocacy’.
The most common combination of roles was ‘developer/maintainer’,
which suggests that respondents see the two roles as distinct and need-
ing to be specified separately, or that they see it as a single role without
 This term means “assessment according to quality” (‘triage’, OED Online  October
), and is more commonly used in military, emergency room, or disaster response
contexts, where it refers to classifying injured or ill people according to the severity of
their condition.
. survey results part  
an agreed single descriptive term. Only two respondents used the term
‘core developer’ and one the term ‘committer’, suggesting that this ter-
minology for project roles is not widely used in the projects represented
in the responses. Overall the roles relating to working with code were
generic, and only a few individual responses named specific roles such
as ‘bug triager’ or ‘interface designer’. This confirms the findings of
Stage  of this research, which suggested that most FLOSS projects
have only a small number of formal roles and positions, and that most
participants have an informal role in the community.
The roles included in the responses to question , which asked
about other roles respondents had held in the project, followed a similar
pattern, but were slightly more varied, including ‘development sponsor’
and ‘event organizer’. One person indicated that she had been on the
board of the project’s non-profit governing foundation.
All of the types of contributions identified in Section . on page 
were included in the responses, with roles relating to use, interaction
with code, and interaction with community the most frequent. The
least frequent type of contribution was governance, mentioned by only
one person. Both types of organisational focus were mentioned, with
a number of respondents naming roles that were related to their local
work with the software, such as metadata specialist, library team leader,
and manager, library services. Some of the respondents showed that they
were aware of this distinction; in one example, the respondent qualified
the role of developer by adding “in terms of customizing the software
for my library”.
.. Hours per week spent working on the project (internal/shared version)
Table  on the following page shows the average number of hours
per week respondents spent working with the software in the last six
months, for both a local implementation and for the shared/community
version. The results show that respondents are generally more involved
with their local implementation than the community project: the median
response for time spent in a role relating to the local implementation
was – hours, and for the community project less than  hours. Fewer
than % of the respondents spent more than  hours per week in
a role relating to either version. This suggests that most people use a
range of other software, work on other FLOSS projects, or have other
jobs, rather than having a full-time role relating to the software they
identified in their response to Question .
.. Paid project time
Question  asked respondents to indicate what proportion of their time
working on the project had been paid for. Table  on the next page
 survey results and model testing
Table : Hours per week spent working on the project
hours per week
n
(local)
%
(local)
n
(shared)
%
(shared)
None  .  .
less than  hours  .  .
– hours  .  .
– hours  .  .
– hours  .  .
more than 
hours  .  .
Total  .  .
shows that a majority of respondents (.% or ) were paid for at
least some of the time they spent working with the software. However,
the results also show that .% () are paid for less than % of the
time they work on the project, suggesting that they have a commitment
or interest in the project that goes beyond their formal employment.
Table : Paid proportion
paid proportion n %
None  .
Less than %  .
Between % and %  .
Between % and %  .
Between % and %  .
Total  .
.. Activities carried out
Question  of the survey asked respondents to indicate which activities
they had carried out with the software/project by choosing from a
list of  generic activities. These activities covered five of the seven
types of activity identified from the qualitative stage of this project.
Management and governance activities were not included because only
a small number of interviewees indicated they were involved in them.
Table  on page  lists them in descending order of frequency. The
results show that the five most common activities survey respondents
were engaged in cover four of the categories (Use, Code, Community,
and Outreach), with over % of respondents indicating that they had
. survey results part  
customised the software for local conditions, and two-thirds engaging
in outreach activities. The least frequent activities were fixing bugs
and adding new functionality, and only % () of respondents had
provided resources to support the project. One explanation for the low
frequencies reported for fixing bugs and adding new functionality is
that these require considerable familiarity with the way the software is
designed and structured, and only a small number of respondents had
this knowledge. However, contributing local changes back to the project
was more frequent than either fixing bugs or adding new functionality.
Since the respondents represented many countries, some of whose first
language is not English, as shown in Table  on page , some of these
local changes may have been translations of the user interface, which
respondents are unlikely to have considered bug fixes or adding new
functionality.
Question  gave respondents an opportunity to describe other ways
they had contributed to the project, and  respondents (.%) took
advantage of this. In most cases they provided additional detail about
the activities they had chosen in response to question , but a small
number of respondents identified activities that were not on the list.
These were two people who had taken part in governance activities,
one who had translated the interface to another language, one who
ran a local user group, and one who had funded specific changes and
then contributed them back to the community. Since these additional
activities represented less than % of respondents, no further analysis
was done of these responses.
.. Impact of Training
Table  on page  shows respondents’ assessment of the impact of
any training they had undertaken on their use of the software. There is a
noticeable difference in the proportion of people who commented on for-
mal training versus those who had undertaken self-study, with roughly
% responding about formal training, and over % on self-study. This
suggests that self-study is the most common way of learning to use a
LIM-related FLOSS package. A majority of those who commented on
formal training chose ‘somewhat’ or lower as their response with only
.% () indicating that training provided by outside organisations
had affected their use of the software ‘considerably’ or ‘extensively’. The
results for in-house training are only slightly more positive, with .%
() choosing ‘considerably’ or ‘extensively’. In contrast, approximately
three-quarters of respondents felt that their self-study had a ‘consider-
able’ or ‘extensive’ impact, for both tutorials or online help, or manuals
and other documentation.
Table : Activities carried out
activity n % type
Used the software  . Use
Installed the software  . Code
Joined the project’s email discussion
list/forum
 . Community
Customised the software to meet local
needs, either yourself, or by having a
developer do so
 . Code
Promoted the project by talking about it to
others, for example at a conference
 . Outreach
Evaluated existing software functionality  . Use
Upgraded the software to a more recent
release
 . Code
Asked a question on the project’s email
discussion/list forum
 . Community
Studied the source code to see how it
works
 . Code
Written documentation to help others use
the software
 . Community
Reported a bug to the system developers  . Code
Answered a question on the project’s email
discussion list/forum
 . Community
Requested an enhancement from the
system developers
 . Code
Contributed local changes back to the
project
 . Code
Distributed the software to others  . Community
Promoted the project by writing about it
for publication
 . Outreach
Organised an event relating to the project,
such as a meeting or conference
 . Outreach
Provided resources to support the project,
such as hosting an email discussion list,
forum or wiki
 . Resources
Written software to add new features  . Code
Fixed one or more bugs  . Code

. survey results part  
Table : Impact of Training
type not at
all
very
little
somewhat consider-
able
extensive
Provided by
outside
organisations
(n= 113)
.%
()
.%
()
.%
()
.%
()
.%
()
In-house
(n= 115)
.%
()
.%
()
.%
()
.%
()
.%
()
Self-study using
tutorials or
online help
(n= 169)
.%
()
.%
()
.%
()
.%
()
.%
()
Self-study using
manuals or other
documents
(n= 164)
.%
()
.%
()
.%
()
.%
()
.%
()
This table shows that self-study using tutorials or online help was
more common, and perceived as more effective, than the other two types
of training. This is shown clearly in Figure  on page .
Question  asked respondents to identify any other training they
received that affected their use of the software. Very few people an-
swered this question, with several commenting that no training was
available. Others noted that training in using other software had been
useful in understanding the FLOSS package they were commenting on,
and several mentioned receiving demonstrations or training from other
users of the software. Three mentioned formal education, such as an
MLIS or an MSc in Computer Science.
.. Satisfaction with software features
Question  asked respondents to indicate their general level of satis-
faction with  aspects of the project. Table  on the following page
summarised the results. The results show that satisfaction with specific
features varies. Some respondents are satisfied with a particular aspect
of their chosen FLOSS project, while others are dissatisfied with it.
Figure  on page  shows the box plots of respondents’ satisfaction
with each of the features, while Figure  on page  shows a box plot
for the mean satisfaction. The box plots show that individual ratings of
satisfaction with project characteristics vary, with a number of outliers.
The means for satisfaction range from . for documentation to .
for reliability; the standard deviations are between . (functionality) and
Table : Satisfaction with project features
feature
not at
all
satisfied
slightly
satisfied
somewhat
satisfied
quite
satisfied
completely
satisfied
easy to add new features
(n= 151)
.%
()
.%
()
.%
()
.%
()
.%
()
easy to configure to
meet local needs
(n= 174)
.%
()
.%
()
.%
()
.%
()
.%
()
easy to install
(n= 156)
.%
()
.%
()
.%
()
.%
()
.%
()
easy to learn
(n= 179)
.%
()
.%
()
.%
()
.%
()
.%
()
easy to use
(n= 182)
.%
()
.%
()
.%
()
.%
()
.%
()
free from bugs
(n= 181)
.%
()
.%
()
.%
()
.%
()
.%
()
functionality
(n= 181)
.%
()
.%
()
.%
()
.%
()
.%
()
helpfulness of
community
(n= 166)
.%
()
.%
()
.%
()
.%
()
.%
()
quality of
documentation
(n= 181)
.%
()
.%
()
.%
()
.%
()
.%
()
release frequency
(n= 159)
.%
()
.%
()
.%
()
.%
()
.%
()
reliability
(n= 181)
.%
()
.%
()
.%
()
.%
()
.%
()
security and access
control
(n= 165)
.%
()
.%
()
.%
()
.%
()
.%
()

. survey results part  
Figure : Impact of Training (%)
. (easy to install). Overall, reliability, helpfulness of community, and
security and access control are rated most highly, while documentation
and ease of adding new features receive the lowest mean satisfaction
scores. When the mean satisfaction is calculated from the individual
scores, the resulting distribution is closer to normal, with only a single
outlier as shown in Figure  on the next page.
.. Perceived experience relative to others involved in the project
Table  on page  summarises respondents’ answers to question ,
which asked them to rate four aspects of their own experience relative
to other people involved in the project. The overall results show that
a majority of respondents felt they had as much or more experience
than others. Using a FLOSS package is likely to require more experience
than proprietary software, in part because the projects often lack good
documentation, as discussed in Section .. on page . Figure 
on page  shows a box plot of the distributions for each aspect of
experience, which shows that respondents with low levels of perceived
experience relative to others using this type of software are outliers.
Although this weighting to more experienced respondents introduces
a bias in the results, the means for experience ranged from . (as a
member of a software development project) to . (using computers in
general). This shows that overall, respondents had a range of different
types of experience relative to other members of the FLOSS project
community.
Figure : Box plots of satisfaction with project characteristics
Figure : Box plot of mean overall satisfaction

Table : Experience relative to others involved in the project
aspect
consider-
ably
less
slightly
less
about
the
same
slightly
more
signifi-
cantly
more
Using this type of software
(n= 179)
.%
()
.%
()
.%
()
.%
()
.%
()
Using this particular
software package (n= 178)
.%
)
.%
()
.%
()
.%
()
.%
()
Using computers in
general
(n= 177)
.%
()
.%
()
.%
()
.%
()
.%
()
As a member of a software
development project
(n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
Figure : Box plot of experience relative to others involved in the project

 survey results and model testing
.. Characteristics of developer communication
Respondents were asked to indicate their agreement with nine state-
ments about the project’s developers, and the results are summarised in
Table  on the current page. The results show a strong positive rating,
with fewer than % of respondents choosing ‘Disagree’ or ‘Strongly
disagree’ for any of the statements.
Table : Developer communication characteristics
characteristic
strongly
dis-
agree disagree neutral agree
strongly
agree
Sensitive to other’s needs
(n= 159)
.%
()
.%
()
.%
()
.%
()
.%
()
Get right to the point
(n= 150)
.%
()
.%
()
.%
()
.%
()
.%
()
Pay attention to what other
people say (n= 155)
.%
()
.%
()
.%
()
.%
()
.%
()
Deal effectively with others
(n= 150)
.%
()
.%
()
.%
()
.%
()
.%
()
Easy to understand
(n= 155)
.%
()
.%
()
.%
()
.%
()
.%
()
Say the right thing at the
right time (n= 146)
.%
()
.%
()
.%
()
.%
()
.%
()
Easy to communicate with
(n= 152)
.%
()
.%
()
.%
()
.%
()
.%
()
Respond to messages
quickly (n= 142)
.%
()
.%
()
.%
()
.%
()
.%
()
Express ideas clearly
(n= 153)
.%
()
.%
()
.%
()
.%
()
.%
()
.. Project culture
Question  covered several aspects of the project’s culture, including
encouragement to contribute to the project and its development cycle
and plans. Table  on the facing page summarises the responses to
this question. It is clear from the responses that people feel there is
general encouragement for community members to contribute to the
project, but there is also a sense that people who have contributed do not
necessarily feel that their contributions are valued, since ‘Neutral’ is the
most frequent response to this statement. In contrast, there is a strong
sense that survey respondents value the contributions other people have
. survey results part  
made to the project, with .% () of respondents choosing ‘Agree’
or ‘Strongly agree’.
Table : Project culture
characteristic
strongly
dis-
agree disagree neutral agree
strongly
agree
I feel encouraged to
contribute (n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
Anyone is encouraged to
contribute (n= 177)
.%
()
.%
()
.%
()
.%
()
.%
()
Only a few people are
allowed to contribute
(n= 173)
.%
()
.%
()
.%
()
.%
()
.%
()
I find other people’s
contributions valuable
(n= 176)
.%
()
.%
()
.%
()
.%
()
.%
()
Other people find my
contributions valuable
(n= 171)
.%
()
.%
()
.%
()
.%
()
.%
()
Information about future
developments is easy to
find (n= 176)
.%
()
.%
()
.%
()
.%
()
.%
()
The future development
plans are clear (n= 174)
.%
()
.%
()
.%
()
.%
()
.%
()
The project has infrequent,
formal releases of new
versions (n= 170)
.%
()
.%
()
.%
()
.%
()
.%
()
The project has frequent
releases of incremental
versions (n= 170)
.%
()
.%
()
.%
()
.%
()
.%
()
.. Influence on software features/functionality
Questions  and  asked respondents to assess the amount of influence
they have had on the software locally and on the version available for
downloading by others. Table  on the next page presents the results.
It shows that .% () of users feel that they have had much or very
much influence on the local version, with almost the same proportion
(.%, or ) assessing their impact on the shared version as ‘very
little or none’.
 survey results and model testing
Table : Influence on software features/functionality
version none
very
little
influence
moderate
influence
much
influence
very
much
influence
Internal
(n= 180)
.%
()
.%
()
.%
()
.%
()
.%
()
Shared
(n= 181)
.%
()
.%
()
.%
()
.%
()
.%
()
.. Perceived complexity
The final question of the survey asked about the perceived system com-
plexity and the perceived task complexity.
Perceived system complexity
Two sub-questions asked respondents to assess the complexity of the
software’s requirements and its design. The results are summarised in
Table  on this page. They show that .% () of the respondents
judged the software they chose as the basis for their responses was as
complex (‘Agree’ or ‘Strongly agree’), while .% () did not feel this
was the case (‘Disagree’ or ‘Strongly disagree’). Slightly more (.%, or
) felt that it had a complex design, compared with .% () who
felt that it didn’t.
Table : System complexity
strongly
dis-
agree disagree neutral agree
strongly
agree
Complex
requirements
(n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
Complex design
(n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
Task complexity
Question  also had two sub-questions that asked respondents to judge
the complexity of the tasks they completed using the software. Table 
on the next page summarises the results.
Overall the results show that a majority of respondents agreed or
strongly agreed with the statements, indicating that they judge the tasks
they carry out with the software to be straightforward.
. survey results part  
Table : Task complexity
when working with this
software . . .
strongly
dis-
agree disagree neutral agree
strongly
agree
I have clear planned goals
and objectives (n= 180)
.%
()
.%
()
.%
()
.%
()
.%
()
I know what I am
responsible for (n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
I know exactly what other
people expect of me
(n= 178)
.%
()
.%
()
.%
()
.%
()
.%
()
.. Other comments
The final question in the online survey gave respondents an opportu-
nity to provide additional comments about their use of the software,
their involvement in the project, or reasons for their satisfaction/dis-
satisfaction. Approximately % ( of ) of the survey respondents
provided a comment, though five of these just said ‘No’ or ‘None’. Of
the respondents who provided meaningful data, four commented on
the survey itself, with one saying it was too long and this was a barrier
to completion (though this person did complete the survey), and one
said that the survey seemed to assume that they “liked the software”.
Two pointed out that the question about developer communication was
difficult to answer for FLOSS projects that had a modular structure
with many thousands of contributors of themes and plug-ins. This is a
legitimate criticism of the survey design; in addition, this comment is
a good illustration of the range of FLOSS projects used in information
management and the differences between them.
The remaining  comments had considerable variation, with the
most common themes relating to the respondent’s local implementation
of the software, the respondent’s role in the project, and the experience
of dealing with the project community. The most common type of com-
ment provided additional detail about the respondents’ experiences of
using the software and/or their perceptions of its strengths and weak-
nesses, particularly the aspects they were dissatisfied with, or felt could
be improved. Others provided additional context for their responses,
particularly to do with their role in the project and their satisfaction
with it. One comment focused on the ability to customise the software,
saying “The ability to customize/modify the source code to the software
has made all the difference in the world. Like other packages, it only
addressed % of our needs. But I could add the remaining % myself”.
Two respondents commented on aspects of the software/project that
 survey results and model testing
had changed in ways that decreased their satisfaction with it, which
confirms that their reported satisfaction was a cumulative judgement
based on experience. One said that her responses would have been very
different a year ago, because the developers had become less responsive
over time.
The most dissatisfied respondent (who rated all of the project charac-
teristics in question  ‘Slightly satisfied’ or ‘Not at all satisfied’), had
not managed to install a working version of the software, despite follow-
ing the instructions “to the letter”. Other people with low satisfaction
ratings commented on their perception that the software was complex,
and difficult to change. One person noted that none of his questions
to the project’s email discussion list had been answered, and said that
while he supported FLOSS in general, he would only recommend this
project with several caveats, and that he was no longer considering us-
ing it himself. This shows the importance of participant satisfaction in
promoting the software to potential new users, since people who are
dissatisfied with it are likely to make only qualified recommendations.
. scale construction
This section presents the results of the tests for the reliability and va-
lidity of the measurement scales, and concludes with a description of
which items were retained and how the final values were calculated to
test the revised research model and hypotheses. These tests were carried
out in order to ensure that the data had sufficient reliability to be used
in the subsequent analysis, particularly the multiple regression. Some
of the scales had been used in previous research, and had been shown
to have Cronbach’s alpha values close to or above the recommended
threshold value of ., as indicated in Section .. on page . However,
their reliability was retested for this research, to confirm that the scales
retained their psychometric properties in this context.
Scale construction followed an iterative process. First, Cronbach’s
alpha was constructed for the initial scales, to test the internal reliability
of each scale and identify any items that reduced reliability. The items
included in the scale were modified as necessary to achieve a satisfactory
initial value. Once the components of each scale had been identified,
a factor analysis on the remaining items checked that each item had
a satisfactory loading on its primary factor. Items that did not have
satisfactory loadings on their primary factor were removed from the
scales, and Cronbach’s alpha was recalculated as necessary. This process
was repeated until both approaches suggested that the data were as
reliable as possible. Once this was done, the mean value was calculated
for each scale from the remaining items, and this value was then used
in the subsequent regression calculations.
. scale construction 
.. Knowledge and skills
Question  measured participant knowledge and skills, asking respon-
dents to rate their knowledge and skills with seven aspects of technology
and software development, using a -point scale ranging from ‘minimal’
to ‘extensive’. The initial Cronbach’s alpha value based on standardised
values was . which was higher than the recommended threshold of
.. Table  on the current page shows the corrected item–total correla-
tions and estimated value of Cronbach’s alpha if the item was removed
from the scale. Knowledge and use of hardware has the lowest corrected
item–total correlation, and therefore the results of the factor analysis for
this item were examined closely to see how well it loaded on the overall
factor. This is discussed in Sections .. on page  and .. on
page .
Table : Knowledge and Skills Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Knowledge and use of hardware . .
Knowledge and use of operating
systems
. .
Knowledge and use of one or more
programming languages
. .
Knowledge and use of LIM
application software
. .
Ability to provide information to
develop LIM application software
. .
Ability to define LIM software
requirements
. .
Ability to assess LIM application
software features
. .
.. Training
Question  measured participant training, with  items that asked
respondents to indicate how any training they received affected their
use of the software using a -point scale ranging from ‘not at all’ to
‘extensively’. Participants could also choose a ‘n/a’ response to indicate
that the question did not apply to them. The initial Cronbach’s alpha
value based on standardised values was ., which was lower than the
 survey results and model testing
recommended threshold value of .. Table  on this page shows the
corrected item–total correlations and estimated value of Cronbach’s
alpha if the item was removed from the scale.
Table : Training Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Training provided by outside
organisations
. .
In-house training . .
Self-study using tutorials or online
help
. .
Self-study using manuals or other
documentation
. .
Because the corrected item–total correlations were all close to or below
the recommended threshold value of . and and the alpha value would
not have been raised by removing any items, the construct was removed
from the model, and not used in subsequent analysis.
The scale used in this research was based on Guimaraes, Staples, and
McKeen (), who used five questions that covered general courses
at a community college or university, training provided by vendors or
outside consultants, in-house courses, self-study using tutorials, and
self-study using manuals and printed documents. Their results had an
alpha of ., which they interpreted as indicating suitable reliability.
However, after considering the wording of the individual items and
the results of this research, it became clear that the questions did not
express a coherent underlying construct, since differences in location or
source of training may not be related to training effectiveness. The data
from the current study suggest that a different approach to measuring
the effectiveness of training is needed, particularly for a FLOSS context.
This is supported by the differences in response numbers shown in Table
 on page , which suggests that survey respondents’ training experi-
ence was too varied for this approach to measuring training effectiveness
to be appropriate.
.. Satisfaction
Question  measured participant satisfaction, asking respondents to
rate their satisfaction with  dimensions of the software and project
using a -point scale ranging from ‘not at all satisfied’ to ‘completely sat-
isfied’. The initial Cronbach’s alpha value based on standardised values
. scale construction 
was ., which was higher than the recommended threshold value of ..
Because the corrected item–total correlations were all higher than the
recommended threshold value of . and the alpha value would not have
been raised by removing any items, all  items were included in the
scale. Table  on this page shows the corrected item–total correlations
and estimated value of Cronbach’s alpha if the item was removed from
the scale.
Table : Satisfaction Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Easy to add new features . .
Easy to configure to meet local needs . .
Easy to install . .
Easy to learn . .
Easy to use . .
Free from bugs . .
Functionality . .
Helpfulness of community . .
Quality of documentation . .
Release frequency . .
Reliability . .
Security and access control . .
.. Experience
Question  measured participant experience, asking respondents to
rate four aspects of their experience relative to their perceptions of
other people involved in the project. The initial Cronbach’s alpha value
based on standardised values was ., which was higher than the rec-
ommended threshold value of .. Because the corrected item–total
correlations were all higher than the recommended threshold value of
. and and the alpha value would not have been raised by removing
any items, all  items were included in the scale. Table  on the next
page shows the corrected item–total correlations and estimated value of
Cronbach’s alpha if the item was removed from the scale.
 survey results and model testing
Table : Experience Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Using this type of software . .
Using this software package . .
Using computers in general . .
As a member of a software
development project . .
.. Developer communication quality
Question  measured developer communication quality, asking respon-
dents to rate nine characteristics of the developers’ communication with
the community using a -point scale ranging from ‘strongly disagree’
to ‘strongly agree’. The initial Cronbach’s alpha value was ., which
was higher than the recommended threshold value of .. Because the
corrected item–total correlations were all higher than the recommended
threshold value of . and and the alpha value would not have been
raised by removing any items, all nine items were included in the scale.
Table  on this page shows the corrected item–total correlations and
estimated value of Cronbach’s alpha if the item was removed from the
scale.
Table : Developer Communication Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Sensitive to other’s needs . .
Get right to the point . .
Pay attention to what others say . .
Deal effectively with others . .
Easy to understand . .
Say the right thing at the right time . .
Easy to communicate with . .
Respond to messages quickly . .
Express ideas clearly . .
. scale construction 
.. Process openness
Question  items a–e measured process openness, asking respondents
to rate the project’s openness to contributions from themselves and oth-
ers, using a -point scale ranging from ‘strongly disagree’ to ‘strongly
agree’. Item c was reverse coded for the scale evaluation. The initial
Cronbach’s alpha value was ., which was higher than the recom-
mended threshold value of .. Table  on the current page shows the
initial corrected item–total correlations and estimated value of Cron-
bach’s alpha if the item was removed from the scale.
Table : Process Openness Scale Validation 
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
I feel encouraged to contribute . .
Anyone is encouraged to contribute . .
Only a few people are allowed to
contribute . .
I value other contributions . .
Others value my contributions . .
Although the corrected item–total correlations were all higher than
the recommended threshold value of ., the value for ‘Others value
my contributions’ was ., as shown in Table  on this page. Because
this is close to the minimum acceptable value, Cronbach’s alpha was
recalculated for a modified version of the scale, leaving out ‘Others
value my contributions’, resulting in a value of ., a slight improvement
on the earlier one. The recalculated results are shown in Table  on
the next page. The discrepancy between the value respondents placed
on other project participants’ contributions and their perception that
their own contributions are valued suggests that their contributions are
valued more than they realise.
.. Product openness
Product openness was measured in Question  items f and g , which
asked respondents to rate the availability of information about the
future development plans of the project using a -point scale ranging
from ‘strongly disagree’ to ‘strongly agree’. The initial Cronbach’s alpha
value was ., which was higher than the recommended threshold of ..
Table  on the following page shows the initial corrected item–total
correlations, which were both higher than the recommended threshold
 survey results and model testing
Table : Process Openness Scale Validation 
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
I feel encouraged to contribute . .
Anyone is encouraged to contribute . .
Only a few people are allowed to
contribute . .
I value other contributions . .
of .. Because this scale had only two items, there is no meaningful
value for Cronbach’s alpha if the item was deleted.
Hulin and Cudeck () suggested caution when using Cronbach’s
alpha with two-item scales, since it can underestimate the reliability of
the scale. In this case the value is above the recommended threshold,
implying that the scale is sufficiently reliable to be retained in the
analysis.
Table : Product Openness Scale Validation
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
Information about future
development plans is easy to find . n/a
The future development plans are
clear . n/a
.. System complexity
Question  items a and b measured system complexity, asking respon-
dents to rate the complexity of the software using a -point scale ranging
from ‘strongly disagree’ to ‘strongly agree’. The initial Cronbach’s alpha
value was ., which was higher than the recommended threshold of
.. Table  on the next page shows the corrected item–total correla-
tions, which were both higher than the recommended threshold of ..
Because this scale had only two items, there is no meaningful value for
Cronbach’s alpha if the item was deleted.
With only two items, Hulin and Cudeck’s cautions again needed to
be considered (). Since the value of Cronbach’s alpha is higher
. scale construction 
than the recommended threshold value, the scale was considered to be
sufficiently reliable to be retained in the analysis.
Table : System Complexity Scale Validation
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
Software has complex requirements . n/a
Software has a complex design . n/a
.. Task complexity
Question  items c–e measured task complexity, which related to the
degree of certainty and structure respondents had in the tasks they
carried out with the software/project. These asked respondents to rate
the complexity of the tasks they carry out using the software using a
-point scale ranging from ‘strongly disagree’ to ‘strongly agree’. The
data were reverse-coded so that high values indicated more complexity.
The initial Cronbach’s alpha value was ., which was higher than
the recommended threshold of .. Table  on this page shows the
corrected item–total correlations and estimated value of Cronbach’s
alpha if the item was removed from the scale. Because the corrected
item–total correlations were all higher than the recommended value of
. and and the alpha value would not have been raised by removing
any items, all  items were included in the initial factor analysis.
Table : Task Complexity Scale Validation
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
Clear planned goals . .
Know what I am responsible for . .
Know what other people expect of
me . .
.. Initial factor analysis
A factor analysis was done for the independent variables using Principal
Component Analysis (PCA) with Oblimin rotation and Kaiser normali-
 survey results and model testing
sation. The Kaiser-Meyer-Olkin (KMO) measure of sampling adequacy
was ., which is ‘meritorious’ (de Vaus , page ); in addition,
the KMO values for individual items were all higher than ., which
indicates an adequate sample size for factor analysis (Field , p.).
Bartlett’s test of sphericity χ2(465) = 2483.30,p < .001, indicated that
the correlations between items were sufficient for PCA to be an appro-
priate technique (Field , p.). The rotation converged in  iter-
ations, identifying eight factors with eigenvalues greater than Kaiser’s
criterion of . These eight factors explained .% of the variance. Table
 on page  shows the structure matrix from the factor analysis, and
Table  on page  has the pattern matrix. Field also recommended
including both the pattern and structure matrixes when using oblique
rotation, since relationships between factors can sometimes affect the
pattern matrix (, p. ). The structure matrix, which takes these
relationships into account, therefore provides additional validation for
the results of the factor analysis. Only factors with loadings greater than
. have been included in the tables, following Field’s recommendation
(, p.). To simplify the tables, the statements for each item have
been assigned codes, which are shown in Table  on the next page.
Table  on page  contains a matrix showing the correlations
between the eight components that were identified in the factor analysis.
It shows that there were small correlations (all less than .) between
the eight factors. This confirms that using an oblique rotation technique
was suitable for the data, because the factors are not independent (Field
, p.). This correlation between the variables is not a significant
concern, because they are all in the small to medium range.
Analysing the structure and pattern matrices showed that all items
associated with the experience, developer communication, process open-
ness, product openness, and system complexity scales had their maxi-
mum loading on the expected components, confirming that they were
acceptable as factors. However, the knowledge and experience items
were split between two components, with knowledge of hardware and
knowledge of operating systems loading most strongly on one factor,
and knowledge of LIM application software, system design, software
requirements, and assessing LIM software on a second. Item KnowSkill
relating to knowledge of one or more programming languages appeared
to load on two separate factors, one that related to technical knowledge
and skills, and the other to experience. This suggests that there are
two underlying factors in the data, representing ‘technical skills and
knowledge’ and ‘LIM-specific skills and knowledge’.
Cronbach’s alpha was recalculated for these as separate scales. Details
of these calculations are in Sections .. on page  and .. on
page .
Table : Item statement codes
code statement
DevComm Sensitive to other’s needs
DevComm Get right to the point
DevComm Pay attention to what other people say
DevComm Deal effectively with others
DevComm Easy to understand
DevComm Say the right thing at the right time
DevComm Easy to communicate with
DevComm Respond to messages quickly
DevComm Express ideas clearly
Exp Using this type of software
Exp Using this software package
Exp Using computers in general
Exp As a member of a software development project
ProdOpen Information about future development plans is easy to find
ProdOpen The future development plans are clear
ProcOpen I feel encouraged to contribute
ProcOpen Anyone is encouraged to contribute
ProcOpen Only a few people are allowed to contribute
ProcOpen I value other contributions
SysComplex Software has complex requirements
SysComplex Software has a complex design
TaskComplex Clear planned goals
TaskComplex Know what I am responsible for
TaskComplex Know what other people expect of me
KnowSkill,
TechKnow
Knowledge and use of hardware
KnowSkill,
TechKnow
Knowledge and use of operating systems
KnowSkill,
TechKnow
Knowledge and use of one or more programming
languages
KnowSkill,
LimKnowSkill
Knowledge and use of LIM application software
KnowSkill,
LimKnowSkill
Ability to provide information to develop LIM application
software
KnowSkill,
LimKnowSkill
Ability to define LIM software requirements
KnowSkill,
LimKnowSkill
Ability to assess LIM application software features

Table : Factor analysis structure matrix
item        
DevCom . .
DevCom .
DevCom .
DevCom .
DevCom .
DevCom .
DevCom .
DevCom . .
DevCom .
KnowSkill .
KnowSkill .
KnowSkill .
KnowSkill .
SystComplex .
SystComplex .
ProdOpen .
ProdOpen .
TaskComplex -. .
Exp -.
Exp . -.
Exp . -.
Exp -.
KnowSkill -. .
KnowSkill .
KnowSkill .
TaskComplex .
TaskComplex -. .
ProcOpen -. .
ProcOpen .
ProcOpen . .
ProcOpen . . .

Table : Factor analysis pattern matrix
item        
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
KnowSkill .
KnowSkill .
KnowSkill .
KnowSkill .
SysComplex .
SysComplex .
ProdOpen .
ProdOpen .
TaskComplex −.
Exp −.
Exp −.
Exp −.
Exp −.
KnowSkill .
KnowSkill .
KnowSkill .
TaskComplex .
TaskComplex .
ProcOpen −.
ProcOpen .
ProcOpen .
ProcOpen .

 survey results and model testing
Table : Component correlation matrix
component
Dev
Comm
Know
Skill
Sys
Comp
Prod
Open Exp
Know
Skill
Task
Comp
Proc
Open
DevComm . . −. . −. . −. .
KnowSkill . . −. . −. . −. .
SysComp −. −. . −. −. . . −.
ProdOpen . . −. . −. . −. .
Exp −. −. −. −. . −. . −.
KnowSkill . . . . −. . −. .
TaskComp −. −. . −. . −. . -.
ProcOpen . . −. . −. . −. .
.. Technical knowledge and skills scale validation
This new scale had three items, all relating to technical knowledge and
skills. The initial value of Cronbach’s alpha was .. Table  on the
current page shows the corrected item–total correlations, which were all
higher than the recommended threshold of .. However, it also shows
that removing the third item would increase reliability slightly, and so
Cronbach’s alpha was recalculated for the remaining two items.
Table : Technical Knowledge and Skills Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Knowledge and use of hardware . .
Knowledge and use of operating
systems . .
Knowledge and use of one or more
programming languages . .
The recalculated alpha was .. Table  on the facing page shows
the corrected item–total correlations for this revised calculation, which
were both higher than the recommended threshold of .. Because this
scale had only two items, there is no meaningful value for Cronbach’s
alpha if the item was deleted. Because of this improvement in alpha,
this third item was considered for removal from the scale. In particular,
the results of the second iteration of the factor analysis, discussed in
Section .. on page , were examined closely to see how the factor
loadings for the item relating to programming languages compared to
. scale construction 
the other two items considered part of the technical knowledge and
skills scale.
Table : Technical Knowledge and Skills Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Knowledge and use of hardware . n/a
Knowledge and use of operating
systems . n/a
.. LIM-specific knowledge and skills scale validation
This new scale had four items, all relating to application software for
the LIM field. The initial value of Cronbach’s alpha was ., which
was higher than the recommended threshold value of .. Because the
corrected item–total correlations were all higher than the recommended
threshold value of . and and the alpha value would not have been
raised by removing any items, all four items were included in the scale.
Table  on this page shows the corrected item–total correlations and
estimated value of Cronbach’s alpha if the item was removed from the
scale.
Table : LIM-specific Knowledge and Skills Scale Validation
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
Knowledge and use of LIM
application software . .
Ability to provide information to
develop LIM application software . .
Ability to define LIM software
requirements . .
Ability to assess LIM application
software features . .
 survey results and model testing
.. Process openness scale confirmation
The factor analysis also showed that one item expected to be on the Pro-
cess Openness scale (ProcOpen : I value other people’s contributions)
loaded most strongly on the Task Complexity scale, with a loading of
., compared with . for process openness. This item was therefore
dropped from the scale, and Cronbach’s alpha was recalculated for the
revised scale, giving a value of .. The results of the recalculation are
shown in Table  on the current page. These show that removing the
third item would increase alpha slightly, and so Cronbach’s alpha was
recalculated for the remaining two items.
Table : Revised Process openness Scale Validation 
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
I feel encouraged to contribute . .
Anyone is encouraged to contribute . .
Only a few people are allowed to
contribute . .
The recalculated alpha was .. Table  on this page shows the
corrected item–total correlations for this revised calculation, which
were both higher than the recommended threshold of .. Because this
scale had only two items, there is no meaningful value for Cronbach’s
alpha if the item was deleted. Because of this improvement in alpha,
this third item was considered for removal from the scale. In particular,
the results of the second iteration of the factor analysis in .. on the
next page were examined closely to see how the factor loadings were for
the item ‘Only a few people are allowed to contribute’ compared to the
other two items considered part of the Process openness scale.
Table : Revised Process openness Scale Validation 
item
corrected
Item–total
correlation
cronbach’s
alpha if
item
deleted
I feel encouraged to contribute . n/a
Anyone is encouraged to contribute . n/a
. scale construction 
.. Task complexity scale confirmation
The factor analysis showed that one item expected to be on the Task
Complexity scale (TaskComplex: I know exactly what other people
expect of me) loaded most strongly on the Process Openness scale, with
a loading of ., compared with . on Task Complexity. This item was
therefore dropped from the scale, and Cronbach’s alpha was recalcu-
lated for the revised scale, giving a value of ., which is lower than
the recommended threshold of .. A summary of the results of the
recalculation is in Table  on this page. Since the recalculation resulted
in a lower value of alpha than the original, the wording and relevance
of the items relating to task complexity were considered further, par-
ticularly because the items associated with this factor had the lowest
communalities in the factor analysis. De Vaus (, p.-) defined
communality as the extent to which the variance in the item is explained
by the extracted factor. A high value indicates that the factor and the
item have a good fit, while a low value indicates that the variable should
be dropped from the analysis. The communalities for all of the other
items in the factor analysis were above ., with most above .. How-
ever, the communalities for the items on the Task Complexity scale were
all below ., suggesting that the data from these items did not relate
to a single underlying construct, and the construct was therefor removed
from the model.
Table : Revised Task complexity Scale Validation
item
corrected
item–total
correlation
cronbach’s
alpha if
item
deleted
Clear planned goals . n/a
Know what I am responsible for . n/a
.. Final factor analysis
Field (, p.) recommended repeating the factor analysis once the
final scales have been determined to confirm that deleting items has not
changed the factor structure. The results of this identified seven factors,
as expected. The results showed that one of the items considered for
removal, KnowSkill, relating to knowledge and use of one or more
programming languages, continued to have similar loadings on two
different factors, and this was therefore dropped from the scale. The
other item considered for removal, ProcOpen, loaded cleanly on the
 survey results and model testing
same factor as the other two ProcOpen items, and it was therefore
retained in the subsequent analysis.
The final factor analysis had a Kaiser-Meyer-Olkin (KMO) measure of
sampling adequacy of ., which is ‘meritorious’ (de Vaus , page
); in addition, the KMO values for individual items were all higher
than ., which indicates an adequate sample size for factor analysis
(Field , p.). Bartlett’s test of sphericity χ2(325) = 2224.29,p <
.001, indicated that the correlations between items were sufficient for
PCA to be an appropriate technique (Field , p.). The rotation
converged in  iterations, identifying seven factors with eigenvalues
greater than Kaiser’s criterion of . These seven factors explained .%
of the variance. Table  on page  shows the structure matrix from
the factor analysis, and Table  on page  has the pattern matrix.
Only factors with loadings greater than . have been included in the
tables.
Table  on the next page and Table  on page  show the results
of the final factor analysis. To make the distinctions between the factors
clearer, the KnowSkill items have been renamed LIMKnowSkill and
TechKnow.
The results show that all items have the highest loadings on their
primary factors in both the pattern matrix and the structure matrix,
though there are some that also loaded on other factors, particularly in
the structure matrix. The primary loadings in the pattern matrix are
all higher than ., suggesting that the items for each construct have
adequate convergent validity (Hair et al. , p.). In addition, the
cross loadings in the structure matrix are all lower than ., suggesting
that the factors have adequate discriminant validity (Hair et al. , p.
).
Some of the items relating to developer communication also loaded
on the product and process openness, and some of the items relating to
experience also loaded on LIM skills and knowledge. It is reasonable
to expect to find relationships between these constructs, since percep-
tions of product and process openness may be affected by the way the
developers communicate with other members of the project. Experience
is also likely to increase skills and knowledge. However, the tables also
show that most of the items load onto a single component, suggesting
that the other components are independent, as could be expected.
.. Other variables
The model included two additional components that were not treated as
scales in the same way as other variables. These two items were Extent
of Participation, and Perceived Influence.
Extent of participation was calculated as the total number of different
activities the respondent had carried out. Question  had a list of the
Table : Final factor analysis pattern matrix
      
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm . .
DevComm .
LimKnowSkill .
LimKnowSkill .
LimKnowSkill .
LimKnowSkill .
SysComplex .
SysComplex .
ProdOpen .
ProdOpen .
Exper −.
Exper −.
Exper −.
Exper −.
TechKnow .
TechKnow .
ProcOpen .
ProcOpen .
ProcOpen .

Table : Final factor analysis structure matrix
      
DevComm . .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm .
DevComm . .
DevComm .
LimKnowSkill .
LimKnowSkill .
LimKnowSkill .
LimKnowSkill .
SysComplex .
SysComplex .
ProdOpen .
ProdOpen .
Exper . −.
Exper . −.
Exper −.
Exper −.
TechKnow .
TechKnow .
ProcOpen .
ProcOpen . .
ProcOpen . . .

. scale characteristics 
Table : Final component correlation matrix
component
Dev
Comm
LIM
Know
Skill
Sys
Comp
Prod
Open Exp
Tech
Know
Skill
Proc
Open
DevComm . . −. . −. . .
LIMKnowSkill . . −. . −. . .
SysComp −. −. . −. −. . −.
ProdOpen . . −. . −. . .
Exp −. −. −. −. . −. −.
TechKnowSkill . . . . −. . .
ProcOpen . . −. . −. . .
 most common activities identified in the first stage of this project,
and respondents indicated which of these they had done.
Perceived influence was more challenging to measure, because partic-
ipants could influence their local version of the software, or the commu-
nity version shared with others. The difference between these values was
expected to vary between participants, depending on where they were
most active. As Table  on page  shows, most respondents indicated
that they had more influence on their local version than on the shared
version. Using a mean of the two values, as originally planned, would
have tended to lower the values. Therefore this construct was measured
using the maximum of the two values.
. scale characteristics
Table  on the following page shows the number of items, Cronbach’s
alpha, mean, standard deviation, and the correlations between each
scale and their one-tailed significance.
It shows that correlations between the variables are mostly low to
moderate (between . and .), with some that are moderate to sub-
stantial (between . and .), according to de Vaus (, p.). As
expected, the most significant relationships are between the outcome
variable and a majority of the predictor variables, with the strongest
relationships between process openness and satisfaction (.), and de-
veloper communication and satisfaction (.). Both relationships are
significant at p<. or lower. Technical knowledge and skills has the
lowest correlation with satisfaction (., not significant), falling in the
middle of the range de Vaus terms ‘trivial’ (, p.). In addition,
there are some moderate correlations between several of the predictor
variables. The highest are between extent of participation and expe-
Table : Scale characteristics
co
rr
el
at
io
ns
a
sc
al
e
no
.o
f
it
em
s
al
ph
a
m
ea
n
s.
d.










Sa
tis
fa
ct
io
n
(o
ut
co
m
e
va
ri
ab
le
)


.


.

.


Te
ch
ni
ca
l
kn
ow
le
dg
e
an
d
sk
ill
s

.


.

.

.


LI
M
kn
ow
le
dg
e
an
d
sk
ill
s

.


.

.

.

∗
.

∗
∗

Ex
pe
ri
en
ce

.


.


.

.

∗
∗
.

∗
∗
.

∗
∗

D
ev
el
op
er
co
m
m
un
ic
at
io
n

.


.

.

.

∗
∗
.

.

.


Pr
oc
es
so
pe
nn
es
s

.


.

.

.

∗
∗
.

∗
.

∗
.

∗
.

∗
∗

Pr
od
uc
to
pe
nn
es
s

.


.

.

.

∗
∗
.

.

.

.

∗
∗
.

∗
∗

Sy
st
em
co
m
pl
ex
ity

.


.


.

−.


∗
∗
.

∗
∗
−.


∗
.

−.


∗
−.


∗
∗
.


Ex
te
nt
of
pa
rt
ic
ip
at
io
n

n/
a


.


.

.

∗
∗
.

∗
∗
.

∗
∗
.

∗
∗
.

∗
∗
.

∗
∗
.

∗
.



M
ax
im
um
in
flu
en
ce

n/
a

.


.

.

∗
∗
.

∗
.

∗
∗
.

∗
∗
.

∗
∗
.

∗
∗
.

∗
∗
−.


.

∗
∗
a *=p<. **=p<. or lower (one tailed)

. model testing 
rience (.), and product openness and process openness (.), again
significant at p<. or lower.
System complexity behaves differently from the other variables. It
has a moderate negative relationship with satisfaction, and with process
openness, but a positive correlation with technical knowledge and skills.
These relationships are all significant at p<. or lower. It also has
low negative correlation with LIM knowledge and skills, developer
communication, and process openness, but no significant correlation
with experience or product openness. This negative relationship with
satisfaction is plausible, since people who perceive the software as
complex are likely to be less satisfied than people who do not; it is
also reasonable that people who feel that the project’s activities are less
open to outsiders will perceive increased complexity. Finally, people
with higher technical skills are likely to be working on more complex
software, so this relationship is also reasonable.
Table  on the preceding page also shows a number of low to mod-
erate correlations between the other variables, some of which are also
statistically significant. There are correlations between experience and
knowledge and skills, between extent of participation and experience,
and knowledge and skills. People develop their skills and knowledge
in part by gaining experience with software, and these correlations con-
firm that relationship. Both process openness and product openness
have a moderate positive correlation with developer communication,
significant at p<. or lower. This is again logical, since perceptions of
process and product openness are only likely to occur when there is
good communication with developers. Extent of participation also has a
moderate correlation with maximum influence, significant at p<. or
lower. This confirms that participants need to be involved in the project
in some way in order to influence its direction.
Although these correlations show that there are relationships between
some of the predictor variables, none of these is in the substantial range,
and the data were therefore judged to be suitable for regression analysis.
. model testing
Stepwise multiple regression was used to test the relationships between
the variables and their influence on participant satisfaction. de Vaus
explained that the goal of stepwise regression is to produce the sim-
plest model that explains the variance in the dependent variable, and
eliminate variables that have little or no effect (, p.–). Field
noted that stepwise regression also shows the increase in variance each
additional independent variable adds to the model (, p.).
The first step was to ensure that the data met the requirements for
carrying out multiple regression: first, that the sample size was large
enough, and second, that multicollinearity was not an issue. Field (,
 survey results and model testing
p.) said that the number of independent variables and the goal of the
regression calculation both determine the minimum sample size. For
testing an overall model, the desired number is 50+ 8k, where k is the
number of variables; for testing the individual predictors, the minimum
recommended sample size is 104+ k. This research was interested in
both, so the minimum number of cases needed is the larger of the two
values, which is . The number of cases used in the analysis was ,
which was above this number.
Multicollinearity occurs when there are significant correlations be-
tween the predictor variables that could affect the results. The data were
examined for potential multicollinearity problems using the process
outlined in de Vaus (, p.).
This began by examining the bivariate correlations between the pre-
dictor variables. Field suggested that correlations should be below .
(, p.). As Table  on page  shows, all of the correlations
were low to moderate, and none was high or very high. The next step
was to consider the diagnostic statistics resulting from the multiple
regression calculation. The two key statistics are the variable inflation
factor (VIF) and the tolerance measure. de Vaus recommended that VIF
values should be less than , and tolerances higher than . in order to
be confident that multicollinearity is not an issue (, p.). All of
the predictor variables met these requirements, as shown in Table  on
the current page.
Table : Multicollinearity diagnostics
variable vif tolerance
Mean process openness . .
Mean developer
communication
. .
Mean complexity . .
Extent of participation . .
Mean product openness . .
Maximum technical
knowledge
. .
Mean LIM knowledge . .
Mean experience . .
Maximum influence . .
The final step required testing the data to ensure that they had a nor-
mal distribution. This was done by examining the distribution pattern
of the residual values for the variance in satisfaction that remained after
the multiple regression calculation. It involved examining a histogram
. model testing 
and scattergram of the residuals (Figure  on this page and Figure 
on the next page).
Figure : Residual histogram following stepwise regression
Both of these show that the residuals have a normal distribution, with
no obvious skew. Further support for the independence of the predictors
came from the value of the Durbin–Watson statistic, which tests whether
the residual errors are correlated. The value was .; Field says that if
this value is close to , it indicates that the assumption that they are not
correlated has been met (, p.).
.. Regression results
The results of the stepwise regression showed that five variables ex-
plained .% of the variance in satisfaction, as shown in Table  on
the following page. The ANOVA output, which tests the significance
level, showed that all results were significant at ., meaning that the
null hypothesis is not supported, and that the change in R2 appears to
be due to a real pattern in the data (de Vaus , p.).
Mean process openness was the most influential predictor of mean
satisfaction, accounting for % of the variance, followed by mean
Figure : Residual scattergram following stepwise regression
Table : Model Summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .

c . . . . . .   .

d . . . . . .   .

e . . . . . .   .
a (Constant), Process Openness
b (Constant), ProcessOpenness, Developer Communication
c (Constant), Process Openness, Developer Communication, Complexity
d (Constant), Process Openness, Developer Communication, Complexity, Extent of Partici-
pation
e (Constant), Process Openness, Developer Communication, Complexity, Extent of Partici-
pation, Product Openness

. model testing 
developer communication (a further .%), and mean complexity (a
further .%). The final form of the regression equation is
Satisfaction= 1.51+(.22 ∗ProcessOpenness)
+(.22 ∗DeveloperCommunication)
−(.19 ∗Complexity)
+(.03 ∗ExtentOfParticipation)
+(.16 ∗ProductOpenness)
Table  on the current page shows the coefficients, standard error, beta,
T, and significance level for each variable.
Table : Coefficients
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Extent of Participation . . . . .
Product Openness . . . . .
The beta values represent standardised regression coefficients for
all variables, and are not dependent on the measurement units of the
variables. They show that complexity has the largest impact on satisfac-
tion, relative to the other variables, and product openness and extent of
participation the smallest.
.. Power analysis
Table  on the facing page showed that adjusted R2 was . for the
final model. For this effect size, the power level is over ., from the
table in Ellis (, p.), since the sample size of  was larger than
the minimum of  needed for a power level of .. This means that the
sample size in this research was large enough to detect a minimum effect
size of . at a power level of . (Ellis , p.), and the results can
be considered to represent a real effect in the population.
.. Moderated regression analysis
The research model that was tested in this research identified three
possible moderating variables: system complexity, process openness,
and product openness. They were considered as independent predictor
variables in the previous section. Table  on the current page shows
 survey results and model testing
that b2 was not zero for all three hypothesised moderator variables,
which already suggests that they are not pure moderators. Nonetheless,
the regression analysis was repeated, in order to test the hypothesised
research model fully. This section presents the results of testing whether
these variables acted as moderators of other relationships, rather than
affecting satisfaction directly.
Testing for moderation involves comparing three regression equations
(Sharma, Durand, and Gur-Arie , p.):
y= a+b1x (.)
y= a+b1x+b2z → R
2
add (.)
y= a+b1x+b2z+b3xz → R
2
mult (.)
where y is the outcome variable, that is satisfaction, x is the predictor
variable, and z the proposed moderator variable.
The first aspects of the results that needed to be considered were
the bi values. If z is a pure moderator, b2 will be zero; if it is a pure
predictor variable, with no moderating effects, b3 will be zero. If neither
b2 nor b3 is zero, then z may be what Sharma, Durand, and Gur-Arie
term a quasi-moderator (, p.), because it has an effect on both
the outcome and predictor variables.
However, on their own these tests are not sufficient to determine
whether a variable is acting as a predictor or a moderator. Carte and
Russell () said that to determine whether differences in the bi
values are significant, it is also necessary to consider whether the change
in R2 is significant. This is determined by calculating the value of F:
F(dfmult−dfadd,N−dfmult−1) =
(R2mult −R
2
add)/(dfmult −dfadd)
(1−R2mult)/(N−dfmult − 1)
If F is significantly greater than , then z is a moderator variable.
The first step involved calculating the xz values as the product of
the two independent variables being tested, and then centring the re-
sulting values by subtracting their means. This was done in order to
minimise the risk of multicollinearity problems (McKeen, Guimaraes,
and Wetherbe , p.).
The second step involved carrying out a regression analysis to deter-
mine the values of a, b1, b2, and R2 for the specific combinations of
interest.
Finally, the individual cross-products xz were tested in a more com-
plete model that incorporated the predictor variables identified in .
on page , to see if their behaviour changed.
. model testing 
Impact of system complexity on extent of participation and satisfaction
The research model being tested in this research identified system com-
plexity as a moderator of the relationship between participation and
satisfaction. The results of the regression calculations are shown in Table
 on the current page and Table  on this page.
Table : System complexity and participation model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .

c . . . . . .   .
a (Constant), Extent of Participation
b (Constant), Extent of Participation, Mean Complexity
c (Constant), Extent of Participation, Mean Complexity, Extent of Participation*Mean Com-
plexity
Table : System complexity and participation regression coefficients
equation regression equation f change sig.
 Satis = . + (.*Extent of Participation) . .
 Satis = . + (.*Extent of Participation)
− (.*Complexity)
. .
 Satis = . + (.*Extent of Participation )
− (.*Complexity) + (.*Extent of
Participation*Complexity)
. .
The results suggest that Model  and Equation  are a better fit to
the data than Model  and Equation , since there is no significant
change in R2 between Model  and Model . In addition, the F change
between models  and  is small, and Equation  is not statistically
significant. The value of b3 is also close to . Similar values were found
when Extent of Participation*Complexity was tested in the larger model.
These results suggest that in this context, System Complexity is acting
as an independent variable, not a moderator variable.
Impact of process openness on activity count and satisfaction
The results of the regression calculations are shown in Table  on the
next page and Table  on the following page.
The results suggest that Model  and Equation  are a better fit to the
data than Model  and Equation , since there is no significant change
in R2 between Model  and Model . In addition, the F change between
models  and  is small and Equation  is not statistically significant.
 survey results and model testing
Table : Process openness and participation model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .

c . . . . . .   .
a (Constant), Extent of Participation
b (Constant), Extent of Participation, Mean Process Openness
c (Constant), Extent of Participation, Mean Process Openness, Extent of Participation*Mean
Process Openness
Table : Process openness and participation regression coefficients
equation regression equation f change sig.
 Satis = . + (.*Extent of Participation) . .
 Satis = . + (.*Extent of Participation +
(.*ProcessOpenness)
. .
 Satis = . − (.*Extent of Participation
+ (.*ProcessOpenness) + (.*Extent of
Participation*ProcessOpenness)
. .
The value of b3 is also close to zero. Similar values were found when
Extent of Participation*ProcessOpenness was tested in the larger model.
These results suggest that in this context, Process Openness is acting as
an independent variable, not a moderator variable.
Impact of product openness on influence and satisfaction
The results of the regression calculations are shown in Table  on the
current page and Table  on the facing page.
Table : Product openness and influence model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .

c . . . . . .   .
a (Constant), Maximum influence
b (Constant), Maximum influence, Mean Product Openness
c (Constant), Maximum influence, Mean Product Openness, Maximum influence*Mean
Product Openness
The results suggest that Model  and Equation  are a better fit to the
data than Model  and Equation , since there is no significant change
. model testing 
Table : Influence and product openness regression coefficients
equation regression equation f change sig.
 Satis = . + (.*MaxInfluence) . .
 Satis = . + (.*MaxInfluence) +
(.*ProductOpenness)
. .
 Satis = . + (.*MaxInfluence) +
(.*ProductOpenness) +
(.*TotalActivity*ProcessOpenness)
. .
in R2 between Model  and Model . In addition, the F change between
models  and  is small and Equation  is not statistically significant.
The value of b3 is also close to zero. Similar values were found when
TotalActivity*ProcessOpenness was tested in the larger model. These
results suggest that in this context, Product Openness is acting as an
independent variable, not a moderator variable.
.. Type of participation and satisfaction
The proposal for this thesis assumed that it would be possible to assign
specific roles to survey respondents, in order to see if the factors that
influence satisfaction vary between roles. As the results of the Stage
b interviews suggested, and the data provided in response to ques-
tions  and  confirmed (discussed in Section .. on page ),
there is no agreed set of roles that participants in a FLOSS project take
on, and many people are involved in more than one type of activity.
However, the attributes identified in Section . on page  provide a
useful framework for comparing different aspects of participation and
satisfaction, as an alternative to considering participation by roles.
The survey data made it possible to classify respondents according to
three of these attributes: organisational focus, remuneration, and time
commitment. The data on roles were not structured in a way that made
it possible to distinguish between formal and informal project roles,
meaning that the effect of differences in this attribute could not be tested
further.
One point to note when reading the current section is that splitting
the data file reduces the number of responses being tested for each
value, which means that some of them fall below Field’s recommended
minimum sample size for multiple regression, discussed in Section .
on page . This means that the effect sizes may be overstated, and
caution is required in generalising these results.
 survey results and model testing
Organisational focus and satisfaction
Respondents’ organisational focus was determined by comparing their
responses to questions  a and b. If their response indicated that they
spent more hours per week working on their local implementation,
they were classed as having a local focus; if they spent more hours
per week working on the community version, they were classed as
having a community focus; and if the hours were the same range, they
were classed as ‘equal’. Table  on this page shows the results of this
classification. Since the number of people who spent equal amounts of
time with both aspects of the project was small, this group was combined
with those who spent more time working on the community project for
the subsequent analysis. The resulting two groups were named ‘local’
and ‘non-local’.
Table : Organisational focus
focus n %
Local  .
Equal  .
Project  .
Total  .
Once the two groups were classified, a regression analysis was carried
out by splitting the data based on the value of organisational focus. To
make it easy to compare the two groups, the five factors identified in
Section .. on page  were entered as a single block for the analysis
Table : Organisational focus model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .
a Local focus (n=)
b Non-local focus (n=)
The Durbin–Watson values for the two models were . and .
respectively; according to Field (, p.) their closeness to .
indicates that the residuals are uncorrelated. Other indicators of the
model’s reliability are also appropriate, since all VIFs were close to .
and all tolerances were above ..
The results show that the model is a slightly better fit for survey
respondents with a non-local organisational focus, accounting for .%
of the variance in satisfaction vs .%. In addition, the contribution of
. model testing 
Table : Local focus coefficients
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
Table : Non-local focus coefficients
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
each component of the model varies with the organisational focus, with
perceived complexity and developer communication having the most
impact (based on the beta values) for respondents with a local focus.
Process and product openness were the most important predictors of
overall satisfaction for respondents with a non-local focus.
Remuneration and satisfaction
Respondents’ remuneration focus was determined from their response
to question , which asked what proportion of their time spent working
on the project was part of their paid employment. Respondents were
classified into two groups: those who spent more than % of their time
working on the project as part of their paid employment, and those who
spent % or less. Table  on the following page shows the results
of this classification. These indicate that a significant proportion of
respondents contributed to the project on their own time, rather than as
part of their employment, suggesting that they have a personal interest
in the project’s success.
Once the two groups were classified, a regression analysis was carried
out by splitting the data based on the value of remuneration category.
The five factors identified in Section .. on page  were entered as a
single block for the analysis, to make it easy to compare the two groups.
 survey results and model testing
Table : Remuneration category
remuneration category n %
% or less  .
More than %  .
Total  .
Table : Remuneration category model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .
a % or less (n=)
b More than % (n=)
The Durbin–Watson value for the two models were . and .
respectively; according to Field (, p.) their closeness to .
indicates that the residuals are uncorrelated. Other indicators of the
model’s reliability are also appropriate, since all VIFs were close to .
and all tolerances were above ..
Table : % or less coefficients
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
The results show that the model is a somewhat better fit for survey
respondents who are paid for less than % of the time they work on the
project, accounting for . % of the variance in satisfaction vs .%. In
addition, the contribution of each component of the model varies with
the remuneration category, with developer communication and product
openness shown as the most important predictors of overall satisfaction
for respondents who are paid for a smaller proportion of their time. In
contrast, complexity and process openness have the largest impact for
respondents who are paid for most of their time working on the project.
. model testing 
Table : More than % coefficients
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
Time commitment and satisfaction
Respondents’ time commitment to the project was determined from
their responses to question  a and b, which asked them to categorise
the number of hours per week they spent working on their local im-
plementation of the software, and the same for the shared version.
Individual responses were converted to the mid-range of the category,
and added together to get a number approximating their total hours per
week. Based on this, respondents were ranked and then classified into
two equal size groups based on the median value.
Once the two groups were identified, a regression analysis was carried
out by splitting the data based on the value of remuneration category.
The five factors identified in Section .. on page  were entered as a
single block for the analysis, to make it easy to compare the two groups.
Table : Time commitment model summary
model r r2 adj.
r2
s. e.
est.
Δ r2 Δ f df df sig.
Δ f

a . . . . . .   .

b . . . . . .   .
a Below median (n=)
b Above median (n=)
The Durbin–Watson value for the two models were . and .
respectively; according to Field (, p.) their closeness to  indi-
cates that the residuals are uncorrelated. Other indicators of the model’s
reliability are also appropriate, since all VIFs were close to . and all
tolerances were above ..
The results show that the model is a somewhat better fit for survey
respondents who are above the median in terms of their time commit-
ment, accounting for .% of the variance in satisfaction vs .%. In
addition, the contribution of each component of the model varies with
the time commitment category. Complexity was the most important pre-
 survey results and model testing
Table : Below median
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
Table : Above median
variable b s. e. beta t sig.
(Constant) . . . .
Process Openness . . . . .
Developer Communication . . . . .
Complexity −. . −. −. .
Activity Count . . . . .
Product Openness . . . . .
dictor for both categories, but process openness was more important for
respondents below the median (i.e., those who spent less time) than for
those above it. Product openness was more important for respondents
above the median than those below the median.
. hypothesis testing
This section discusses whether the hypotheses proposed in the research
model are confirmed by the data, based on the results of the regression
analysis presented in Section . on page .
h The higher the perceived participant influence, the higher the par-
ticipant satisfaction.
not supported The results of the multiple regression analysis
showed that perceived participant influence had no signifi-
cant effect on participant satisfaction. Therefore, it was not a
predictor variable.
h The higher the perceived quality of developer communication, the
higher the participant satisfaction.
supported The results of the multiple regression analysis showed
that perceived developer communication quality has a stan-
dardised beta coefficient of ., significant at p<.. This
. hypothesis testing 
means that the hypothesis is supported, with perceived de-
veloper communication quality accounting for % of the
variation in satisfaction.
h There is a positive relationship between participant skills and knowl-
edge and participant satisfaction.
not supported The factor analysis showed that the questions
about participant skills and knowledge represented two un-
derlying constructs, technical knowledge and skills and LIM
knowledge and skills. Neither had any significant effect on
participant satisfaction in the regression equation.
h There is a positive relationship between participant training and
participant satisfaction.
untested This hypothesis could not be tested because the results
of the Cronbach’s alpha and factor analysis showed that this
construct lacked reliability, and was therefore not able to be
included in the statistical analysis.
h There is a positive relationship between participant experience and
participant satisfaction.
not supported The results of the multiple regression analysis
showed that participant experience had no significant effect
on participant satisfaction.
h There is a positive relationship between the extent of participation
and participant satisfaction.
supported The results of the multiple regression analysis showed
that extent of participation has a standardised beta coefficient
of ., significant at p<.. This indicates that the hypothesis
is supported, with extent of participation accounting for %
of the variation in satisfaction.
ha The greater the perceived system complexity, the greater the rela-
tionship between extent of participation and participant satisfac-
tion.
not supported The results showed that system complexity is an
independent predictor variable for satisfaction, rather than a
moderator variable. This means that they support a revised
hypothesis that there is a negative relationship between per-
ceived system complexity and participant satisfaction (hc).
hb The greater the perceived task complexity, the greater the relation-
ship between extent of participation and participant satisfaction.
untested hb could not be tested, because the results of the
Cronbach’s alpha and factor analysis showed that this con-
struct lacked reliability, and was therefore unable to be in-
cluded in the statistical analysis.
 survey results and model testing
ha The higher the perceived process openness, the greater the relation-
ship between extent of participation and participant satisfaction.
not supported The results show that perceived process openness
is not a moderator for the relationship between extent of
participation and satisfaction.
hb There is a positive relationship between process openness and
participant satisfaction.
supported The results of the multiple regression analysis showed
that process openness had a standardised beta coefficient of
., significant at p<.. This indicates that the hypothesis is
supported, with process openness accounting for % of the
variation in satisfaction.
ha The higher the perceived product openness, the greater the rela-
tionship between perceived participant influence and participant
satisfaction.
not supported The results show that perceived product openness
does not moderate the relationship between extent of partici-
pation and satisfaction, but that it acts as a predictor variable
for satisfaction.
hb There is a positive relationship between product openness and
participant satisfaction.
supported The results of the multiple regression analysis showed
that product openness had a standardised beta coefficient of
., significant at p<.. This indicates that the hypothesis is
supported, with product openness accounting for % of the
variation in satisfaction.
. revised research model
This section presents a revised research model, based on the results
of the regression testing presented in Section . on page . Figure
 on the next page illustrates the model, and shows the hypotheses,
beta values, and adjusted R2. Overall the model accounts for % of the
variance in survey respondents’ satisfaction.
The revised model suggests that a more appropriate hypothesis for
the relationship between system complexity and satisfaction is:
hc (new) The greater the perceived system complexity, the lower the
participant satisfaction.
The results showed that system complexity had a standardised beta
coefficient of −., significant at p<.. System complexity accounts for
% of the variation in satisfaction.
Figure : Revised research model

 survey results and model testing
. summary
This chapter presented the results of the quantitative analysis of the
web-based survey, including testing the reliability and validity of the
constructs and revising them as necessary. It then described the results
of the stepwise multiple regression, which showed that five constructs
accounted for % of the variability in satisfaction. Perceived process
openness was the single best predictor of satisfaction, but perceived
complexity had the largest effect with a beta of −. (p6.). The results
of the moderated regression analysis showed that none of the proposed
moderator variables had a significant moderating effect, and that they
were acting as predictor variables.
8
D I S C U S S I O N A N D I N T E R P R E TAT I O N O F F I N D I N G S
. introduction
This chapter discusses the research findings and their significance. It
begins with a discussion of the user-centric model of a FLOSS project
and its implications. This is followed by a discussion of the results of
the quantitative survey, including the measurement of the constructs,
the research model, and the hypothesis testing. The chapter discusses
the revised revised research model presented in Figure  on page ,
followed by a discussion of the results of the hypothesis testing and their
implications. It concludes with additional findings that were not part
of the original research objectives, but emerged from the demographic
characteristics of the survey respondents.
. a user-centric view of a floss project
Section .. on page  presented a user-centric view of the activi-
ties involved in a FLOSS project. In contrast with the typical code- or
developer-centric models found in the information systems literature,
this alternative model presents a broader view of the activities project
participants carry out to achieve the project’s goals. It is an example of
what Gregor termed a level I theory, intended to describe and analyse a
phenomenon (, p.).
.. Perspective is important
Taking an alternative perspective can change the way people perceive a
phenomenon. This is true for the physical environment, where people
who climb to the top of a hill have a different view than people at a lower
level. In a similar vein, in Edwin Abbott’s Flatland, a two-dimensional
square has difficulty understanding the concept of three dimensions
until it is shown that the one-dimensional point cannot conceive of two
dimensions ().
These examples show that basing a description of a phenomenon
on limited data may result in a flawed or partial understanding of the
phenomenon. This partial understanding can be useful as long as its
limitations are recognised and acknowledged. For example, the code-
centric model of a FLOSS project structure may be more relevant for
projects where the developers are also users of the software. One benefit

 discussion and interpretation of findings
of the alternative model proposed here is that it places the earlier code-
centric descriptions of FLOSS project structures in a broader context.
Gregor (, p.–) notes that descriptive theories are useful
for classifying and comparing phenomena. The proposed user-centric
model provides a number of options for this. The simplest would be
to use it as a framework for measuring the extent of FLOSS project
participant activity in each of the six categories: code, management,
community, sponsorship, outreach, and governance. This would show
whether any types of activity are being overlooked. As Section .. on
page  showed, most current FLOSS research places emphasis on the
code and governance categories, with the result that the other types of
activity are given little attention. This has the potential to create the
misleading impression that only people with good coding skills can
contribute to a project, when other types of activity, such as sponsorship
and outreach, are also important to long-term project sustainability. The
code-centric model also conveys the impression that what participants
value is contributing code; Studer’s research, which asked participants
in the KDE project to indicate how much prestige they assigned to
 different activities, found that while code was assigned the most
prestige, coordination, which falls in the ‘manage’ category, was also
highly ranked (). This suggests that the FLOSS contribution model
presented here is a better match to the way project participants view
participation options.
In addition, grouping the activities into the three categories of project
fitness, project viability, and project spirit provides a higher-level frame-
work for classifying and comparing FLOSS projects based on the extent
of participant activities in these groups. If projects are studied over
time, this has the potential to aid in identifying different patterns of
FLOSS project evolution. This would also allow researchers to examine
the relationship between the patterns of activity across the categories
and the extent of project growth. For example, projects with weak or
non-existent governance may be less productive because participants’
energy could be deflected into repetitive arguments about processes or
acceptable behaviour, rather than into constructive contributions in any
of the six outer categories.
.. Terminology matters
In , George Orwell wrote an essay titled Politics and the English
Language, in which he argued that writers must choose their words
carefully to encourage clear thinking. In a similar vein, Richard Stall-
man discourages the use of the term ‘intellectual property’, which he
argued causes confusion by grouping three dissimilar legal concepts
(copyright, trademarks, and patents) and thereby suggesting that they
are equivalent (). The research literature on FLOSS projects at times
. a user-centric view of a floss project 
shows similar confusion, for example, by using the term ‘developers’ to
refer to all members of a project’s community, or by implying that all
contributors are unpaid volunteers.
The results of this research have shown that participation includes
seven types of activity, only one of which involves interacting directly
with the code. The results of both stages of this research show that the
term ‘developers’ applies only to a subset of a project’s total community.
By using this term, researchers imply that they are only interested in one
type of participant—the developers who work with the project’s code. If
that is indeed the case, then the term ‘developers’ is appropriate, but
if it is not, their results may be biased because they do not include the
non-developers’ perspective. If the target population for the research is
the wider project community, a more inclusive term like ‘participant’ or
‘contributor’ would be more appropriate. This research followed that
practice, which may be a factor that led to the higher proportion of
women among its survey respondents than in previous FLOSS surveys.
In addition, using the phrase ‘open source’ reinforces a developer-centric
view, because it is natural to assume that only developers are interested
in access to source code, on the grounds that users lack the skills to
understand or change it, and are generally not interested in doing so.
A second term that is often used in FLOSS research literature is
‘volunteer’, which can also be misleading. A strict interpretation of
the word ‘volunteer’ implies that it refers only to the extent to which
participants choose to work on FLOSS projects, as opposed to doing so
because they are required to as part of their paid employment. However,
in modern use the term ‘volunteer’ also implies that contributors are
not paid for their work; when people speak of the ‘voluntary sector’,
they generally mean people who donate their time free of charge to
charitable projects.
Most research articles imply that FLOSS ‘volunteers’ are also un-
paid, illustrated by the following quotes: “The projects are distinctive
in that they rely on the efforts of a community of volunteer software
users and developers instead of paid managers and employees” (Shah
, p.); “OSS [open source software] is usually developed by
a community of voluntary participants” (Xu, Jones, and Shao ,
p.); “Participation is voluntary, and participants do not receive di-
rect compensation for their work” (Hars and Ou , p.); and “a
central dilemma of OSS development is what motivates developers to
contribute their time and skills ‘for free’ ” (Markus , p.).
These generalisations place emphasis on the extent to which FLOSS
participants are not paid for their work on the projects. A majority of
respondents to the web-based survey in this research were paid for at
least some of the time they worked on the FLOSS project, with only
.% receiving no payment. In most cases they would have been paid
by their employer, because they participate in the FLOSS project as part
of their employment during their regular work hours. However, only
 discussion and interpretation of findings
.% were paid for over % of their time, suggesting that many were
not paid for all of the time they spent contributing to the project. This is
a characteristic behaviour of many professionals, who often work more
than a standard -hour week, without direct remuneration for their
‘overtime’. In addition, many professionals engage in activities which
are not part of their normal duties in order to extend their skills and
knowledge, and respondents may see their involvement in a FLOSS
project as a form of professional development.
Because of differences in the way they collected their data, it is diffi-
cult to determine how many respondents to previous surveys were paid
for their work on FLOSS projects. David and Shapiro () reported
on employment status, but did not associate this with work on a specific
FLOSS project. Their findings showed that % of their respondents
were employed, % were students, and % were unemployed (,
p.). This distribution pattern is similar to previous studies, in partic-
ular Ghosh et al.’s  study, which showed that % of respondents
were employed, % students, and % unemployed. Kroah-Hartman,
Corbet, and McPherson’s  study of contributions to the Linux ker-
nel concluded that “over % of all kernel development is demonstrably
done by developers who are being paid for their work” (p.). These
examples, and the findings from this research, suggest that emphasising
the extent to which FLOSS project contributors are not paid misses the
point, and that a better approach might relate to the extent to which
their contributions are part of a formal role, whether within the FLOSS
project itself, or as part of their employment.
. factors that influence floss participant satisfaction
This section discusses the findings of the quantitative survey, beginning
with the measurement scales, and concluding with the research model
and hypotheses.
.. The measures
The results discussed in Section . on page  showed that most scales
performed as expected in terms of reliability (measured using Cron-
bach’s alpha) and validity (measured using factor analysis). Specifically,
perceived developer communication quality, participant experience,
extent of participation, and perceived system complexity all had Cron-
bach’s alpha values greater than the recommended threshold value of
., and had their maximum loadings on separate factors in the factor
analysis. In addition, the two new measurement scales, perceived prod-
uct openness and perceived process openness all met the recommended
minimum threshold of . for Cronbach’s alpha, and mapped clearly
onto separate factors in the factor analysis. However, the items associ-
. factors that influence floss participant satisfaction 
ated with three constructs had less satisfactory results. In particular, the
measures of training and task complexity were problematic, and were
dropped from the model because the data were not reliable. Secondly,
the measure of knowledge and skills appeared to represent two under-
lying concepts: LIM knowledge and skills, and technical knowledge and
skills.
The research also developed a new scale to measure the outcome
variable participant satisfaction, which was above the recommended
threshold value of . for Cronbach’s alpha.
Training scale
The items used for the training scale were first developed by Nelson and
Cheney (), and used by Guimaraes, Staples, and McKeen (),
who found that it had a Cronbach’s alpha of .. However, in the current
study it did not exhibit the same psychometric properties, having an
alpha value of ., and low values for Corrected item–Total correlation.
This suggested that the scale is not measuring a clearly-defined underly-
ing construct. This conclusion is supported by the descriptive results for
the scale shown in Table  on page . These show different patterns
for the various types of training specified in the individual items, with
the two items that relate to formal training having mainly low scores,
and the two items relating to self-study having mainly high scores. This
suggests that the scale is not measuring overall training effectiveness,
but how similar the various training options are to each other in terms
of effectiveness.
The respondents in the Guimaraes, Staples, and McKeen () study
were all primary users of software developed in-house, and could rea-
sonably be expected to have come from similar backgrounds, and had
similar training options for the software. The context for the current
study, FLOSS packages used in library and information management, is
considerably more diverse, which is illustrated by the range of countries
represented in the survey responses shown in Table  on page ,
and also the range of projects that are represented, discussed in Section
.. on page . The training options that were available to survey
respondents are likely to be equally diverse, leading to the observed
lack of reliability in the training measurement scale. Further research is
needed to identify more suitable items to measure training effectiveness
in a FLOSS context.
Task complexity scale
The task complexity construct was measured using items from a scale
developed by Rizzo, House, and Lirtzman (, first published in
) that related to role conflict and ambiguity. Though Rosenkrantz,
Luthans, and Hennessey () showed that it could be used in a range
of fields with acceptable psychometric properties, the data from the cur-
 discussion and interpretation of findings
rent study did not demonstrate these properties. In particular, the item
relating to knowing what other people expected of them loaded most
strongly on the process openness scale, and the remaining two items had
communalities below ., suggesting that they were measuring different
underlying concepts.
Task complexity and its relationship to satisfaction with software/sys-
tems have previously been measured in contexts that differ from the
current study in two ways: first, they involved software developed in-
house, rather than FLOSS, and they involved people who used the
information provided by the system, rather than using the system to
provide information to others. It is possible that this difference in con-
text affected the way respondents interpreted the scale, and it suggests
that further research into task complexity, as perceived by FLOSS LIM
project participants, is needed.
Knowledge and skills scale
The knowledge and skills scale was based on a scale first developed by
Torkzadeh and Lee (). Though the items that related to this con-
struct had a Cronbach’s alpha value of ., which is above the minimum
recommended value of ., the factor analysis showed that the items
mapped as separate factors, which were named ‘Technical knowledge
and skills’ and ‘LIM knowledge and skills’. The most likely explanation
for the difference in the properties of the scale in this research is that the
respondents to this survey were more diverse than those for previous
research that has used the scale. In earlier research, the respondents
have been primarily software users, and it is reasonable to expect that
their responses to all of the questions showed similar patterns. However,
the items that formed what this research termed ‘Technical knowledge
and skills’ had the lowest factor loadings in Torkzadeh and Lee’s original
study, close to ., while the other items had higher loadings (over .),
which suggests that they may represent a slightly different, but related
underlying construct. In this research, some of the respondents were
primarily developers, whose knowledge of LIM applications (covered
by the final four items) may have been very different to their knowledge
of hardware, operating systems, and programming languages, which
may have led to the clearer separation in the factor analysis.
.. The revised research model
The results of the regression analysis suggest that the model presented
in Figure  on page  is a better representation of the relationships
between the individual predictor variables and the outcome variable
than the original model presented in Figure  on page . Overall the
revised model explained % of the variation in satisfaction, which
is a moderate effect size according to Cohen (). The beta values
. factors that influence floss participant satisfaction 
show that perceived system complexity is the most important factor
influencing satisfaction, with a value of −., while perceived product
openness and extent of participation are the least important with values
of .. However, beta values for all the constructs fall within a relatively
small range (absolute values between . and .), and all are significant
at p6.. This shows that they all play a role in determining a FLOSS
project participant’s overall satisfaction.
One implication is that people involved in FLOSS project governance
and management activities may need to consider all of the factors if they
wish to raise participant satisfaction with the project, since focusing on
just one or two may not resolve underlying issues with other aspects.
In particular, if perceived system complexity is high, improving pro-
cess or product openness may not result in increased levels of overall
satisfaction.
.. The hypotheses
The original research model incorporated nine hypotheses, only four of
which were supported by the data. This section discusses the results for
each of the hypotheses in turn.
h The higher the perceived participant influence, the higher the par-
ticipant satisfaction.
The results showed that participant influence did not have a sig-
nificant effect on satisfaction, and the construct was therefore
removed from the model. Influence related to the extent to which
the respondent’s ideas and suggestions were implemented in the
software, or how these affected decisions relevant to the project.
Previous research examining the relationship between influence
and satisfaction has had mixed results. McKeen, Guimaraes, and
Wetherbe () found a statistically significant, positive corre-
lation between the two, while Guimaraes, Staples, and McKeen
() found no statistically significant relationship. The results
from this research are closer to those of the later study. The reasons
for this are unclear. One possibility is that the consensus approach
to decision-making found in many FLOSS projects means that par-
ticipants do not expect to be able to influence key decisions. This
could mean that they consider any influence they have had to be
unimportant when they assess their level of satisfaction with the
project. In addition, the way this research measured influence was
simple, involving two items, and using the maximum value in the
regression analysis. Further research into the nature of influence
in FLOSS communities might lead to the development of a more
robust set of items to measure influence, which would allow the
relationship to be retested.
 discussion and interpretation of findings
h The higher the perceived quality of developer communication, the
higher the participant satisfaction.
The results showed that perceived developer communication qual-
ity had a direct influence on satisfaction (β = .22, significant at
p6.). Perceived developer communication quality related to
the extent to which the developers were perceived as respond-
ing quickly and appropriately, as well as how easy they were
to understand. Since members of a FLOSS project community
are distributed geographically, typically relying on asynchronous
communication to make decisions, it makes intuitive sense that a
higher perceived quality of communication with developers will
be associated with a higher level of satisfaction.
One survey respondent provided a comment that indicates how
important this aspect of a FLOSS project was to him, saying:
“For open source library software to really thrive,
there must be more consideration given by the com-
munity to the newbie experience. If a potential user has
taken the time to research the software, downloaded and
installed it, and then has questions that they post about
problems, bugs, or configuration issues, the community
should have some level of commitment to respond. The
lack of response is a clear signal to me that the software
is simply not ready for my organization, or me person-
ally, to invest in.”
This comment makes the point that first impressions count by
emphasising that good communication is particularly important
for new users of the software. Another survey respondent had a
more positive view of developer communication (for a different
project), saying
“[T]he community is VERY helpful, and answers or
pointers are a few minutes away via IRC or via online
forums and/or documentation. I am glad to be part of
such a wonderful community.”
This comment was made in a reference to difficulties understand-
ing the software’s workflow, and it illustrates the positive effect
that good communication can have on members of the FLOSS
project’s community.
Previous research examining the relationship between perceived
developer communication quality and satisfaction has had mixed
results. McKeen, Guimaraes, and Wetherbe () found a low, but
statistically significant, positive correlation between the two, while
Guimaraes, Staples, and McKeen () found no statistically
significant relationship. The results from this research are closer to
those of the earlier study. McKeen, Guimaraes, and Wetherbe did
. factors that influence floss participant satisfaction 
not report beta values, meaning that it is not possible to compare
the current results directly with theirs. However, the results of this
study suggest that if members of a FLOSS project’s community
perceive that the quality of their communication with the project’s
developers is high, their level of satisfaction will be higher.
This has practical consequences for members of a project’s com-
munity. It suggests that they need to monitor communication
channels regularly, and ensure that questions, particularly those
from newcomers, are answered clearly and promptly. Though this
may be difficult to monitor if questions are answered privately,
rather than copied to the email discussion list or forum, a policy
that all responses are copied to the list or forum, unless a private
reply is requested, is common practice in FLOSS projects. Infor-
mation about the importance of this practice should be part of the
project’s core information about support options.
h There is a positive relationship between participant skills and knowl-
edge and participant satisfaction.
This hypothesis was not supported, and therefore the skills and
knowledge construct was removed from the model. Previous re-
search into the relationship between participant skills and knowl-
edge and satisfaction has had varying results, with Blili, Raymond,
and Rivard () and Jang () finding evidence to support
a statistically significant, positive relationship, while Palvia and
Palvia () found no significant relationship. The results of this
research are most similar to those of Palvia and Palvia, suggest-
ing that in a FLOSS context, other factors have more influence
on satisfaction than participant skills and knowledge. The FLOSS
projects that survey respondents identified were all collaborative,
involving contributions from many people, rather than being pri-
marily the work of a single individual. The results suggest that
the respondents may have placed more value on the results of this
collaboration than on their own contributions.
h There is a positive relationship between participant training and
participant satisfaction.
This hypothesis could not be tested because the results of the
Cronbach’s alpha and factor analysis showed that this construct
lacked reliability. This may have been because training in the use
of FLOSS projects is seldom available, meaning that participants
had no meaningful way of assessing its impact. The participant
training construct was therefore removed from the revised model.
In order to test this relationship, further research will be needed
to identify a suitable measure for training in the context of a
FLOSS project. Previous research into the relationship between
training and satisfaction has had varying results, with Sharma
 discussion and interpretation of findings
and Yetton () finding that correlations ranged from −. to
.. This relatively wide range suggests that there may have been
issues with the measurement scales used in the various studies,
and which supports the need for more research into this.
h There is a positive relationship between participant experience and
participant satisfaction.
This hypothesis was not supported, and therefore the participant
experience construct was removed from the revised model. Like
perceived influence and perceived quality of developer commu-
nication, previous research into the relationship between experi-
ence and satisfaction has had mixed results. Guimaraes, Staples,
and McKeen () found that there was a moderate–substantial
. correlation between experience and satisfaction, significant
at p6., while Lawrence and Low () found no significant
relationship. The results from this research are closest to those of
Lawrence and Low. The interpretation of this finding in a FLOSS
context is difficult to establish, though the results shown in Table
 on page  indicate that most respondents saw themselves as
having the same or more experience than other people involved
in the project. It is possible that testing the original model with a
larger and more diverse sample would have different results, which
suggests that further research, with a different sample, would be
useful.
h There is a positive relationship between the extent of participation
and participant satisfaction.
The results showed that extent of participation had a direct in-
fluence on satisfaction (β= .20, significant at p6.). This is con-
sistent with the results of previous research, which consistently
showed a positive relationship between participation and satisfac-
tion, though the strength of the relationship varied. The moderate
relationship found in the current research is slightly below the in-
tegrated effect size of . He and King found in their meta-analysis
of  studies that examined the relationship between participation
and satisfaction (). Since the studies He and King included all
involved conventional, in-house software development projects,
the similarity of the results suggests that participation plays a
similar role in a FLOSS project, and that participants will be more
satisfied if they are given opportunities to contribute to the project.
This suggests that people involved in FLOSS project governance,
management, and community support need to identify options for
different types of participation and make them known to members
of their community. Lists of suggested contributions can include
activities in any of the six categories: code, community, gover-
nance, management, outreach, and sponsorship. This should allow
. factors that influence floss participant satisfaction 
potential contributors to identify an option that is a good match
to their skills, which would then lead to wider participation. For
example, new users could document their experiences, and the
questions they had about the software. This would contribute to
the information available to potential users, and over time these
contributions have the potential to build into an effective user
guide.
ha The greater the perceived system complexity, the greater the rela-
tionship between extent of participation and participant satisfac-
tion.
This hypothesis was not supported. The results showed that system
complexity was an independent predictor variable for satisfaction,
rather than a moderator variable. The model was therefore revised
to show a direct relationship between perceived system complex-
ity and satisfaction. This differs from McKeen, Guimaraes, and
Wetherbe’s  finding that system complexity moderated the
relationship between participation and satisfaction. In the current
research, system complexity had a direct influence on satisfaction
(β = −.28, significant at p6.). The difference in behaviour of
this variable may be attributable to the difference in context be-
tween the current study and McKeen, Guimaraes, and Wetherbe’s.
Their research concerned conventional in-house software devel-
opment, where users receive support from other members of the
project team. The same type of support is not necessarily available
for participants in a FLOSS project, which may change the rela-
tionship between perceived system complexity and satisfaction.
Survey respondents who saw the software they were involved with
as complex had lower satisfaction. This issue is an inherent part
of the FLOSS context, illustrated by the following quote from a
survey respondent:
“[T]he very factor that is most appealing, the ability
to customize, seems to render the products’ [sic] docu-
mentation ambiguous at best and unhelpful at worst.”
It shows that there is a tension between the freedom to change
the software to meet local needs, and the added complexity this
can add to the environment. Because of this, it is perhaps not
surprising that perceived complexity had the highest beta value in
the multiple regression, which shows that it has the most impact
on satisfaction in comparison to the other factors.
hb The greater the perceived task complexity, the greater the relation-
ship between extent of participation and participant satisfaction.
This hypothesis could not be tested, because the results of the
Cronbach’s alpha and factor analysis showed that this construct
lacked reliability. The scale used for the construct was originally
 discussion and interpretation of findings
developed for use in measuring task ambiguity, and may not have
been appropriate in a FLOSS context. The task complexity scale
was a modified version of the -item scale developed by Rizzo,
House, and Lirtzman (), which had previously been found to
have an alpha value of between . and .. McKeen, Guimaraes,
and Wetherbe used it successfully in their  study of user
satisfaction with in-house application software. However, in this
research, survey respondents based their responses on a range of
FLOSS packages used for different business purposes; some were
using transaction-processing systems like Koha, others digital
library/repository software like Greenstone and DSpace, and a
third group based their answers on web content management
systems or wiki engines. The specific tasks respondents carried
out with these packages would have varied considerably, which
may be one explanation for the lack of reliability in the data.
Another explanation may be that the complexity of the tasks they
carried out varied with their roles. In order to test this relationship,
further research will be needed to identify an effective measure
of task complexity in the context of a FLOSS project, and whether
there is a relationship between tasks carried out and role, whether
formal or informal.
ha The higher the perceived process openness, the greater the relation-
ship between extent of participation and participant satisfaction.
The results showed that perceived process openness was not a
moderator for the relationship between extent of participation
and satisfaction, and this relationship was therefore removed from
the revised model. Since this relationship had not been tested
previously, this hypothesis was one of two possibilities identified
from the literature review. The results for the second possibility,
hb, are discussed below.
hb There is a positive relationship between process openness and
participant satisfaction.
The results showed that process openness had a direct influence on
satisfaction (β= .23, significant at p6.). This suggests that per-
ceived process openness acts as a predictor variable for satisfaction,
with the moderated regression results showing that process open-
ness accounted for % of the variation in satisfaction. Process
openness was defined as the extent to which participants felt that
they were able to participate in project decision-making, and that
their contributions were welcome and valued. This finding pro-
vides empirical evidence that a characteristic unique to a FLOSS
context, process openness, has a direct and significant correlation
with satisfaction. Its relationship with satisfaction suggests that
people involved with FLOSS project governance and community
. factors that influence floss participant satisfaction 
building need to make sure that their project is presented in a way
that new participants perceive as welcoming, and that contribu-
tions are appreciated and visibly recognised. This suggests that
activities that build and support the project’s community may be
as important as those that contribute to writing code, particularly
as projects grow.
ha The higher the perceived product openness, the greater the rela-
tionship between perceived participant influence and participant
satisfaction.
The results showed that perceived product openness is not a mod-
erator for the relationship between extent of participation and
satisfaction, and this relationship was therefore removed from the
revised model. Since this relationship had not been tested previ-
ously, this hypothesis was one of two possibilities identified from
the literature review. The results for the second possibility, hb,
are discussed below.
hb There is a positive relationship between product openness and
participant satisfaction.
The results showed that product openness had a direct influence
on satisfaction (β= .20, significant at p6.), which suggests that
perceived product openness acts as a predictor variable for sat-
isfaction. Product openness was defined as the extent to which
information about the project’s future plans was available to mem-
bers of its community. This finding provides empirical evidence
that survey respondents’ satisfaction was higher if they felt they
were informed about the project’s future development path. Its
relationship with satisfaction suggests that people involved with
FLOSS project government and management need to ensure that
they make their plans for the project’s future clear to members of
their community.
.. New moderating variables
Section .. on page  discussed three characteristics of a FLOSS
project community members’ participation that had the potential to af-
fect their level of satisfaction, and the relative importance of the factors
that affect this. These were organisational focus, extent of remuneration,
and the amount of time they spent working on project activities. Carry-
ing out multiple regression analysis on subgroups of the data identified
differences in beta values for the predictor variables between groups.
Process openness was most important for respondents who had a non-
local (i.e. community) focus, or were paid for % or less of their time
working on the project, while perceived developer communication qual-
ity was most important for respondents who had a local focus, or were
 discussion and interpretation of findings
paid for more than % of their time. This suggests that these two char-
acteristics may be potential moderator variables for the relationships
between the predictor variables and satisfaction.
The differences between groups based on the amount of time respon-
dents spent working on the project were smaller, which suggests that
this is unlikely to be a significant moderator variable.
.. Other findings
Although the research objectives did not include describing the char-
acteristics of participants in LIM FLOSS projects, or identifying the
number of available projects, this emerged as an additional finding. The
results of the survey showed that respondents came from  different
countries. Though these were predominately English-speaking, a num-
ber of other countries, both in Europe and the developing world, were
also represented. This means that efforts to translate user interfaces to
other languages are increasingly important to some projects. It may also
raise the importance of high quality communication with members of a
project’s community, since at least some of these respondents are likely
to have limited English language skills. For example, using casual or
colloquial English on email discussion lists may confuse non-native En-
glish speakers. Community members may also need to respond carefully
to unclear messages that come from non-native English speakers, who
may be doing their best to communicate despite their lack of fluency in
English.
The other aspect of the survey findings that deserves comment is
the number of projects respondents identified. Respondents named a
total of  individual FLOSS projects relating to library and information
management, and the distribution followed a ‘long-tail’ pattern, with
 projects named by just one respondent. Some of these projects were
general-purpose information management software, such as wiki en-
gines or web content management systems. By using this type of FLOSS
package, members of the LIM profession benefit from a wider commu-
nity and are able to do things they could not otherwise do. However,
other software was specific to the LIM field, and some of the projects
appeared to be similar in scope. While this shows that FLOSS projects
are becoming popular in the LIM field, it also raises questions about
the extent to which the field can sustain a growing number of projects.
The list of projects could be used as a starting point for further research,
since it could be used as a wider population to track the evolution of
projects over time, which might identify critical success factors for a
LIM FLOSS project’s long-term survival.
. summary 
. summary
This chapter discussed the research findings and their significance. It
showed that the user-centric FLOSS contribution model presented a
broader perspective on the activities carried out by FLOSS project par-
ticipants than the more common code-centric model, and that this has
implications for the language researchers use. The results from the quan-
titative survey show that perceived complexity plays a different role in a
FLOSS context that in a conventional software development project, and
that characteristics of the project’s community are more important as
well. The global reach of many LIM FLOSS projects also has implications
for the way project members communicate with each other. Some survey
respondents benefited from the popularity of generic information man-
agement software projects, such as wikis and web content management
systems, but the relatively high number of LIM-specific FLOSS projects
raises questions about the ability of the field to sustain them.

9
C O N C LU S I O N
. introduction
This chapter begins by summarising the research, including the research
questions, the research design, and the findings, followed by a discussion
of its contributions to research and to practice. It ends with a discussion
of the limitations of the research, and outlines further research to extend
the findings.
. research overview
This section presents the research background, the conceptual model,
the research design, and the key findings.
.. Research background
This research was prompted by a popular story about Richard Stallman’s
reason for starting the free software movement: his frustration with his
inability to change the software used to run a new printer in MIT’s
Artificial Intelligence Laboratory in the early s. The result of this
frustration was codified in the Free Software Foundation’s four software
freedoms:
• the freedom to run the program, for any purpose (freedom );
• the freedom to study how the program works, and change it to
make it do what you wish (freedom );
• the freedom to redistribute copies so you can help your neighbour
(freedom ); and
• the freedom to distribute copies of your modified versions to
others (freedom ).
The Open Source Initiative was established in the late s, to give the
free software movement more appeal to business. As a result, free/libre
and open source software is now well-established as an alternative to
closed, proprietary software.
Previous research had indicated that participation in software devel-
opment was one of a number of factors that influenced user satisfaction,
but this research had not been extended to FLOSS projects. This led to
the main research question: What factors influence participant satisfaction
with a free/libre and open source application software project?

 conclusion
.. Research model
A review of the research literature on participation in FLOSS projects
showed that much of the focus had been on software developers and
interaction with source code, and that little attention had been paid
to community-oriented activities. It also showed that there was little
standardisation in the terms used to identify project roles. This led to
the first sub-question for this research: What types of contributions do
participants make to free/libre and open source software projects?
A review of the information systems literature showed that a number
of factors had been shown to have a direct influence on user satisfaction
with software, though the extent of this influence varied. The indi-
vidual factors were: participation in software development, perceived
developer communication quality, participant skills and knowledge,
perceived influence, experience, and training. In addition, system and
task complexity had been shown to moderate the relationship between
participation and satisfaction. A research model was developed based on
these factors; it also incorporated two characteristics unique to a FLOSS
context: perceived product openness and perceived process openness.
.. Research design
The research used a sequential, mixed methods approach. The first qual-
itative stage involved interviews with  participants who were involved
with a range of roles in seven LIM FLOSS projects, complemented with
ongoing document review of  LIM FLOSS projects. The purpose of
this stage was to gain an understanding of the types of contributions
they made to the projects, and to confirm that the concepts included in
the research model were relevant to a FLOSS context.
The second stage of the research involved a quantitative, web-based
survey. Invitations were sent to five email discussion lists, and sub-
sequently forwarded to at least two other email discussion lists and
promoted on several library blogs. A total of  usable responses was
received, from people in  countries. The data from this were used to
test the model.
.. Research findings and model revision
The findings from the first, qualitative stage of the research were used to
develop a user-centric contribution model of a FLOSS project, showing
seven types of activity, plus four attributes of participation that spanned
all activity types. They were also used to review and confirm the pre-
liminary research model, and develop measurement scales for the new
constructs.
. research contributions 
The analysis of the second, quantitative stage began with an assess-
ment of the reliability of each measurement scale and a factor analysis
of the items associate with the predictor variables, followed by multiple
regression and moderated regression analysis. These findings showed
that perceived system complexity had the largest effect on satisfaction
(β= −.28,p6.01), while perceived process openness accounted for the
most variance in satisfaction (R2 = .25,p6.01). Overall, characteristics
related to the project and its community were more influential on overall
satisfaction than personal characteristics such as skills and knowledge,
perceived influence, and experience. A two-word summary of the main
research findings into factors that influence FLOSS participant satisfac-
tion is ‘Community matters’. Projects that were perceived as being open
to participation with high quality communication resulted in higher
levels of satisfaction than projects that were perceived as being more
closed.
One finding that differs from previous research is the role of perceived
system complexity. McKeen, Guimaraes, and Wetherbe () found
that system complexity moderated the relationship between participa-
tion and satisfaction. However, in the FLOSS context of this research sys-
tem complexity acted as a predictor variable for satisfaction. It emerged
as the most influential factor in comparison to the others that were
tested in the model. Respondent comments made it clear that perceived
system complexity had both benefits and drawbacks. One benefit of
complexity was that the FLOSS package could be tailored to the specific
individual or organisational needs, but the drawback of this was that it
tended to decrease satisfaction.
The final outcome of this research was a revised research model, show-
ing that five predictor variables had a statistically significant influence
on satisfaction, accounting for % of the overall variance in satisfac-
tion. This model is a parsimonious one, designed in include the smallest
number of statistically significant constructs to explain the maximum
amount of variance in the outcome variable.
. research contributions
The results of this research contribute to both theory and practice. This
section first discusses its theoretical contribution, followed by its impli-
cations for participants in FLOSS projects.
.. Theoretical contributions
The main theoretical contribution of this research comes from its explo-
ration of satisfaction in the context of FLOSS projects. Existing models
of satisfaction, and its measurement, have been developed almost ex-
clusively in the context of in-house software development, with a small
 conclusion
amount of research that looked at user-developed applications of propri-
etary commercial products, most often spreadsheets. The results make
it clear that community aspects of participating in a FLOSS project are
more significant than in more closed projects. Some of these, such as
product and process openness, are not relevant to in-house projects, but
are an additional and important part of a FLOSS project.
A second contribution of this research is the development of a user-
centric FLOSS participation model, that incorporates more types of
contributions than usually considered. This presents a broader perspec-
tive on what participation involves than the previous developer- or
code-centric models. One potential use of this model is to provide a
descriptive framework to compare projects in terms of relative amount
of time their participants spend on on the different types of activities
over time, which would give a greater understanding of the ways in
which different projects evolve.
Another contribution of this research is the development of a scale to
measure satisfaction with a FLOSS project. The items used for this had
a Cronbach’s alpha of ., and the resulting distribution of values had
a Komogorov–Smirnov significance of ., indicating a normal distri-
bution. This scale incorporated elements of existing satisfaction scales,
plus others that Stage b interviewees identified as being important in a
FLOSS context.
This research also demonstrated that a form of cluster sampling can
be effective in gathering data from participants in a range of FLOSS
projects. Previous FLOSS research has tended to use single projects
as the source of their data, or data harvested from repositories. The
respondents to this research represented  identifiable LIM FLOSS
projects, which increases the generalisability of the findings.
Finally, this research showed that Nelson and Cheney’s instrument
used to measure training effectiveness did not work well in a FLOSS
context, and raised questions about its overall reliability. It also found
that Rizzo, House, and Lirtzman’s role conflict and ambiguity scale
(, first published in ), though previously used effectively as
a surrogate for task complexity, did not work well in a FLOSS context.
New measures will need to be developed for both of these constructs,
and retested in a FLOSS context.
.. Contributions to practice
The results of this research will also be of interest to members of FLOSS
project communities. Its most valuable contribution comes from its
use of empirical evidence gathered from a range of projects to show
which aspects of a project’s culture have the most effect on participant
satisfaction. Although most of the presentations at recent practitioner
conferences, such as linux.conf.au and OSCON, had a technical focus,
. research contributions 
the titles of some sessions show that there is growing awareness that
community is important. Selected examples of such sessions from the
 linux.conf.au and OSCON conferences include:
• Build your own contributors, one part at a time;
• Lessons learned from a growing project;
• Making yourself popular: A guide to social success in (and for) the
Linux community;
• Mentoring for fun and profit;
• Open source for newbies: Attracting and retaining talented people
for your project; and
• The secrets of building and participating in open source commu-
nities.
The abstracts for these sessions make it clear that they are based on
anecdotes and personal experience, which suggests that the current
research can be used to provide evidence of where FLOSS projects
should focus their efforts to improve overall participant satisfaction.
Some specific suggestions extrapolated from the hypotheses sup-
ported by the results of this research include:
• ensure that the project’s ‘About’ page and documentation include
information about what types of contributions are most needed,
and how to contribute (based on h);
• acknowledge and celebrate contributions, so that people who do
contribute feel appreciated and motivated to continue (based on
hb);
• monitor questions in the project’s email discussion list and/or
forums, particularly those from newcomers, to ensure that they
are answered (based on h);
• provide information to the project’s community about the project’s
future development, perhaps in the form of a ‘road map’ that lists
the planned changes and enhancements (from hb);
• ensure that documentation is up-to-date, and that aspects of the
software that may be perceived as complex are explained clearly
(based on hc); and
• find out what barriers participants encounter when making a
contribution to the project, and take steps to minimise or eliminate
them (based on h).
The results from this research will also be useful to practitioners in
the field of library and information management, particularly those
interested in becoming more involved in relevant FLOSS projects. In
 conclusion
particular, it gives them a framework to identify different ways in which
they could participate in the projects, as well as guidance on what to
look for when seeking a project open to participation from new users.
. limitations of the research
All research has limitations. The most significant delimitation of this
research is that it focused on a subset of FLOSS projects, namely appli-
cations used in library and information management, generally adopted
at an organisational level. This delimitation means that the results are
unlikely to be generalisable to the wider population of FLOSS projects.
In particular, they may not be generalisable to FLOSS projects that are
not intended for end-users, such as the Linux Kernel project, the Apache
project, and other infrastructure projects. However, the results may ap-
ply to other types of FLOSS application projects which are intended to be
used by end users to carry out their work or business tasks, particularly
since some of the FLOSS applications named by survey respondents
are already used outside the LIM field, such as the WordPress blogging
software and MediaWiki.
The second significant limitation of the research is a self-selection
bias due to its use of a general invitation to participate on email dis-
cussion lists, rather than inviting an identifiable sample with a known
relationship to the wider population. This means that the respondents
to the Stage c survey may over-represent people who are satisfied with
the software, since people who are not at all satisfied may not have been
subscribed to the project’s email discussion list. Even if they were, they
might not have been motivated to respond to the survey. This limitation
also means that it is not possible to calculate a response rate for the
survey, since an unknown number of people received an invitation to
participate. However, the demographic characteristics of the respon-
dents reported in Section . on page  show that they came from
different countries, ranged in age and educational qualifications, and
included both men and women. While this does suggest that there is no
identifiable bias towards a specific type of respondent, one key differ-
ence between the samples for both stages of this research and those in
previous research is the higher proportion of women (% in Stage ,
and % in Stage ). There may be several reasons for this difference.
First, the researcher was identified as female, and it is possible that
prospective interviewees and survey respondents were influenced by
this, leading to a higher number of responses from women. All but one
of the people who did not respond to the invitation to participate in
an interview were male, which supports this suggestion. In addition,
the library and information management profession is generally con-
sidered to be largely female, so it is reasonable to assume that a higher
proportion of women received the invitation to complete the survey
. future research 
than in previous FLOSS research. This suggests that the population for
this research may be significantly different to that of previous FLOSS
research, which also limits the generalisability of the results to other
types of FLOSS projects.
A further source of bias in the results of Stage  is the high proportion
(roughly half) of the interviewees who were involved with the same
project. This could have introduced bias towards the attitudes and
practices of that project. The researcher attempted to limit this bias by
ensuring that the types of activities included in Figure  on page 
were discussed by interviewees, or identified in the document review,
from more than one project, to increase the generalisability of the model.
The nature of satisfaction means that many of the research measures
involved perceptions, rather than objective measures. This means that
the results reflect the subjective perspectives of individual survey re-
spondents, and there may be inconsistencies in the way each interpreted
the measurement scale. This limitation was addressed by using multiple
measures for the constructs where possible.
Measurement issues are another limitation to the findings, since some
constructs were dropped from the model before the regression testing.
This was because their scales did not meet the minimum recommended
thresholds for reliability, or because they failed to load cleanly on a
single factor in the factor analysis.
A further limitation of the research was the use of multiple regression
as the main data analysis technique. The results of multiple regression
indicate that there is a relationship between the variables, but do not
imply causation. Further research, using techniques such as structural
equation modelling (SEM), would allow causal relationships to be exam-
ined.
This thesis did not take into account the life-cycle stage of the FLOSS
projects nominated by survey respondents. This may have limited its
ability to distinguish differences in satisfaction between respondents
whose activities were primarily oriented to code, and those who were
primarily users, since Subramanayn, Weisstein, and Krishnan ()
found that the life-cycle stage in which developers and users partici-
pated affected their satisfaction.
Finally, the research was conducted in English, which may have meant
that FLOSS participants who are not fluent in English were unlikely to
respond to the survey. This means that the findings are likely to reflect
the perspectives of the English-speaking participants.
. future research
All research also raises new questions, or identifies possibilities for
further research. Because this research was among the first to examine
 conclusion
FLOSS project participant satisfaction, there are a number of aspects
that can be expanded or clarified. They include:
• Extend the concepts of process and project openness, in order to
refine and clarify the concepts, and develop more comprehensive
measurement scales.
• Conduct a study of developer communication characteristics and
how they are perceived by FLOSS project members, in order to
develop guidelines for good practice.
• Examine the training options available for a range of FLOSS
projects in different fields, in order to develop a reliable mea-
surement scale, and carrying out a survey to validate it.
• Identify barriers to participation in FLOSS projects, and ways they
can be minimised or resolved.
This appears to be particularly significant for documentation, since
a number of interviewees and survey respondents identified docu-
mentation as a weakness, but did not themselves take any action
to improve its quality. This suggests that they felt the barriers
to contributing documentation were higher than the benefits of
doing so.
• Extend the research model by including attitude to FLOSS.
This could also examine the impact of this attitude on initial
selection and subsequent satisfaction with a FLOSS project.
• Identify factors which influence the extent to which FLOSS projects
apply the concept of process openness to their tools and documen-
tation.
This could include examining the licenses for the bug tracker
and communication channels, as well as the licenses used for the
project’s documentation.
• Examine participants’ satisfaction with different types of projects,
such as their size, activity level, and life-cycle stage, to see if there
are any significant differences.
This would build on Subramanayn, Weisstein, and Krishnan’s
() research examining the relationship between satisfaction
and participation in different stages of the software life-cycle.
Another option for further research would be to examine satisfaction
with proprietary software projects, in order to determine which of the
constructs used in this research apply in that context. Much of the
previous research on user satisfaction with software was carried out in
the s and s, when the structure of the software industry was
very different to that of the s.
. summary 
. summary
This chapter concludes this thesis by summarising the research topic and
research design. It identifies the contributions to theory and to practice
made by the findings, and discusses the limitations of the research. It
concludes with some suggestions for further research to extend and
clarify the research findings.

A P P E N D I C E S


A
S TAG E  H U M A N E T H I C S A P P L I CAT I O N

INFORMATICS  HEC Application Form  - 2004
INFORMATICS HUMAN ETHICS COMMITTEEApplication for Approval of Research ProjectsPlease email applications to your supervisor, who will then email it to an Informatics HEC member for a preliminaryreview.Note: The Human Ethics Committee attempts to have all applications approved within 6 working days, but alonger period may be necessary if applications require substantial revision.  1 NATURE OF PROPOSED RESEARCH :(a) Student Research (delete one)(b) If Student Research            Degree …Ph.D.… Course Code …INFO 690…(c) Project Title: …Participant satisfaction with open source software: Stage 1……………………………………………………………………………………………………2 INVESTIGATORS:(a) Principal InvestigatorName  ………Brenda Chawner……………………………………e-mail address …brenda.chawner@vuw.ac.nz…………School/Dept/Group …Information Management……………(b) Other Researchers Name Position…………………………………………………………….. ……………………….…………………………………………………………….. ……………………….(c) Supervisor (in the case of student research projects)…Gary Gorman/Sid Huff…… Professor….3 DURATION OF RESEARCH(a) Proposed starting date for data collection – After HEC approval has been granted.(Note: that NO part of the research requiring ethical approval may commence prior to approvalbeing given)(b) Proposed date of completion of project as a whole …December 2007… Page 1 of 13
 stage  human ethics application
INFORMATICS  HEC Application Form  - 20044 PROPOSED SOURCE/S OF FUNDING AND OTHER ETHICAL CONSIDERATIONS(a) Sources of funding for the projectPlease indicate any ethical issues or conflicts of interest that may arise because of sources of fundinge.g. restrictions on publication of results……none……………………………………………………………………………...…………………………………………………………………………………………………...(b) Is any professional code of ethics to be followed Y If yes, name  AIS Code of Research Conduct……………………..………………………(c) Is ethical approval required from any other body NIf yes, name and indicate when/if approval will be given…………………………………………………………………………………………………...5 DETAILS OF PROJECTBriefly Outline:(a) The objectives of the projectto identify factors that influence participant satisfaction with an open source software project…………………..………………………………………………………………….…...…………………………………………………………………………………………………...(b) Method of data collectionface-to-face or email interviews .……………..……………………………………………...…………………………………………………………………………………………………...…………………………………………………………………………………………………...…………………………………………………………………………………………………...(c) The benefits and scientific value of the projectThe results of this project will help developers of open source application softwareprojects identify opportunities to increase user satisfaction, and it will also help usersidentify ways in which they might contribute to projects(d) Characteristics of the participants Page 2 of 13
stage  human ethics application 
INFORMATICS  HEC Application Form  - 2004Developers and users of library and information management  (LIM) open source application software projects.(e) Method of recruitmentA purposive sample of developer and users will be drawn up from a range of sources,including articles and conference papers about LIM open source projects, and Web-based email archives for LIM open source project discussion lists. Prospective participants will be sent an email invitation (attached) inviting them to contribute to this stage of the project. The email invitation will be sent as plain text, to conform to thnorms of the open source community. The contact information at the bottom of themessage and the ‘vuw.ac.nz’ email address will provide my institutional affiliation.(f) Payments that are to be made/expenses to be reimbursed to participantsNone………………………………………………………………………………………...(g) Other assistance (e.g. meals, transport) that is to be given to participantsNone………………………………………………………………………………………...(h) Any special hazards and/or inconvenience (including deception) that     participants will encounterNone(i) State whether consent is for: (Please indicate as many as it applies)(i) the collection of data Y   (ii) attribution of opinions or information N(iii) release of data to others N(iv) use for a conference report or a publication Y (v) use for some particular purpose (specify) YPhD thesis deposited in the VUW library or entered into an institutional repository…...…………………………………………………………………………………………………...Attach a copy of any questionnaire or interview schedule to the application(j) How is informed consent to be obtained (see paragraphs 4.31(g), 5.2, 5.5 and 5.61 of      the Guidelines)(i) the research is strictly anonymous, an information sheet is supplied andinformed consent is implied by voluntary participation in filling out aquestionnaire for example (include a copy of the information sheet)N (ii) the research is not anonymous but is confidential and informed consent willbe obtained through a signed consent form (include a copy of the consentPage 3 of 13
 stage  human ethics application
INFORMATICS  HEC Application Form  - 2004form and information sheet) Y (face toface) (iii) the research is neither anonymous nor confidential and informed consent willbe obtained through a signed consent form (include a copy of the consentform and information sheet) N(iv) informed consent will be obtained by some other method (please specify andprovide details) Y (email)Email interview partipants will be advised that they are implying consent to participateby accepting the initial invitation and subsequently responding to email interviewquestions. If they do not wish to participate, they can ignore the email invitation.With the exception of anonymous research as in (i), if it is proposed that writtenconsent will not be obtained, please explain whyThe email interviews will be carried out asynchronously using email as the main communication channel. Requiring the participants to complete and return a consent form via another channel (such as post or fax) will introduce a barrier to participation,and is expected to lower the response rate. To avoid this, participants will be advised that they are implying consent by accepting the initial invitation and by subsequently replying to the email interview questions.(k) If the research will not be conducted on a strictly anonymous basis state howissues of confidentiality of participants are to be ensured if this is intended. (Seeparagraph 4.3.1(e) of the Guidelines). (e.g. who will listen to tapes, see questionnairesor have access to data). Please ensure that you distinguish clearly betweenanonymity and confidentiality.  Indicate which of these are applicable.(i) access to the research data will be restricted to the investigator N (ii) access to the research data will be restricted to the investigator and theirsupervisor (student research) Y (iii) all opinions and data will be reported in aggregated form in such a way thatindividual persons or organisations are not identifiable Y(iv) Other (please specify)…………………………………………………………………………………………………...…………………………………………………………………………………………………...…………………………………………………………………………………………………...(l) Procedure for the storage of, access to and disposal of data, both during and atthe conclusion of the research. (see section 7 of the guidelines). Indicate which areapplicable:(i) all written material (questionnaires, interview notes, etc) will be kept in alocked file and access is restricted to the investigator Y Page 4 of 13
stage  human ethics application 
INFORMATICS  HEC Application Form  - 2004(ii) all electronic information will be kept in a password-protected file and accesswill be restricted to the investigator Y (iii) all questionnaires, interview notes and similar materials will be destroyed:(a) at the conclusion of the research N or (b) __2__ years after the conclusion of the research Y (iv) any audio or video recordings will be returned to participants and/orelectronically wiped Y(v) other procedures (please specify):…………………………………………………………………………………………………...…………………………………………………………………………………………………...If data and material are not to be destroyed please indicate why and the proceduresenvisaged for ongoing storage and security…………………………………………………………………………………………………...…………………………………………………………………………………………………...…………………………………………………………………………………………………...(m)Feedback procedures (See section 8 of the Guidelines). You should indicate whetherfeedback will be provided to participants and in what form.  If feedback will not begiven, indicate the reasons why.I will be posting ongoing, informal reports on my research progress on a blog, andparticipants will be advised of its location and invited to comment. When the researchis complete, all participants will be sent a summary of the main research findings.(n)Reporting and publication of results.  Please indicate which of the following areappropriate.  The proposed form of publications should be indicated on theinformation sheet and/or consent form.(i) publication in academic or professional journals Y (ii) dissemination at academic or professional conferences Y (iii) deposit of the research paper or thesis in the University Library (studentresearch) Y (iv)   a case study used for teaching purposes N(v) other (please specify)PhD thesis deposited in the VUW library or entered into an institutional repository………………………………………………………………………………………………………...
Page 5 of 13
 stage  human ethics application
INFORMATICS  HEC Application Form  - 2004Signature of investigators as listed on page 1 (including supervisors) and Chair ofInformatics HEC.NB: All investigators and the Chair of Informatics HEC must sign the form, thensend it to Perumal Pillai for filing in the University’s Research Office once theelectronic application has been approved.…………………………………………… Date………………………...…………………………………………… Date………………………...…………………………………………… Date………………………...Supervisors:…………………………………………… Date………………………...…………………………………………… Date………………………...Chair of Informatics HEC:……………………………………………. Date ………………………..
Page 6 of 13
stage  human ethics application 
INFORMATICS  HEC Application Form  - 2004APPLICATIONS FOR HUMAN ETHICS APPROVALCHECKLIST  ! Have you read the Human Ethics Committee Policy?! Have you read the Faculty of Commerce and Administration’s HEC Guide?! Is ethical approval required for your project?! Have you established whether informed consent needs to be obtained for your project?! In the case of student projects, have you consulted your supervisor about any human ethics implications of yourresearch?! Have you included an information sheet for participants which explains the nature and purpose of your research, theproposed use of the material collected, who will have access to it, whether the data will be kept confidential toyou, how anonymity or confidentiality is to be guaranteed?! Have you included a written consent form?! If not, have you explained on the application form why you do not need to get written consent?Are you asking participants to give consent to:! collect data from them! attribute information to them! release that information to others! use the data for particular purposes! Have you indicated clearly to participants on the information sheet and/or consent form how they will be able to getfeedback on the research from you (e.g. they may tick a box on the consent form indicating that they would liketo be sent a summary), and how the data will be stored or disposed of at the conclusion of the research?! Have you included a copy of any questionnaire or interview checklist you propose using?POINTERS TO AVOID HAVING APPLICATIONS RETURNED BEFORE HEC REVIEW! The approval process is speeded up by not requiring the hard copy of your application form with thesignatures on it at the initial review process.  The complete application  (HEC application form, info sheet,consent form, covering letter, questionnaire etc.) is to be emailed as an attachment in one file to yoursupervisor who will email it to an INFORMATICS HEC member for a preliminary review. ! Do not insert a date into item 3 a.! Delete the “Y” or “N” option that is not required.  DO NOT remove any other text from the application form.! BO LD  your answers if you wish but do not alter the font anywhere else in the
Page 7 of 13
 stage  human ethics application
B
S TAG E  FAC E -T O - FAC E I N V I TAT I O N

4Face-to-face interview invitation (sent via email)Participant satisfaction with open source software: invitationDear [     ]I am a Ph.D. student in the School of Information Management at Victoria University of Wellington, and I wouldlike to invite you to be a participant in the first phase of my project. I am looking at factors that influenceparticipant satisfaction with library and information management open source software projects, and I haveapproached you because of your association with the [insert project name] project.This phase of the project will involve an interview of up to one hour, at a time that is convenient for you. Pleaseindicate your willingness to be interviewed by replying to this email message. Your name will be confidential tome and my supervisors, and the results will be presented in aggregated form so that individual people orprojects cannot be identified.The results of this research will be used to develop a Web-based questionnaire for the second stage of myproject, due to be carried out early in 2007. They will be discussed in my Ph.D. thesis, and may also bepublished in articles in professional or academic journals or presented at conferences. If you accept this invitation, I will send you a more detailed information sheet, a consent form, and a list ofinterview questions before the interview takes place. If you would like to read about my research progress, youmay check my blog, which is available at http://www.of2minds.net/reflections/. When my thesis is completed, Iwill send you a summary of the findings.If you have any questions about this project, you may contact me by email at brenda.chawner@vuw.ac.nz. Mysupervisors are Professor Gary Gorman (gary.gorman@vuw.ac.nc) and Professor Sid Huff(sid.huff@vuw.ac.nz).I look forward to hearing from you.Regards,Brenda ChawnerSchool of Information ManagementVictoria University of WellingtonP O Box 600 Wellington  NEW ZEALAND(04) 463 5780        fax (04) 463 5446  
 stage  face-to-face invitation
C
S TAG E  FAC E -T O - FAC E I N F O R M AT I O N S H E E T

4SCHOOL OF INFORMATION MANAGEMENTParticipant satisfaction with open source software: Stage 1Information Sheet I am a Ph.D. student in the School of Information Management at Victoria University of Wellington, studyingfactors that influence participant satisfaction with library and information management open source softwareprojects. The results of this project will help developers of open source application software projects identifyopportunities to increase user satisfaction, and it will also help users identify ways in which they mightcontribute to projects.This phase of the project will involve an interview, which may take up to one hour. The interview will berecorded electronically, and I may also take brief notes during the interview. I will prepare a transcript of theinterview, and you will have an opportunity to check it before I start to analyse the data.Your name will be confidential to me and my supervisors, and the results will be presented in aggregated formso that individual people or projects cannot be identified. Your responses will be stored securely in apassword-protected file on my personal computer, and any hard copies will be stored in a locked filing cabinet.The data will be kept for a period of 2 years after my project is completed, after which it will be deleted, andany hard copy shredded.The results of this stage of my research will be used to develop a Web-based questionnaire for the secondstage of my project, due to be carried out early in 2007. They will be discussed in my Ph.D. thesis, which willbe deposited in the Victoria University of Wellington Library or in an institutional repository. They may also bepublished in articles in professional or academic journals or presented at conferences. If you would like to readabout my research progress, you may check my blog, which is available athttp://www.of2minds.net/reflections/. When my thesis is completed, I will send you a summary of the findings.Victoria University of Wellington requires ethical approval for all research involving human participants, andthis project has been approved by the School of Informatics Human Ethics Committee. You may withdraw from the project without explanation at any time until the start of the data analysis on 1January 2007. If you withdraw from the project, any data you have provided will be destroyed.If you have any questions about this project, you may contact me by email at brenda.chawner@vuw.ac.nz. Mysupervisors are Professor Gary Gorman (gary.gorman@vuw.ac.nc) and Professor Sid Huff(sid.huff@vuw.ac.nz).
P.O .Box 600, Wellington, New Zealand   Telephone +64-4-463 5384    Facsimile +64-4-463 5446
 
 stage  face-to-face information sheet
D
S TAG E  FAC E -T O - FAC E I N F O R M AT I O N S H E E T

4SCHOOL OF INFORMATION MANAGEMENTParticipant satisfaction with open source software: Stage 1Consent form! I have been provided with adequate information relating to the nature and objectives of this researchproject, I have understood that information and have been given the opportunity to seek furtherclarification or explanations.! I understand that I will have an opportunity to check the interview transcripts before the data analysisbegins on 1 January 2007.! I understand that I may withdraw from this study at any time before the start of  data analysis on1 January 2007  data without providing reasons.! I understand that if I withdraw from the project, any data I have provided will be destroyed.! I understand that any information or opinions I provide will be kept confidential and reported only in anaggregated/non-attributable form .! I understand that when this research is completed the information obtained will be retained for up to 2years and then destroyed.! I understand that the results of this research will be used in a PhD thesis that will be deposited in theVictoria University of Wellington Library or in an institutional repository, and that it may also bepresented at conferences or published in academic or professional journals.! I understand that I will receive a summary of the research findings when the project is complete.! I agree to having my interview recorded.Name: _____________________________ Signature: _______________________________________Date: ______________________________
P.O .Box 600, Wellington, New Zealand   Telephone +64-4-463 5384    Facsimile +64-4-463 5446
 
 stage  face-to-face information sheet
E
S TAG E  FAC E -T O - FAC E I N T E RV I E W G U I D E

4SCHOOL OF INFORMATION MANAGEMENTParticipant satisfaction with open source software projectsInterview GuideInterview questions1. Participant background (getting to know you)Could you tell me a bit about yourself and your background? For example, what are your educationalqualifications? What is your current position, and what types of positions have you held in the past? Howwould you describe your technical skills? Other skills?2. Project background (getting to know the project)If you are involved in more than one project, include up to three, discussing each project separately.Could you tell me a bit about the software and what it does? What are its technical requirements? How did youget involved with the project? How do other people get involved with the project?3. Participant contributions and roles (getting to know your relationship with the project)I am interested in learning about the different ways participants contribute to F/OSS projects, not justcontributing to the code, but also in other ways, such as answering questions, writing documentation, providingresources, or promoting the project.How would you describe your main role in the project?Could you tell me the sorts of contributions you have made to this project?What are some of the contributions other people have made to this project?How would you describe their roles in the project?4. Participant satisfactionOverall, how satisfied are you with different aspects of this project, such as its functionality, ease of use,documentation, reliability, or interaction between participants? If you could change anything about this projectto increase your satisfaction, what would it be?5. OtherIs there anything else you think I should be asking about?
P.O .Box 600, Wellington, New Zealand   Telephone +64-4-463 5384    Facsimile +64-4-463 5446
 
 stage  face-to-face interview guide
F
S TAG E  E M A I L I N T E RV I E W I N V I TAT I O N

Email invitation/information sheetParticipant satisfaction with open source software: invitationDear [     ]I am a Ph.D. student in the School of Information Management at Victoria University of Wellington, and I wouldlike to invite you to be a participant in the first phase of my project. I am looking at factors that influenceparticipant satisfaction with library and information management open source software projects, and I haveapproached you because of your association with the [insert project name] project. The results of this projectwill help developers of open source application software projects identify opportunities to increase usersatisfaction, and it will also help users identify ways in which they might contribute to projects.This phase of the project will involve an email interview. If you agree to participate, I will send you three sets ofquestions, spread out over a period of 2-3 weeks. The questions will be in the body of the email message, andyou will be able to respond to them by replying to the message. I may have a few follow up questions for you,depending on your responses. I expect it to take you no more than 30 minutes to reply to each set ofquestions.Your name will be confidential to me and my supervisors, and no individuals or projects will be identified in thefinal report or any publications resulting from this research. Your responses will be stored securely in apassword-protected file on my personal computer, and any hard copies will be stored in a locked filing cabinet.The data will be kept for a period of 2 years after my project is completed, after which it will be deleted, andany hard copy shredded.The results of this stage of my research will be used to develop a Web-based questionnaire for the secondstage of my project, due to be carried out early in 2007. They will be discussed in my Ph.D. thesis, which willbe deposited in the Victoria University of Wellington Library or in an institutional repository. They may also bepublished in articles in professional or academic journals or presented at conferences If you would like to readabout my research progress, you may check my blog, which is available athttp://www.of2minds.net/reflections/. When my thesis is completed, I will send you a summary of the findings.Victoria University of Wellington requires ethical approval for all research involving human participants, andthis project has been approved by the School of Informatics Human Ethics Committee. You are implying consent to participate in this research project by accepting this invitation, and by respondingto the subsequent sets of interview questions. You may withdraw from the project without explanation at anytime until the start of the data analysis on 1 January 2007. If you withdraw from the project, any data you haveprovided will be destroyed.If you have any questions about this project, you may contact me by email at brenda.chawner@vuw.ac.nz. Mysupervisors are Professor Gary Gorman (gary.gorman@vuw.ac.nc) and Professor Sid Huff(sid.huff@vuw.ac.nz).I look forward to hearing from you.Regards,Brenda ChawnerSchool of Information ManagementVictoria University of WellingtonP O Box 600 Wellington  NEW ZEALAND(04) 463 5780        fax (04) 463 5446 
 stage  email interview invitation
G
S TAG E  E M A I L I N T E RV I E W I N F O R M AT I O N S H E E T

Participant satisfaction with open source
software: Stage 1
Information Sheet
I am a Ph.D. student in the School of Information Management at Victoria
University of Wellington, studying factors that influence participant
satisfaction with library and information management open source software
projects. The results of this project will help developers of open source
application software projects identify opportunities to increase user
satisfaction, and it will also help users identify ways in which they might
contribute to projects.
This phase of the project will involve an email interview. If you agree to
participate, I will send you three sets of questions, spread out over a period
of 2-3 weeks. The questions will be in the body of the email message, and
you will be able to respond to them by replying to the message. I may have a
few follow up questions for you, depending on your responses. I expect it to
take you no more than 30 minutes to reply to each set of questions.
Your name will be confidential to me and my supervisors, and the results will
be presented in aggregated form so that individual people or projects cannot
be identified. Your responses will be stored securely in a password-protected
file on my personal computer, and any hard copies will be stored in a locked
filing cabinet. The data will be kept for a period of 2 years after my project is
completed, after which it will be deleted, and any hard copy shredded.
The results of this stage of my research will be used to develop a Web-based
questionnaire for the second stage of my project, due to be carried out early
in 2007. They will be discussed in my Ph.D. thesis, which will be deposited in
the Victoria University of Wellington Library or in an institutional repository.
They may also be published in articles in professional or academic journals or
presented at conferences. If you would like to read about my research
progress, you may check my blog, which is available at
http://www.of2minds.net/reflections/. When my thesis is completed, I will
send you a summary of the findings.
Victoria University of Wellington requires ethical approval for all research
involving human participants, and this project has been approved by the
School of Informatics Human Ethics Committee. You may withdraw from the
project without explanation at any time until the start of the data analysis on
1 January 2007. If you withdraw from the project, any data you have
provided will be destroyed.
If you have any questions about this project, you may contact me by email at
brenda.chawner@vuw.ac.nz. My supervisors are Professor Gary Gorman
(gary.gorman@vuw.ac.nz) and Professor Sid Huff (sid.huff@vuw.ac.nz).
Brenda Chawner
School of Information Management 
 stage  email interview information sheet
School of Information Management 
Victoria University of Wellington 
P O Box 600 
Wellington NEW ZEALAND 
(04) 463 5780 fax (04) 463 5446
This is written in HTML 4.01 Strict and CSS.
Best viewed in any browser.
Created: 20 October 2006 
Last Modified: 20 October 2006
stage  email interview information sheet 

H
S TAG E  E M A I L I N T E RV I E W G U I D E

Email interview questionsParticipant satisfaction with open source software: questions part [1 | 2 | 3]Thank you for agreeing to participate in my research project. Here is the [first | second | final] set of interviewquestions. Please respond by typing your answers below each question, and then ‘replying’ to me. The information sheet for this research is available athttp://www.vuw.ac.nz/staff/brenda_chawner/infosheet.html.1. Participant background (getting to know you)Could you tell me a bit about yourself and your background? For example, what are your educationalqualifications? What is your current position, and what types of positions have you held in the past? Howwould you describe your technical skills? Other skills?2. Project background (getting to know the project)If you are involved in more than one project, include up to three, discussing each project separately.Could you tell me a bit about the software and what it does? What are its technical requirements? How did youget involved with the project? How do other people get involved with the project?3. Participant contributions and roles (getting to know your relationship with the project)I am interested in learning about the different ways participants contribute to F/OSS projects, not justcontributing to the code, but also in other ways, such as answering questions, writing documentation, providingresources, or promoting the project.How would you describe your main role in the project?Could you tell me the sorts of contributions you have made to this project?What are some of the contributions other people have made to this project?How would you describe their roles in the project?4. Participant satisfactionOverall, how satisfied are you with different aspects of this project, such as its functionality, ease of use,documentation, reliability, or interaction between participants? If you could change anything about this projectto increase your satisfaction, what would it be?5. OtherIs there anything else you think I should be asking about?
 stage  email interview guide
I
S TAG E  H U M A N E T H I C S A P P L I CAT I O N

SIM HEC Application Form   
Page 1 of 7 
   SIM HUMAN ETHICS COMMITTEE Application for Approval of Research Projects Please email applications to your supervisor, who will then email it to a SIM HEC member for a preliminary review.  Note: The Human Ethics Committee attempts to have all applications approved within 6 working days, but a longer period may be necessary if applications require substantial revision.     1 NATURE OF PROPOSED RESEARCH:   (a) Student Research (delete one)   (b) If Student Research            Degree Ph.D. Course Code INFO 690   (c) Project Title: Participant satisfacton with open source software: Stage 2  2 INVESTIGATORS:   (a) Principal Investigator   Name  Brenda Chawner   e-mail address brenda.chawner@vuw.ac.nz   School/Dept/Group Information Management   (b) Other Researchers  Name    Position   ……………………………………………………………..  ……………………….   ……………………………………………………………..  ……………………….   (c) Supervisor (in the case of student research projects)   Gary Gorman       Professsor   Sid Huff       Professor  3 DURATION OF RESEARCH   (a) Proposed starting date for data collection – After HEC approval has been granted.   (Note: that NO part of the research requiring ethical approval may commence prior to approval being given)  (b) Proposed date of completion of project as a whole 30 June 2009 
 stage  human ethics application
SIM HEC Application Form   
Page 2 of 7 
 4 PROPOSED SOURCE/S OF FUNDING AND OTHER ETHICAL   CONSIDERATIONS   (a) Sources of funding for the project  Please indicate any ethical issues or conflicts of interest that may arise because of sources of funding  e.g. restrictions on publication of results   None………………………………………………………………………………………...   …………………………………………………………………………………………………...   (b) Is any professional code of ethics to be followed   Y  If yes, name AIS Code of Research Conduct   (c) Is ethical approval required from any other body   N   If yes, name and indicate when/if approval will be given   …………………………………………………………………………………………………...  5 DETAILS OF PROJECT   Briefly Outline:   (a) The objectives of the project   to identify factors that influence participant satisfaction with an open source software project   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...    (b) Method of data collection   anonymous online survey………..…………………………………………………………...   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   (c) The benefits and scientific value of the project   The results of this project will help developers of open source application software projects identify opportunities to increase user satisfaction, and it will also help users identify ways in which they might contribute to projects  
stage  human ethics application 
SIM HEC Application Form   
Page 3 of 7 
   (d) Characteristics of the participants   Developers and users of library and information management open source application software projects.   (e) Method of recruitment   An email invitation to participate in the survey will be sent to a number of project and library technology email discussion lists. A copy of the message is included as part of this HEC application.   (f) Payments that are to be made/expenses to be reimbursed to participants   None.…………………………………………………………………………………………...   (g) Other assistance (e.g. meals, transport) that is to be given to participants   None…………………………………………………………………………………………...   (h) Any special hazards and/or inconvenience (including deception) that       participants will encounter   None…………………………………………………………………………………………...   …………………………………………………………………………………………………...   (i) State whether consent is for: (Please indicate as many as it applies)    (i) the collection of data    Y   (ii) attribution of opinions or information  N   (iii) release of data to others   N   (iv)  use for a conference report or a publication Y   (v) use for some particular purpose (specify) Y  Ph.D. thesis deposited in the VUW library or entered into the institutional repository………………………………………………...   …………………………………………………………………………………………………...    Attach a copy of any questionnaire or interview schedule to the application   (j) How is informed consent to be obtained (see paragraphs 4.31(g), 5.2, 5.5 and 5.61 of        the Guidelines)    (i) the research is strictly anonymous, an information sheet is supplied and informed consent is implied by voluntary participation in filling out a questionnaire for example (include a copy of the information sheet)         Y  
 stage  human ethics application
SIM HEC Application Form   
Page 4 of 7 
  (ii) the research is not anonymous but is confidential and informed consent will be obtained through a signed consent form (include a copy of the consent form and information sheet)     N    (iii) the research is neither anonymous nor confidential and informed consent will be obtained through a signed consent form (include a copy of the consent form and information sheet)     N   (iv) informed consent will be obtained by some other method (please specify and provide details)      N       …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   With the exception of anonymous research as in (i), if it is proposed that written consent will not be obtained, please explain why   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   (k) If the research will not be conducted on a strictly anonymous basis state how issues of confidentiality of participants are to be ensured if this is intended. (See paragraph 4.3.1(e) of the Guidelines). (e.g. who will listen to tapes, see questionnaires or have access to data). Please ensure that you distinguish clearly between anonymity and confidentiality.  Indicate which of these are applicable.    (i) access to the research data will be restricted to the investigator            N    (ii) access to the research data will be restricted to the investigator and their supervisor (student research)     Y    (iii) all opinions and data will be reported in aggregated form in such a way that individual persons or organisations are not identifiable  Y    (iv) Other (please specify)   …………………………………………………………………………………………………...    …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   (l) Procedure for the storage of, access to and disposal of data, both during and at the conclusion of the research. (see section 7 of the guidelines). Indicate which are applicable:    (i)  all written material (questionnaires, interview notes, etc) will be kept in a locked file and access is restricted to the investigator  Y  
stage  human ethics application 
SIM HEC Application Form   
Page 5 of 7 
  (ii) all electronic information will be kept in a password-protected file and access will be restricted to the investigator    Y    (iii) all questionnaires, interview notes and similar materials will be destroyed:    (a) at the conclusion of the research    N    or (b) 2 years after the conclusion of the research   Y    (iv) any audio or video recordings will be returned to participants and/or electronically wiped      n/a   (v) other procedures (please specify):   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   If data and material are not to be destroyed please indicate why and the procedures envisaged for ongoing storage and security   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   …………………………………………………………………………………………………...   (m)Feedback procedures (See section 8 of the Guidelines). You should indicate whether feedback will be provided to participants and in what form.  If feedback will not be given, indicate the reasons why.   A summary of the results will be sent to a range of project and library technology email discussion lists.    (n)Reporting and publication of results.  Please indicate which of the following are appropriate.  The proposed form of publications should be indicated on the information sheet and/or consent form.    (i) publication in academic or professional journals   Y    (ii) dissemination at academic or professional conferences  Y    (iii) deposit of the research paper or thesis in the University Library (student research)       Y    (iv)   a case study used for teaching purposes   N   (v) other (please specify)   An electronic copy will be available on the Web via the VUW institutional repository (http://researcharchive.vuw.ac.nz/).   …………………………………………………………………………………………………...    
 stage  human ethics application
SIM HEC Application Form   
Page 6 of 7 
  Signature of investigators as listed on page 1 (including supervisors) and Chair of SIM HEC.   NB: All investigators and the Chair of SIM HEC must sign the form, then send it to the SIM HEC administrator for filing once the electronic application has been approved.    ……………………………………………   Date………………………...   ……………………………………………   Date………………………...   ……………………………………………   Date………………………...     Supervisors:   ……………………………………………   Date………………………...   ……………………………………………   Date………………………...     Chair of SIM HEC:    …………………………………………….   Date ………………………..   
stage  human ethics application 
SIM HEC Application Form   
Page 7 of 7 
 APPLICATIONS FOR HUMAN ETHICS APPROVAL  CHECKLIST    Have you read the Human Ethics Committee Policy?  Have you read the Faculty of Commerce and Administration’s HEC Guide?  Is ethical approval required for your project?  Have you established whether informed consent needs to be obtained for your project?  In the case of student projects, have you consulted your supervisor about any human ethics implications of your research?  Have you included an information sheet for participants which explains the nature and purpose of your research, the proposed use of the material collected, who will have access to it, whether the data will be kept confidential to you, how anonymity or confidentiality is to be guaranteed?  Have you included a written consent form?  If not, have you explained on the application form why you do not need to get written consent?  Are you asking participants to give consent to:  collect data from them  attribute information to them  release that information to others  use the data for particular purposes  Have you indicated clearly to participants on the information sheet and/or consent form how they will be able to get feedback on the research from you (e.g. they may tick a box on the consent form indicating that they would like to be sent a summary), and how the data will be stored or disposed of at the conclusion of the research?  Have you included a copy of any questionnaire or interview checklist you propose using?   POINTERS TO AVOID HAVING APPLICATIONS RETURNED BEFORE HEC REVIEW  The approval process is speeded up by not requiring the hard copy of your application form with the signatures on it at the initial review process.  The complete application  (HEC application form, info sheet, consent form, covering letter, questionnaire etc.) is to be emailed as an attachment in one file to your supervisor who will email it to an SIM HEC member for a preliminary review.   Do not insert a date into item 3 a.  Delete the “Y” or “N” option that is not required.  DO NOT remove any other text from the application form.  BOLD your answers if you wish but do not alter the font anywhere else in the form. 
 stage  human ethics application
J
S TAG E  S U RV E Y I N V I TAT I O N

Wed, 15 Oct 2008  11:48 AM
Page 1 of 1
Subject: Satisfaction with free/open source software: survey invitation 
Date: Wednesday, 15 October 2008 11:47 AM 
From: Brenda Chawner <Brenda.Chawner@vuw.ac.nz> 
Conversation: Satisfaction with free/open source software: survey invitation 
 
I am a Ph.D. candidate in the School of Information Management at Victoria University 
of Wellington in New Zealand, and my research topic is an investigation of factors 
that influence participant satisfaction with library or information management free/
open source software projects. Some library-related examples are DSpace, EPrints, 
Koha, Evergreen, Greenstone, and MyLibrary. More general information management 
software includes web content management software such as Drupal, wiki software such 
as MediaWiki or PmWiki, or blogging software such as WordPress.	

	

If you use or are involved with a relevant project, I would like to invite you to 
complete an online survey. I am especially interested in hearing from people in a 
range of roles, for example user, developer, release manager, or system administrator. 
I am keen to have responses from people who have had either positive or negative 
experiences with free/open source software, to ensure that I get a perspective on 
factors that diminish satisfaction, as well as those that contribute toward it.	

	

The results of this project will help developers of free/open source application 
software projects identify opportunities to increase user satisfaction, and it will 
also help users identify ways in which they might contribute to projects. 	

	

I expect the survey to take between 15 and 20 minutes of your time. You may receive 
several copies of this message, since I am sending it to a number of project and 
library technology email discussion lists; however, I ask that you only complete the 
survey once. If you have colleagues who you think would be interested in completing 
it, please forward this invitation to them.	

	

The survey is available at:	

	

http://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205	

	

It will be available until Friday, 14 November, 2008.	

	

I will post a summary of the results to relevant project and library technology email 
discussion lists, once the thesis is finished in mid-2009. A copy of the thesis will 
be deposited in the Victoria University of Wellington Institutional Repository 
(http://researcharchive.vuw.ac.nz/).	

	

If you have any questions about this survey, please contact me at 
brenda.chawner@vuw.ac.nz or phone +64 4 463 5780. My supervisors are Professor Gary 
Gorman, email gary.gorman@vuw.ac.nz and Professor Sid Huff, email sid.huff@vuw.ac.nz.	

	

Regards,	

-- 	

Brenda Chawner 	

School of Information Management	

Victoria University of Wellington	

P O Box 600 	

Wellington  NEW ZEALAND	

(04) 463 5780        fax (04) 463 5446        brenda.chawner@vuw.ac.nz	

 stage  survey invitation
K
S TAG E  W E B - BA S E D S U RV E Y

13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 1 of 9
Free/Open Source Participant Satisfaction
Survey
This survey has been designed to gather data to investigate factors influencing
participants' satisfaction with free/open source software. It consists of 30 questions,
asking about your background, your attitudes to free/open source software in general,
and your experience and satisfaction with one library or information management
free/open source software project. It should take you between 15 and 20 minutes to
complete the survey, which has received ethical approval from the School of Information
Management Human Ethics Committee.
Please answer all questions that apply to your current situation. If a question does not apply to you, please leave it
blank, or choose 'n/a'.
In this research, free/open source software is defined as software that is issued under a license that guarantees
access to source code, and ensures that users have:
a. the freedom to run the software, for any purpose;
b. the freedom to read the source code to see how it works, and to modify it to suit local conditions;
c. the freedom to redistribute copies; and
d. the freedom to improve it, and redistribute the improved version.
No data that identifies you individually is being collected, and the results of the research will not be related to
specific projects, apart from indicating how many people responded for each project. The data will be used for a
PhD thesis, which will be deposited in the university library and made available online in its institutional repository.
The results may also be presented at conferences, or published as articles in academic or professional journals.
Only aggregate data will be presented in the thesis and any publications resulting from this research, and any
quotes taken from comments will not be attributed.
By completing and submitting the survey, you are implying consent to participate. I will post a summary of the
results to relevant project and library technology email discussion lists, once the thesis is finished in mid-2009.
The software used for this survey was issued under a free/open source license, in keeping with the topic of the
research. The data you provide will be stored securely in password-protected files for up to 2 years, and then it will
be destroyed.
If you have any questions about this survey, please contact me at brenda.chawner@vuw.ac.nz or phone +64 4 463
5780. My supervisors are Professor Gary Gorman, email gary.gorman@vuw.ac.nz and Professor Sid Huff, email
sid.huff@vuw.ac.nz.
Thank you for your time.
Brenda Chawner 
Ph.D. Candidate 
School of Information Management 
Victoria University of Wellington 
New Zealand
Section 1: Background and education
1. How old are you?
20 or younger 21-25 26-30 31-35 36-40 41-45 46-50 51-55 56-60 61 or older
 stage  web-based survey
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 2 of 9
2. What is your gender?
Female Male
3. What is your highest educational qualification?
None
Secondary or high school graduate
Postsecondary certificate or diploma
Undergraduate degree
Postgraduate certificate or diploma
Master's degree
PhD
4. What country do you live in?
[Select Country]
5. How long have you been using a computer, either at work or at home?
Less than 5 years
5-10 years
11-15 years
16-20 years
21-25 years
26-30 years
More than 30 years
6. Please rate your level of knowledge and skills in the following areas:
minimal some moderate much extensive
Knowledge and use of hardware
Knowledge and use of operating systems
Knowledge and use of one or more programming languages
Knowledge and use of library or information management application
software
Ability to provide system designers with information required to develop
library or information management application software
Ability to define library or information management application software
requirements
Ability to assess library or information management application
software features
Section 2: Attitude to free/open source software
stage  web-based survey 
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 3 of 9
7. Before starting this survey, how familiar were you with the idea of free/open source
software?
not at all familiar
slightly familiar
somewhat familiar
quite familiar
very familiar
8. To what extent do you use free/open source software:
not at all very little sometimes often as much as possible don't know
On computers provided by your employer
On computers you own
9. What operating system do you use on computers provided by your employer?
10. When choosing a new application software package for use at work, to what extent
do you give preference to free/open source alternatives?
It makes no difference to me
Other people make the decision for me
I prefer to use proprietary software with vendor support
I will consider a free/open source option, and choose it if it meets my needs best
I give preference to free/open source software whenever possible
I only use free/open source software
Other (please specify)
11. What operating system do you use on computers you own?
12. When choosing a new application software package for use on computers you own,
to what extent do you give preference to free/open source alternatives?
It makes no difference to me
Other people make the decision for me
I prefer to use proprietary software with vendor support
I will consider a free/open source option, and choose it if it meets my needs best
I give preference to free/open source software whenever possible
 stage  web-based survey
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 4 of 9
I give preference to free/open source software whenever possible
I only use free/open source software
Other (please specify)
Section 3: Experience and satisfaction with one library or information
management free/open source project
In this section of this survey, please answer based on one library or information management free/open source
source software project you use or are involved with in some other way. Some library-related examples are DSpace,
EPrints, Koha, Evergreen, Greenstone, and MyLibrary. More general information management software includes web
content management software such as Drupal, wiki software such as MediaWiki or PmWiki, or blogging software
such as WordPress.
If you are involved with more than one project, please choose the one that you have used or contributed to most
recently.
13. What is the name of the project? There are too many to list here, so please specify
the one on which you will base your subsequent responses.
14. How long have you been using or contributing to this project?
Less than 6 months
Between 6 months and one year
1 to 2 years
2 to 4 years
4 to 6 years
6 to 8 years
More than 8 years
15. How would you describe your current role in this project? Examples of roles include
user, developer, maintainer, trainer, release manager, etc. If you have more than one
role, please choose the one that takes up most of your time.
16. What other roles have you held in this project, if any?
17. This survey is concerned with two aspects of a free/open source software project:
roles that relate to a specific implementation used in one or more institutions, and roles
that relate to the wider project/developer community or the version of the software
stage  web-based survey 
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 5 of 9
that relate to the wider project/developer community or the version of the software
available for anyone to download. You may be involved in one or both of these aspects.
Please indicate:
None less
than
5
hours
5-10
hours
11-
20
hours
21-
30
hours
more
than
30
hours
In the last 6 months, how many hours per week have you spent in a role
relating to a specific implementation, on average?
In the last 6 months, how many hours per week have you spent in a role
relating to the wider project/developer community or the version of the
software available for anyone to download, on average?
18. What proportion of your time working on this project, either locally or on the wider
project, has been part of your paid employment?
None
Less than 20%
Between 20% and 50%
Between 50% and 80%
Between 80% and 100%
19. Which of the following activities have you carried out with this software/project?
Please tick all that
apply
Installed the software
Upgraded the software to a more recent release
Studied the source code to see how it works
Used the software
Distributed the software to others
Joined the project's email discussion list/forum
Asked a question on the project's email discussion list/forum
Answered a question on the project's email discussion list/forum
Promoted the project by talking about it to others, for example at a conference
Promoted the project by writing about it for publication
Provided resources to support the project, such as hosting an email discussion list, forum,
or wiki
Organised an event relating to the project, such as a meeting or conference
Written documentation to help others use the software
Customised the software to meet local needs, either yourself, or by having a developer
do so
Reported a bug to the system developers
Requested an enhancement from the system developers
Contributed local changes back to the project
 stage  web-based survey
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 6 of 9
Fixed one or more bugs
Evaluated existing software functionality
Written software to add new features
20. Have you used or contributed to this project in any other ways? Please specify.
21. Which of the following best describes how any training you have received affects
your use of the software:
n/a not at all very little somewhat considerably extensively
Training provided by outside organisations
In-house training
Self-study using tutorials or online help
Self-study using manuals or other documents
22. Please briefly describe any other training you have received that affects your use of
the software:
23. Please indicate your general level of satisfaction with the following characteristics of
the software:
n/a not at all
satisfied
slightly
satisfied
somewhat
satisfied
quite
satisfied
completely
satisfied
reliability (i.e doesn't freeze, crash, or
lose data)
functionality
free from bugs
easy to use
easy to learn
documentation
easy to install
easy to configure to meet local needs
release frequency
stage  web-based survey 
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 7 of 9
easy to add new features
helpfulness of community
security and access control
24. Please rate your experience in the following categories, relative to your perception of
other people involved in the project:
Considerably
less than most
Slightly less
than most
About the
same as most
Slightly more
than most
Significantly
more than most
Experience using this type of
software
Experience using this particular
software package
Experience using computers in
general
Experience as a member of a
software development project
25. Please indicate your agreement with each of the following statements about the
project's developers:
Strongly
disagree
Disagree Neutral Agree Strongly
agree
n/a
The project's developers are sensitive to others' needs
The project's developers typically get right to the point when
communicating with others
The project's developers pay attention to what other people
say
The project's developers deal effectively with others
The project's developers are easy to understand
The project's developers generally say the right thing at the
right time
The project's developers are easy to communicate with
The project's developers respond to messages quickly
The project's developers express ideas clearly
26. Please indicate your agreement with the following statements about the project's
culture:
Strongly
disagree
Disagree Neutral Agree Strongly
agree
I feel encouraged to contribute to this project
Anyone is encouraged to contribute to this project
Only a few people are allowed to contribute to this project
I find other people's contributions to this project valuable.
 stage  web-based survey
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 8 of 9
Other people find my contributions to this project valuable.
Information about the future development plans for this project is
easy to find
The future development plans for this project are clear
The project has infrequent, formal releases of new versions of the
software
The project has frequent releases of incremental versions with
bug fixes and small enhancements
27. How much influence have you had on the software features/functionality, in your
institution's local version?
None
Very little
A moderate influence
Much influence
Very much influence
28. How much influence have you had on the software features/functionality, in the
version that is available for downloading by others?
None
Very little
A moderate influence
Much influence
Very much influence
29. Please indicate your agreement with each of the following statements about the
software:
Strongly
disagree
Disagree Neutral Agree Strongly
agree
In comparison with other software I work with, this software has
complex requirements
This software has a complex design
When working with this software, I have clear, planned goals and
objectives for the tasks I am carrying out
When working with this software, I know what I am responsible for
When working with this software, I know exactly what other people
expect of me
30. Are there any other comments you would like to make about your use of this
software package, your involvement in the project, or reasons for your satisfaction or
dissatisfaction? For example, how does it compare to other projects you are involved
with?
stage  web-based survey 
13/10/08 11:21 AMhttp://surveys.sim.vuw.ac.nz/survey.aspx?surveyid=205
Page 9 of 9
Submit form
Page 1 / 1
 stage  web-based survey
L
H I G H L I G H T E D T R A N S C R I P T S


M
S TAG E  DATA A N A LYS I S : AC T I V I T I E S

Page 1
Interviewee Role Activity Category Focus1 Project manager website redevelopment outreachcommit code codehost wiki sponsorask questions useanswer questions communityorganise conference communitywrite documentation communitycustomise code codearticle in journal outreachconference presentation outreachset up user group community2 User set up parameters local use internal3, 4, 5 User instigate project local use internalcoordinate updates outreach internallocalisation coding internaltalk at conference outreach6 Developer commit code codewrite code codeapply for grants sponsorissue press releases outreachconference presentation outreachmedia monitoring governance7 Project manager localisation code internalcommit code code8 Project sponsor answer questions communitywrite documentation communitydemonstrate system outreachtraining community9 Core developer/project sponsorrewrite code codingwrite documentation communityhire developers managetesting codingwrite manuals communityset up mailing lists sponsorfix bugs codeestablish licensing policy governance10 User training community internalidentifying changes code internal11 User write documentation communityanswer questions community12 User13 Developer fix bugs codewrite code codetesting codewrite documentation communitypackage release code14 Developer write code codewrite documentation communityanswer questions communityorganising staff tasks manageleading workshop communityorganise translations community15 Release manager write code codemanage release manageplan future directions governance16 Project manager implement software codedemonstrate system outreach17 User write documentation communityprovide financial resourcesponsorship
 stage  data analysis: activities
N
S TAG E  DATA A N A LYS I S : R O L E S

Page 1
Role Type CategoryCode integrator Project CodeContributor Project CodeDeveloper Project CodeDeveloper Project CodeDocumenter Project CodeInstallation coordinator Project CodeInterface designer Project CodeSenior developer Project CodeTester Internal CodeWindows packager Project CodeCoordinator Project ManagementDocumentation manager Project ManagementIT project officer Internal ManagementOperations manager Internal ManagementProject leader Internal ManagementProject manager Project ManagementQA manager Project ManagementRelease manager Project ManagementTeam leader Internal ManagementTraining coordinator Internal ManagementTranslation manager Project ManagementProject initiator Project SponsorPromoters Project SponsorSponsors Project SponsorSponsors Project SponsorSupporter Project SponsorActive user Internal UserEnd user Internal UserTeam member Internal UserTeam member Internal UserTechnology analyst and coach Internal UserWebsite services assistant Internal User
 stage  data analysis: roles
O
S TAG E  DATA A N A LYS I S : AC T I V I T Y CAT E G O R I E S

Page 1
Activity Categoryfix bugs codefix bugs codeidentifying changes codeimplement software codeimplement software codepackage release codetesting codewrite code codewrite code codewrite code codewrite code codecommit code codecommit code codecommit code codecustomise code codefix bugs codelocalisation codelocalisation coderewrite code codetesting codewrite code codeanswer questions communityanswer questions communityanswer questions communityanswer questions communityanswer questions communityanswer questions communityleading workshop communityorganise conference communityorganise translations communityrun workshops communityset up user group communitytraining communitytraining communitytraining communitytranslate documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite documentation communitywrite manuals communityestablish licensing policy governancemedia monitoring governanceplan future directions governanceinstigate project local useset up parameters local usehire developers manageinvite other developers managemanage release manageorganising staff tasks managearticle in journal outreachconference presentation outreachconference presentation outreachcoordinate updates code
 stage  data analysis: activity categories
P
S TAG E  DATA A N A LYS I S : SAT I S FAC T I O N CAU S E S

Satisfaction
Page 1
Satisfaction Typedisappointment with documentation Featurestrong community Communitypeople answering questions Communityflexibility of project Featureproject openness Opennesspeople talk together on IRC regularly Communitymeeting other developers face to face at a conference Communitycommunication problems cause dissatisfaction Communityvalue for money Costdissatisfaction with documentation (a bit light) Featurereliability “it's been going the whole time” Featuregood support from local vendor Communitysharing customisations with other users Participationgood functionality Featureeasy to use Easeability to customise for local context Customisationeasy to add-on to proprietary system Participationglobal community; met people from all over the world Communityopportunity to travel Othergetting feedback on code Otherfun challenging proprietary vendors Attitudedissatisfaction with loss of momentum Communityseeing people get involved (answering questions) Communitydocumentation is lacking Featurereliability Featureability to control timing of upgrades Controlability to make local improvements Customisationgrowth of global community Communitychoice of support options Communitywinning prizes! Otherseeing translated versions Communityseeing other people pick up the software and use it Communityhaving other people make the software better Communityability to make changes quickly Customisationdissatisfaction with implementation issues Othereasy to use Easelack of training Trainingcommunication problems with IT support staff Communityeasy to use Easeinternal communication problems Communitylack of reliability “things going wrong” Featureease of use Easedocumentation good, but can be out of date Featurelack of marketing material Communitycommunication with developers could be better, especially information about future plansCommunitysome functionality is limited Featurefunctionality good Featuredocumentation limited Featurelimited interaction between participants Communitysoftware is reliable/stable Featuredocumentation good, but can be out of date Featuretranslated manuals out of date Featurewants the user community to contribute more Community
 stage  data analysis: satisfaction causes
Q
S U RV E Y C O N S T R U C T I O N
Table : Survey question characteristics
measurement variable analysis
question description scale type technique
 Age group
 year age bands,
starting from ’ or
younger’, ’-’,
through ’ or older’
Ordinal
Frequency/
per
cent
 Gender
choice of ’Female’ or
’Male’
Dichotomous
Frequency/
per
cent
 Education
Closed scale, starting
from ’None’ (),
’Secondary or high
school graduate’ (),
through ’PhD’ ()
Ordinal
Frequency/
per
cent

Country
of
residence
Drop down list Nominal
Frequency/
per
cent

Experience
with com-
puters
-year bands,
starting from ’Less
than  years’
()through ’More
than  years’ ()
Ordinal
Frequency/
per
cent

Perceived
knowl-
edge and
skills with
comput-
ers
Closed scale, ranging
from ’minimal’ ()
through ’extensive’
() for  aspects of
technology
Ordinal
Frequency/
per
cent

Perceived
familiar-
ity with
FLOSS
Closed scale, ranging
from ’not at all
familiar’ () through
’very familiar’ ()
Ordinal
Frequency/
per
cent

 survey construction
measurement variable analysis
question description scale type technique
a
Use of
FLOSS on
work com-
puters
Closed scale, ranging
from ’not at all’ ()
through ’as much as
possible’ (). Also
included a ’don’t
know’ () option.
Ordinal
Frequency/
per
cent
b
Use of
FLOSS on
own com-
puters
Closed scale, ranging
from ’not at all’ () to
’as much as possible’
(). Also included a
’don’t know’ ()
option.
Ordinal
Frequency/
per
cent

Operating
system(s)
used on
work com-
puters
Free text Nominal
Content
analy-
sis/
coding

Preference
for using
FLOSS on
work com-
puters
Closed scale, ranging
from ’it makes no
difference’ to ’I only
use free/open source
software; also
included an ’Other’
option
Nominal
Frequency/
per
cent

Operating
system(s)
used on
own com-
puters
Free text Nominal
Content
analy-
sis/
coding

Preference
for using
FLOSS on
own com-
puters
Closed scale, ranging
from ’it makes no
difference’ to ’I only
use free/open source
software; also
included an ’Other’
option
Nominal
Frequency/
per
cent

FLOSS
project
name
Free text Nominal
Frequency/
per
cent
survey construction 
measurement variable analysis
question description scale type technique

Length of
involve-
ment
Closed scale, ranging
from ’Less than 
months’ () to ’More
than  years’ ()
Ordinal
Frequency/
per
cent

Current
role
Free text Nominal
Content
analy-
sis/
coding

Other
roles
Free text Nominal
Content
analy-
sis/
coding
a
Average
hours/week
using
in-house
Closed scale, ranging
from ’None’ () to
’more than  hours’
()
Ordinal
Frequency/
per
cent
b
Average
hours/week
contribut-
ing
Closed scale, ranging
from ’None’ () to
’more than  hours’
()
Ordinal
Frequency/
per
cent

Paid pro-
portion
Closed scale, ranging
from ’None’ () to
’Between % and
%’ ()
Ordinal
Frequency/
per
cent
a-t
Project
activities
Tick boxes for 
different activities
Dichotomous
Frequency/per
cent

Other
activities/-
contribu-
tions
Free text
Content
analy-
sis/
coding
a-d
Training
effective-
ness
Closed scale, ranging
from ’n/a’ (), ’not at
all’ (), through
’extensively’ ()
Ordinal
Frequency/per
cent

Other
training
Free text
Content
analy-
sis/
coding
 survey construction
measurement variable analysis
question description scale type technique
a-l Satisfaction
Closed scale for 
aspects of the project,
ranging from ’n/a’
(), ’not at all
satisfied’ (), through
’completely satisfied’
()
Ordinal
Frequency/per
cent
a-d
Perceived
experi-
ence
Closed scale, ranging
from ’Considerably
less than most’ () to
’Significantly more
than most’ ()
Ordinal
Frequency/per
cent
a-j
Developer
communi-
cation
Closed scale, ranging
from ’Strongly
disagree’ () to
’Strongly agree’ (),
plus ’n/a’ ()
Ordinal
Frequency/per
cent
a-i
Project
culture
Closed scale, ranging
from ’Strongly
disagree’ () to
’Strongly agree’ ();
Question c was
reverse coded to be
consistent with the
other measures of
project culture
Ordinal
Frequency/
per
cent

Perceived
influence
(in-house)
Closed scale, ranging
from ’None’ () to
’Very much influence’
()
Ordinal
Frequency/
per
cent

Perceived
influence
(shared
project)
Closed scale, ranging
from ’None’ () to
’Very much influence’
()
Ordinal
Frequency/
per
cent
a-e
Perceived
system
and task
complex-
ity
Closed scale, ranging
from ’Strongly
disagree’ () to
’Strongly agree’ ()
Ordinal
Frequency/
per
cent
survey construction 
measurement variable analysis
question description scale type technique

Other
comments
Free text
Content
analy-
sis/
coding

B I B L I O G R A P H Y
Abbott, E. A. (). Flatland: A romance of many dimensions (th ed.).
New York: Dover.
Abdinnour-Helm, S. F., Chaparro, B. S., & Farmer, S. M. (). Using the
End-User Computer Satisfaction (EUCS) to measure satisfaction
with a web site. Decision Sciences, (), -.
Agarwal, R., & Prasad, J. (). The role of innovation characteris-
tics and perceived voluntariness in the acceptance of information
technologies. Decision Sciences, (), -.
Aksulu, A., & Wade, M. (). A comprehensive review and synthesis
of open source research. Journal of the Association for Information
Systems, (/), -.
Aladwani, A. M. (). Organizational actions, computer attitudes,
and end-user satisfaction in public organizations: An empirical
study. Journal of End User Computing, (), -.
Aladwani, A. M. (). A deeper look at the attitude-behavior con-
sistency assumption in information systems satisfaction research.
Journal of Computer Information Systems, (), -.
Albrect, A. J., & Gaffney, J. E. (). Software function, source lines
of code, and development effort prediction: A software science
validation. IEEE Transactions on Software Engineering, SE-(),
-.
Al-Gahtani, S. S., & King, M. (). Attitudes, satisfaction and usage:
Factors contributing to each in the acceptance of information
technology. Behaviour & Information Technology, (), -.
Allen, D. R. (). Customer satisfaction research management: A compre-
hensive guide to integrating customer loyalty and satisfaction metrics.
Milwaukee, WI: ASQ Quality Press.
Allen, M. W., Armstrong, D. J., Reid, M. F., & Riemenschneider, C. K.
(). Factors impacting the perceived organizational support of
IT employees. Information & Management, (), -.
Alreck, P. L., & Settle, R. B. (). The survey research handbook (rd
ed.). Boston: McGraw-Hill Irwin.
Amoako-Gyampah, K., & White, K. B. (). User achievement and
user satisfaction. Information & Management, (), -.
Applegate, R. (). Models of satisfaction. In A. Kent, H. Lancour,
W. Nasri, & J. Daily (Eds.), Encyclopedia of library and information
science (p. -). New York: Marcel Dekker.
Association for Computing Machinery. (). ACM software copyright
and license agreement. Retrieved //, from http://www.acm
.org/publications/policies/softwarecrnotice

 bibliography
Au, N., Ngai, E., & Cheng, T. (). Extending the understanding of
end user information systems satisfaction formation: An equitable
needs fulfillment approach. MIS Quarterly, (), -.
Au, N., Ngai, E. W., & Cheng, T. E. (). A critical review of end-
user information system satisfaction research and a new research
framework. Omega, (), -.
Bailey, J. E., & Pearson, S. W. (). Development of a tool for measuring
and analyzing computer user satisfaction. Management Science,
(), -.
Bargas-Avila, J., Lötscher, J., Orsini, S., & Opwis, K. (). Intranet
satisfaction questionnaire: Development and validation of a ques-
tionnaire to measure user satisfaction with the Intranet. Computers
in Human Behavior, (), -.
Barki, H., & Hartwick, J. (). Rethinking the concept of user involve-
ment. MIS Quarterly, (), -.
Barki, H., & Hartwick, J. (). Measuring user participation, user
involvement, and user attitude. MIS Quarterly, (), -.
Barki, H., & Huff, S. L. (). Change, attitude to change, and decision
support system success. Information & Management, (), -.
Barki, H., & Huff, S. L. (). Implementing decision support systems:
correlates of user satisfaction and system usage. INFOR, (),
-.
Baronas, A.-M. K., & Louis, M. R. (). Restoring the sense of control
during implementation: How user involvement leads to system
acceptance. MIS Quarterly, (), -.
Baroudi, J. J., Olson, M. H., & Ives, B. (). An empirical study of
the impact of user involvement on system usage and information
satisfaction. Communications of the ACM, (), -.
Baroudi, J. J., & Orlikowski, W. J. (). A short-form measure of user
information satisfaction: A psychometric evaluation and notes on
use. Journal of Management Information Systems, (), -.
Basset, T. (). Coordination and social structures in an open source
project: VideoLAN. In S. Koch (Ed.), Free/open source software
development (p. -). Hershey, PA: Idea Group.
Baudoin, P., & Branschofsky, M. (). Implementing an institutional
repository: The DSpace experience at MIT. Science & Technology
Libraries, (/), –.
Bentley, J. (). Programming pearls. Reading, MA: Addison-Wesley.
Bentley, J. (). More programming pearls: Confessions of a coder.
Reading, MA: Addison-Wesley.
Biship, R. (). The philosophy of the social sciences: An introduction.
London: Continuum.
Blackshaw, P. (). Satisfied customers tell three friends, angry customers
tell ,: Running a business in today’s consumer-driven world. New
York: Doubleday.
bibliography 
Blili, S., Raymond, L., & Rivard, S. (). Impact of task uncertainty,
end-user involvement, and competence on the success of end-user
computing. Information & Management, (), -.
Bloor, M. (). Techniques of validation in qualitative research: A
critical commentary. In G. Miller & R. Dingwall (Eds.), Context &
method in qualitative research (p. -). London: Sage.
Boldyreff, C., Nutter, D., & Rank, S. (). Communication and conflict
issues on collaborative software research projects. In J. Feller,
B. Fitzgerald, S. Hissam, & K. R. Lakhani (Eds.), Collaboration,
conflict and control: Proceedings of the th Workshop on Open Source
Software Engineering, May  , Edinburgh, Scotland (p. -).
Bonacccorsi, A., & Rossi, C. (). Contributing to OS projects: A
comparison between individual and firms. In J. Feller, B. Fitzger-
ald, S. Hissam, & K. R. Lakhani (Eds.), Collaboration, conflict and
control: Proceedings of the th Workshop on Open Source Software
Engineering, May  , Edinburgh, Scotland (p. -).
Bonacccorsi, A., & Rossi, C. (). Comparing motivations of individual
programmers and firms to take part in the open source movements:
From community to business. Knowledge, Technology & Policy,
(), -.
Braccini, A. M., Silvestri, C., & Za, S. (). Information systems:
People, organizations, institutions, and technologies. In A. D’Atri
& D. Sacchá (Eds.), (p. -). Berlin: Physica-Verlag.
Bringhurst, R. (). The elements of typographic style. Point Roberts,
WA: Hartley & Marks.
Brown, P. (). Free software is a matter of liberty, not price. Retrieved
//, from http://www.fsf.org/about/
Bryman, A. (). Social research methods (rd ed.). Oxford: Oxford
University Press.
Bryman, A., & Bell, E. (). Business research methods (nd ed.).
Oxford: Oxford University Press.
Bryman, A., & Cramer, D. (). Quantitative data analysis with SPSS
 and . London: Routledge.
Capiluppi, A., Lago, P., & Morisio, M. (). Evidences in the evolution
of OS projects through changelog analysis. In J. Feller, B. Fitzger-
ald, S. Hissam, & K. R. Lakhani (Eds.), Taking stock of the bazaar:
Proceedings of the rd workshop on open source software engineering
(p. -).
Carte, T. A., & Russell, C. J. (). In pursuit of moderation: Nine
common errors and their solutions. MIS Quarterly, (), -.
Casaló, L. V., Cisneros, J., Flavián, & Guinaliu, M. (). Determi-
nants of success in open source software networks. Industrial
Management & Data Systems, (), -.
Cavaye, A. L. (). User participation in system development revisited.
Information & Management, (), -.
 bibliography
Chen, L.-D., Soliman, K. S., Mao, E., & Frolick, M. N. (). Measur-
ing user satisfaction with data warehouses: An exploratory study.
Information & Management, (), -.
Chen, Q., Rodgers, S., & He, Y. (). A critical review of the e-
satisfaction literature. American Behavioral Scientist, (), -.
Cheung, C. M., & Lee, M. K. (). The asymmetric effect of website
attribute performance on satisfaction: An empirical study. Paper read
at th Hawaii International Conference on System Sciences.
Cheung, C. M., & Lee, M. K. (). The structure of Web-based informa-
tion systems satisfaction: testing of competing models. Journal of
the American Society for Information Science and Technology, (),
-.
Chin, P. O., & Cooke, D. (). Satisfaction and coordination in vir-
tual communities. Paper read at th Americas Conference on
Information Systems, - August, at New York, NY.
Cho, N., & Park, S. (). Development of electronic commerce user-
computer satisfaction (EUSCI) for Internet shopping. Industrial
Management & Data Systems, (), -.
Clement, A., & Hurrell, C. (). Information/communications rights
as a new environmentalism? Core environmental concepts for link-
ing rights-oriented computerization movements. In K. L. Kramer
& M. S. Elliott (Eds.), Computerization movements and technology
diffusion: From mainframes to ubiquitous computing (p. -).
Medford, NJ: Information Today.
Cohen, J. (). A power primer. Psychological Bulletin, (), -
.
Cohen, J., Cohen, P., West, S. G., & Aiken, L. S. (). Applied multiple
regression/correlation analysis for the behavioural sciences (rd ed.).
Mahwah, NH: Lawrence Erlbaum.
Coleman, E. G., & Hill, B. (). The social production of ethics in
Debian and free software communities: Anthropological lessons
for vocational ethics. In S. Koch (Ed.), Free/open source software
development (p. -). Hershey, PA: Idea Group.
Colford, S. (). Explaining free and open source software. Bulletin of
the American Society for Information Science and Technology, (),
-.
Conklin, M., Howison, J., & Crow. (). Collaboration using OSS-
mole: a repository of FLOSS data and analyses. In A. E. Hassan,
R. C. Holt, & S. Diehl (Eds.), MSR : Proceedings nd Interna-
tional Workshop on Mining Software Repositoriesd, St. Louis, Missouri
(p. -). New York: ACM.
Conrath, D. W., & Mignen, O. P. (). What is being done to measure
user satisfaction with EDP/MIS. Information & Management, (),
-.
Cooper, M. D. (). Design of library automation systems: File structures,
data structures, and tools. New York: John Wiley.
bibliography 
Couper, M. P. (). Technology trends in survey data collection. Social
Science Computer Review, (), -.
Couper, M. P., Traugott, M. W., & Lamias, M. J. (). Web survey
design and administration. Public Opinion Quarterly, (), -
.
Creswell, J. W. (). Research design: Qualitative, quantitative, and
mixed methods approaches (rd ed.). Thousand Oaks, CA: Sage.
Creswell, J. W., & Plano Clark, V. L. (). Designing and conduction
mixed methods research. Thousand Oaks, CA: Sage Publications.
Creswell, J. W., & Plano Clark, V. L. (). Designing and conducting
mixed methods research (nd ed.). Los Angeles: Sage.
Crowston, K., Annabi, H., & Howison, J. (). Defining open source
software project success. Paper read at Twenty-fourth International
Conference on Information Systems, - December, at Seattle,
WA.
Crowston, K., Annabi, H., Howison, J., & Masango, C. (). Towards a
portfolio of FLOSS project success measures. In J. Feller, B. Fitzger-
ald, S. Hissam, & K. R. Lakhani (Eds.), Collaboration, conflict and
control: Proceedings of the th Workshop on Open Source Software
Engineering, May  , Edinburgh, Scotland (p. -).
Crowston, K., Howison, J., & Annabi, H. (). Information systems
success in free and open source software development: Theory
and measures. Software Process Improvement and Practice, (),
-.
Crowston, K., Li, Q., Eseryel, U. Y., & Howison, J. (). Self-
organization of teams for free/libre open source software develop-
ment. Information and Software Technology, (), -.
Crowston, K., Wei, K., & Howison, J. (). Core and periphery in
free/libre and open source software team communications. Paper
read at th Hawai’i International Conference on System System,
Kaua’i, Hawai’i.
Crowston, K., Wei, K., Howison, J., & Wiggins, A. (). Free/libre
open source software development: What we know and what we
do not know. ACM Computing Surveys, (in press).
Dahl, M., Banerjee, K., & Spalti, M. (). Digital libraries : integrating
content and systems. Oxford: Chandos.
Damodaran, L. (). User involvement in the systems design process—
a practical guide for users. Behaviour & Information Technology,
(), -.
Darby, A. (). Implementing an open source application in a college
library – ECU’s Pirate Source. College & Undergraduate Libraries,
(), .
David, P. A., & Shapiro, J. S. (). Community-based production
of open-source software: What do we know about the developers
who participate? Information Economics and Policy, (), -.
 bibliography
David, P. A., Waterman, A., & Arora, S. (). FLOSS-US: The free/li-
bre/open source software survey for . SIRPR-NSF Project on
Open Source Software Working Paper.
Davis, C. H., & Lundeen, G. R. (). Illustrative computer programming
for libraries: Selected examples for informaiton specialists. Westport,
CT: Greenwood.
Davis, F. D. (). Perceived usefulness, perceived ease of use, and
user acceptance of information technology. MIS Quarterly, (),
-.
de Vaus, D. (). Analysing social science data:  key problems in data
analysis. London: Sage.
De Brabander, B., & Thiers, G. (). Successful information sys-
tem development in relation to situational factores which affect
effectve communication between MIS-users and EDP-specialists.
Management Science, (), -.
Dedrick, J., & West, J. (). Movement ideology vs. user pragma-
tism in the organizational adoption of open source software. In
K. L. Kramer & M. S. Elliott (Eds.), Computerization movements
and technology diffusion: From mainframes to ubiquitous computing
(p. -). Medford, NJ: Information Today.
Delone, W., & McLean, E. (). Information systems success: The
quest for the dependent variable. Information Systems Research,
(), -.
Delone, W., & McLean, E. (). The DeLone and McLean model
of information systems success: A ten-year update. Journal of
Management Information Systems, (), -.
Dempsey, B. J., Weiss, D., Jones, P., & Greenberg, J. (). Who is an
open source software developer? Profiling a community of Linux
developers. Communications of the ACM, (), -.
Denove, C., & Power, J. D., IV. (). Satisfaction: How every great
company listens to the voice of the customer. New York: Portfolio.
DiBona, C., Ockman, S., & Stone, M. (Eds.). (). Open sources: Voices
from the open source revolution. Sebastopol, CA: O’Reilly.
Doll, W. J., Raghunathan, T. S., Lim, J. S., & Gupta, Y. P. (). A
confirmatory factor analysis of the user information satisfaction
instrument. Information Systems Research, (), -.
Doll, W. J., & Torkzadeh, G. (). The measurement of end-user
computing satisfaction. MIS Quarterly, (), -.
Doll, W. J., & Torkzadeh, G. (a). A discrepancy model of end-user
computing involvement. Management Science, (), -.
Doll, W. J., & Torkzadeh, G. (b). The measurement of end-user
software involvement. Omega, (), -.
Doll, W. J., & Torkzadeh, G. (). The measurement of end-user
computing satisfaction: Theoretical and methodological issues.
MIS Quarterly, (), -.
bibliography 
Doll, W. J., Xia, W., & Torkzadeh, G. (). A confirmatory factor
analysis of the end-user computing satisfaction instrument. MIS
Quarterly, (), -.
Edström, A. (). User influence and the success of MIS projects: A
contingency approach. Human Relations, (), -.
Egan, S. (). Open source messaging application development: Building
and extending gaim. Berkeley, CA: Apress.
Elliott, M. S. (). Examining the success of computerization move-
ments in the ubiquitous computing era: Free and open source
software movements. In K. L. Kramer & M. S. Elliott (Eds.), Com-
puterization movements and technology diffusion: From mainframes
to ubiquitous computing (p. -). Medford, NJ: Information
Today.
Elliott, M. S., & Kraemer, K. L. (). Comparative perspective on com-
puterization movements: Implications for ubiquitous computing.
In K. L. Kramer & M. S. Elliott (Eds.), Computerization movements
and technology diffusion: From mainframes to ubiquitous computing
(p. -). Medford, NJ: Information Today.
Ellis, P. D. (). The essential guide to effect sizes: Statistical power,
meta-analysis, and the interpretation of research results. Cambridge,
UK: Cambridge University Press.
Etezadi-Amoli, J., & Farhoomand, A. F. (). A structural model of end
user computing satisfaction and user performance. Information &
Management, (), -.
Feller, J., & Fitzgerald, B. (). Understanding open source software
development. London: Addison-Wesley.
Field, A. (). Discovering statistics using SPSS (and sex and drugs and
rock ’n’roll) (rd ed.). Los Angeles: Sage.
Fink, M. (). The business and economics of Linux and open source.
Upper Saddle River, NJ: Prentice Hall PTR.
Flynn, B. A., & Flyn, E. J. (). Information-processing alternatives
for coping with manufacturing environment complexity. Decision
Sciences, (), -.
Foster, S. T., Jr. (). User involvement during information systems
development: A comparison of analyst and user perceptions of sys-
tem acceptance. Journal of Engineering and Technology Management,
(-), -.
Franz, C. R., & Robey, D. (). Organizational context, user involve-
ment, and the usefulness of information systems. Decision Sciences,
(), -.
Free Software Foundation GNU Project. (). Various licenses and
comments about them. Retrieved //, from http://www.gnu
.org/licenses/license-list.html
Gabriel, R. P., & Goldman, R. (, May). Open source: Beyond the
fairy tales. Perspectives on Business Innovation, -.
 bibliography
Gacek, C., & Arief, B. (). The many meanings of open source. IEEE
Software, (), -.
Galetta, D. F., & Lederer, A. L. (). Some cautions on the measure-
ment of user information satisfaction. Decision Sciences, (),
-.
Gallivan, M. J. (). Striking a balance between trust and control in
a virtual organization: a content analysis of open source software
case studies. Information Systems Journal, (), -.
Gallivan, M. J., & Keil, M. (). The user-developer communication
process: A critical case study. Information Systems Journal, (),
-.
Gatian, A. W. (). Is user satisfaction a valid measure of system
effectiveness? Information & Management, (), -.
Gefen, D., & Keil, M. (). The impact of developer responsiveness
on perceptions of usefulness and ease of use: An extension of
the Technology Acceptance Model. The Data Base for Advances in
Information Systems, (), -.
Gelderman, M. (). The relation between user satisfaction, usage of
information systems, and performance. Information & Management,
(), -.
German, D. M. (). The GNOME project: A case study of open source,
global software development. Software Process Improvement and
Practice, (), -.
Ghosh, R., & Prakash, V. V. (). The Orbiten free software survey.
First Monday, ().
Ghosh, R. A., Glott, R., Krieger, B., & Robles, G. (). Free/libre and
open source software: Survey and study. part iv: Survey of developers.
Maastrict: International Institute of Infonomics/Merit.
Golden, B. (). Succeeding with open source. Boston: Addison-Wesley.
Goldman, R., & Gabriel, R. P. (). Innovation happens elsewhere: Open
source as a business strategy. Amsterdam: Morgan-Kaufman.
González-Baharona, J. M., Løpez, L., & Robles, G. (). Community
structure of modules in the Apache project. In J. Feller, B. Fitzger-
ald, S. Hissam, & K. R. Lakhani (Eds.), Collaboration, conflict and
control: Proceedings of the th Workshop on Open Source Software
Engineering, May  , Edinburgh, Scotland (p. -).
González-Baharona, J. M., Robles, G., Andradas-Izquierdo, R., & Ghosh,
R. A. (). A geographic origin of libre software developers.
Information Economics and Policy, (), -.
Gorman, G. E., & Clayton, P. (). Qualitative research for the infor-
mation professional: A practical handbook. London: Library Associa-
tion.
Graham, S. L. (). From research software to open source. In
R. Wilhelm (Ed.), Informatics:  years back,  years ahead (p. -
). Berlin: Springer-Verlag.
bibliography 
Green, S. B. (). How many subjects does it take to do a regression
analysis? Multivariate Behavioral Research, (), -.
Gregor, S. (). A theory of theories in information systems. In
S. Gregor & D. Hart (Eds.), Information systems foundations: Build-
ing the theoretical base (p. -). Canberra: Australian National
University.
Gregor, S. (). The nature of theory in information systems. MIS
Quarterly, (), -.
Griffiths, J. R., Johnson, F., & Hartley, R. J. (). User satisfaction
as a measure of system performance. Journal of Librarianship and
Information Science, (), -.
Guimaraes, T., & Gupta, Y. P. (). Measuring top management
satisfaction with the MIS department. Omega, (), -.
Guimaraes, T., & Igbaria, M. (). Client/server system success:
Exploring the human side. Decision Sciences, (), -.
Guimaraes, T., Igbaria, M., & Lu, M.-T. (). The determinants of DSS
success: An integrated model. Decision Sciences, (), -.
Guimaraes, T., Staples, D. S., & McKeen, J. D. (). Empirically testing
some main user-related factors for systems development quality.
Quality Management Journal, (), -.
Guimaraes, T., Yoon, V. Y., & Clevenson, A. (). Exploring some
determinants of ES quality. Quality Management Journal, (),
-.
Hair, J. F., Babin, B., Money, A. H., & Samouel, P. (). Essentials of
business methods research. Hoboken, NJ: Wiley.
Hair, J. F., Jr., Black, W. C., Babin, B. J., Anderson, R. E., & Tatham, R. L.
(). Multivariate data analysis (th ed.). Upper Saddle River,
NJ: Pearson Prentice Hall.
Hall, J. A., & Kiedtka, S. L. (). Financial performance, CEO com-
pensation, and large-scale information technology outsourcing
decisions. Journal of Management Information Systems, (), -
.
Hansen, P. B. (). The nucleus of a multiprogramming system.
Communications of the ACM, (), -, .
Harrison, A. W., & Rainer, R. K., Jr. (). A general measure of user
computer satisfaction. Computers in Human Behavior, (), -.
Hars, A., & Ou, S. (). Working for free? Motivations for partici-
pating in open-source projects. International Journal of Electronic
Commerce, (), -.
Hawk, S. R., & Dos Santos, B. L. (). Successful system development:
The effect of situational factors on alternate user roles. IEEE
Transactions on Engineering Management, (), -.
Hawk, S. R., & Raju, N. S. (). Test-retest reliability of user infor-
mation satisfaction: A comment on Galletta and Lederer’s paper.
Decision Sciences, (), -.
 bibliography
Hayes, B. E. (). Measuring customer satisfaction and loyalty: Survey
design, use, and statistical analysis methods (rd ed.). Milwaukee,
WI: ASQ Quality Press.
He, J., & King, W. R. (). The role of user participation in information
systems development: Implications from a meta-analysis. Journal
of Management Information Systems, (), -.
Helling, J. (). Cutting the proprietary cord: A case study of one
library’s decision to migrate to an open source ILS. Library Review,
(), -.
Hendrickson, A. R., Glorfeld, K., & Cronan, T. P. (). On the re-
peated test-retest reliability of the end-user computing satisfaction
instrument: A comment. Decision Sciences, (), -.
Henn, M., Weinstein, M., & Foard, N. (). A short introduction to
social research. London: Sage Publications.
Herbold, R. (). Quad i. Communications of the ACM, (), .
Hinkin, T. R. (). A brief tutorial on the development of measures
for use in survey questionnaires. Organizational Research Methods,
(), -.
Holck, J., & Jorgensen, N. (). Do not check in on red: Control meets
anarchy in two open source projects. In S. Koch (Ed.), Free/open
source software development (p. -). Hershey, PA: Idea Group.
Hopkins, T. (). Renovating the collected algorithms from ACM.
Communications of the ACM, (), -.
Howison, J., Conklin, M., & Crowston, K. (). FLOSSmole: A collab-
orative repository for FLOSS research data and analyses. Interna-
tional Journal of Information Technology and Web Engineering, (),
-.
Howison, J., & Crowston, K. (). The problems and perils of mining
SourceForge. Paper read at Mining Software Repositories Work-
shop, International Conference on Software Engineering,  May,
at Edinburgh.
Hulin, C., & Cudeck, R. (). Cronbach’s alpha on two-item scales.
Journal of Consumer Psychology, (&), .
Hulin, C., Netemeyer, R., & Cudeck, R. (). Can a reliability co-
efficient be too high? Journal of Consumer Psychology, (&),
-.
Hunt, F., & Johnson, P. (). On the Pareto distribution of Source-
Forge projects. Paper read at Open Source Software Development
Workshop, - February , at Newcastle upon Tyne.
Hunton, J. E. (). Effects of user participation on systems devel-
opment: A longitudinal field experiment. MIS Quarterly, (),
-.
Hwang, M. I., & Thorn, R. G. (). The effect of user engagement on
system success: A meta-analytical integration of research findings.
Information & Management, (), -.
bibliography 
Igbaria, M., Guimaraes, T., & Davis, G. B. (). Testing the determi-
nants of microcomputer usage via a structural equation model.
Journal of Management Information Systems, (), -.
Igbaria, M., & Iivari, J. (). The effects of self-efficacy on computer
usage. Omega, (), -.
Igbaria, M., & Nachman, S. A. (). Correlates of user satisfaction
with end user computing: An exploratory study. Information &
Management, (), -.
Iivari, J. (). User information satisfaction: A critical review. In
A. Kent, H. Lancour, W. Nasri, & J. Daily (Eds.), Encyclopedia of
library and information science (Vol. , p. -). New York:
Marcel Dekker.
Iivari, J., & Ervasti, I. (). User information satisfaction: IS imple-
mentation and effectiveness. Information & Management, (),
-.
Iivari, J., & Karjalainen, M. (). Impact of prototyping on user infor-
mation satisfaction during the IS specification phase. Information
& Management, (), -.
IIvari, N. (). Exploring the rhetoric on representing the user: Discourses
on user involvement in system development. Paper read at th In-
ternational Conference on Information Systems, - December,
at Washington, DC.
Ilgen, D. R., Hollenbeck, J. R., Johnson, M., & Jundt, D. (). Teams in
organisations: From Input-Process-Output models to IMOI models.
Annual Review of Psychology, , -.
Ives, B., Olson, M. H., & Baroudi, J. J. (). The measurement of
user information satisfaction. Communications of the ACM, (),
-.
Jang, C.-L. (). The moderating effect of self-efficacy on the an-
tecedents of online satisfaction with an electronic document ex-
change system. Social Behavior and Personality, (), -.
Jensen, C., & Scacchi, W. (). Role migration and advancement processes
in OSSD projects: A comparative case study. Paper read at th
International Conference on Software Engineering.
Jiang, J., Chen, E., & Klein, G. (). The importance of building a
foundation for user involvement in information systems projects.
Project Management Journal, (), -.
Jiang, J. J., Klein, G., Roan, J., & Lin, J. T. (). IS service performance:
Self-perceptions and user perceptions. Information & Management,
(), -.
Jin, L., Robey, D., & Boudreau, M.-C. (). Beyond development:
A research agenda for investigating open source software user
communities. Information Resources Management Journal, (),
-.
Joshi, K. (). An investigation of equity as a determinant of user
information satisfaction. Decision Sciences, (), -.
 bibliography
Kappelman, L. A. (). Measuring user involvement: A diffusion of
innovation perspective. The Data Base for Advances in Information
Systems, ( & ), -.
Kekre, S., Krishnan, M. S., & Srinivasan, K. (). Drivers of customer
satisfaction for software products: Implications for design and
service. Management Science, (), -.
Kettinger, W. J., & Lee, C. C. (). Perceived service quality and
user satisfaction with the information services function. Decision
Sciences, (/), -.
Khalifa, M., & Liu, V. (). Determinants of satisfaction at different
adoption stages of Internet-based sevices. Journal of the Association
for Information Systems, (), -.
Kim, K. K. (). Task characteristics, decentralization, and the success
of hospital information systems. Information & Management, (),
-.
Kim, S., & McHaney, R. (). Validation of the end-user comput-
ing satisfaction instrument in case tool environments. Journal of
Computer Information Systems, (), -.
Kleinbaum, D. G., Kupper, L. L., Nizam, A., & Muller, K. E. ().
Applied regression analysis and other multivariable methods (th ed.).
Belmont, CA: Thomson Brooks/Cole.
Knuth, D. (a). The error log of TEX (-). In Literate
programming (p. -). Stanford, CA: Center for the Study of
Language and Information.
Knuth, D. (b). The errors of TEX (). In Literate programming
(p. -). Stanford, CA: Center for the Study of Language and
Information.
Krishnamurthy, S. (). Cave or community? An empirical examina-
tion of  mature open source projects. First Monday, ().
Kroah-Hartman, G., Corbet, J., & McPherson, A. (). Linux kernel
development: How fast it is going, who is doing it, what they are doing,
and who is sponsoring it: An August  update. San Francisco, CA:
The Linux Foundation.
Lakhani, K. R., & Hippel, E. von. (). How open source software
works: “Free” user-to-user assistance. Research Policy, (), -
.
Lamont, M. (). Gender, technology, and libraries. Information
Technology and Libraries, (), -.
Larsen, T. J. (). A multilevel explanation of end-user computing
satisfaction with an enterprise resource planning system within an
international manufacturing organization. Computers in Industry,
(), -.
Lascarides, M. (). Infomaki: An open source, lightweight usability
testing tool. The CodeLib Journal().
Lawrence, M., & Low, G. (). Exploring individual user satisfaction
within user-led development. MIS Quarterly, (), -.
bibliography 
Lee, J.-F., & Chan, T.-Y. (). Organisational structure of "user collab-
oration community": Insights from the case of an open source soft-
ware project. In J. Feller, B. Fitzgerald, S. Hissam, & K. R. Lakhani
(Eds.), Collaboration, conflict and control: Proceedings of the th Work-
shop on Open Source Software Engineering, May  , Edinburgh,
Scotland (p. -).
Lee, S. M., Kim, Y. R., & Lee, J. (). An empirical study of the
relationship among end-user information acceptance, training,
and effectiveness. Journal of Management Information Systems,
(), -.
Lee, S.-Y. T., Kim, H.-W., & Gupta, S. (). Measuring open source
software success. Omega, (), -.
Leedy, P. D., & Ormrod, J. E. (). Practical research: Planning and
design (th ed.). Upper Saddle River, NJ: Merrill Prentice-Hall.
Leonard, A. (). Chapter : Boot time. Salon Magazine.
Lincoln, Y., & Guba, E. (). Naturalistic inquiry. Los Angeles: Sage.
Linux Devices. (). Linux still top embedded OS. Retrieved //,
from http://www.linuxfordevices.com/c/a/News/Linux-still
-top-embedded-OS/
Lu, H.-P., & Chiou, M.-J. (). The impact of individual differences
on e-learning system satisfaction: A contingency approach. British
Journal of Educational Technology, (), -.
Maass, W. (). Inside an open source software community: Empirical
analysis on individual and group level. In J. Feller, B. Fitzgerald,
S. Hissam, & K. R. Lakhani (Eds.), Collaboration, conflict and control:
Proceedings of the th Workshop on Open Source Software Engineering,
May  , Edinburgh, Scotland (p. -).
Mahmood, M. A., & Becker, J. D. (). Effect of organizational matu-
rity on end-users’ satisfaction with information systems. Journal
of Management Information Systems, (), -.
Mahmood, M. A., Burn, J. M., Gemoets, L. A., & Jacquez, C. ().
Variables affecting information technology and user-satisfaction:
A meta-analysis of the empirical literature. International Journal of
Human-Computer Studies, (), -.
Mann, C., & Stewart, F. (). Internet interviewing. In J. Gubrium &
J. Holstein (Eds.), Postmodern interviewing (p. -). Thousand
Oaks, CA: Sage.
Marks, M. A., Mathieu, J. E., & Zaccaro, S. J. (). A temporally
based framework and taxonomy of team processes. Academy of
Management Review, (), -.
Markus, M. L. (). Power, politics and MIS implementation. Com-
munications of the ACM, (), -.
Markus, M. L. (). The governance of free/open source software
projects: monolithic, multidimensional, or configurational? Journal
of Management and Governance, (), -.
 bibliography
Markus, M. L., & Mao, J.-Y. (). Participation in development and
implementation–updating an old, tired concept for today’s IS con-
texts. Journal of the Association for Information Systems, (-),
-.
McGill, T., & Dixon, M. (). Spreadsheet knowledge: An exploratory
study. In Managing information in a global economy (p. -).
Vancouver, B.C.: Idea Group.
McGill, T., Hobbs, V., & Klobas, J. (). User-developed applications
and information systems success: A test of DeLone and McLean’s
model. Information Resources Management Journal, (), -.
McGill, T., & Klobas, J. (). User developed application success:
sources and effects of involvement. Behaviour & Information Tech-
nology, (), -.
McHaney, R., & Cronan, T. P. (). Computer simulation success:
On the use of the End-User Computing Satisfaction instrument: A
comment. Decision Sciences, (), -.
McHaney, R., Hightower, R., & Pearson, J. (). A validation of the end-
user computing satisfaction instrument in Taiwan. Information
Resources Management Journal, (), -.
McHaney, R., Hightower, R., & White, D. (). EUCS test-retest
reliability in representational model decision support systems.
Information & Management, (), -.
McKeen, J. D., Guimaraes, T., & Wetherbe, J. C. (). The relationship
between user participation and user satisfaction: An investigation
of four contingency factors. MIS Quarterly, (), -.
McKinney, V., Yoon, K., & Zahedi, F. M. (). The measurement of
Web-customer satisfaction: An expectation and disconfimation
approach. Information Systems Research, (), -.
McNamara, N., & Kirakowski, J. (). Measuring user-satisfaction
with electronic consumer products: The Consumer Products Ques-
tionnaire. International Journal of Human-Computer Studies, (),
-.
Melone, N. P. (). A theoretical assessment of the user-satisfaction
construct in information systems research. Management Science,
(), -.
Miller, J., & Doyle, B. A. (). Measuring the effectiveness of computer-
based information systems in the financial sector. MIS Quarterly,
(), -.
Millington, P., & Nixon, W. J. (). EPrints  pre-launch briefing.
Ariadne().
Mirani, R., & King, W. R. (). The development of a measure for
end-user computing support. Decision Sciences, (), -.
Molyneux, R. E. (). Evergreen in context. Bulletin of the American
Society for Information Science and Technology, (), -.
Monge, P., Bachman, S., Dillard, J. P., & Eisenberg, E. (). Com-
municator competence in the workplace: Model testing and scale
bibliography 
development. In M. Burgoon (Ed.), Communication yearbook 
(p. -). New Brunswick, NJ: International Communication
Association.
Montezami, A. R. (). Factors affecting information satisfaction in
the context of small business environment. MIS Quarterly, (),
-.
Moody, G. (). Rebel code: Linux and the open source revolution.
London: Penguin.
Morgan, E. L. (). MyLibrary: A digital library framework and
toolkit. Information Technology and Libraries, (), -.
Mullany, M. J., Tan, F. B., & Gallupe, R. B. (). The S-Statistic: A
measure of user satisfaction baseed on Herzberg’s theory of motivation.
Paper read at ACIS .
Mullany, M. J., Tan, F. B., & Gallupe, R. B. (). The impact of analyst-
user cognitive style differences on user satisfaction. Paper read at
th Pacific-Asia Conference on Information Systems.
Munro, M. C., Huff, S. L., Marcolin, B. L., & Compeau, D. R. ().
Understanding and measuring user competence. Information &
Management, (), -.
Muylle, S., Moenaert, R., & Despontin, M. (). The conceptualization
and empirical validation of web site user satisfaction. Information
& Management, (), -.
Neiderman, F., Davis, A., Greiner, M. E., Wynn, D., & York, P. T. (a).
A research agenda for studying open source I: A multi-level frame-
work. Communications of the Association for Information Systems,
(), -.
Neiderman, F., Davis, A., Greiner, M. E., Wynn, D., & York, P. T. (b).
A research agenda for studying open source II: View through
the lens of referent discipline theories. Communications of the
Association for Information Systems, (), -.
Nelson, M., Sen, R., & Subramaniam, C. (). Understanding open
source software: A research classification framework. Communica-
tions of the Association for Information Systems, (), -.
Nelson, R. R., & Cheney, P. H. (). Training end users: an exploratory
study. MIS Quarterly, (), -.
Netcraft. (). Web server survey. Retrieved //, from http://
news.netcraft.com/archives/category/web-server-survey/
Ngamkajornwiwat, K., Zhang, D., Koru, A. G., Zhou, L., & Nolker, R.
(). An exploratory study on the evolution of OSS developer
communities. Paper read at st Hawaii International Conference
on System Sciences.
Nielsen, J. (, October). Participation inequality: Encouraging more
users to contribute. Alertbox.
Ohira, M., Ohsugi, N., Ohoka, T., & Matsumoto, K.-I. (). Acceler-
ating cross-project knowledge collaboration using collaborative
filtering and social networks. In A. E. Hassan, R. C. Holt, & S. Diehl
 bibliography
(Eds.), MSR : Proceedings nd International Workshop on Min-
ing Software Repositories, St. Louis, Missouri (p. -). New
York: ACM.
Oliver, R. L. (). Satisfaction: A behavioral perspective on the consumer.
Boston: Irwin McGraw-Hill.
Oliver, R. L. (). Satisfaction: A behavioral perspective on the consumer
(nd ed.). Armonk, NY: M.E. Sharpe.
Olson, M. H., & Ives, B. (). Measuring user involvement in information
system development. Paper read at th International Conference
on Information Systems, - December, at Washington, DC.
Ong, C.-S., & Lai, J.-Y. (). Measuring user satisfaction with knowl-
edge management systems: Scale development, purification, and
initial test. Computers in Human Behavior, (), -.
Open Source Initiative. (a). History of the OSI. Retrieved //,
from http://www.opensource.org/history
Open Source Initiative. (b). Licenses by name. Retrieved //,
from http://opensource.org/licenses/alphabetical
Orlikowski, W. J., & Baroudi, J. J. (). Studying information tech-
nology in organizations: Research approaches and assumptions.
Information Systems Research, (), -.
Orwell, G. (). Politics and the English language. In S. Orwell
& I. Angus (Eds.), Collected essays, journalism, and letters (Vol. ,
p. -). Secker & Warburg.
Palvia, P. C. (). A model and instrument for measuring small busi-
ness user satisfaction with information technology. Information &
Management, , -.
Palvia, P. C., & Palvia, S. C. (). An examination of the IT satisfaction
of small business users. Information & Management, (), -
.
Palvia, S. C. (/). Effectiveness of asynchronous and syn-
chronous modes for learning computer software for end users:
An experimental investigation. Journal of Computer Information
Systems, (), -.
Peytchev, A., Couper, M. P., McCabe, S. E., & Crawford, S. D. ().
Web survey design: Paging vs scrolling. Public Opinion Quarterly,
(), -.
Pickard, A. J. (). Research methods in information. London: Facet.
Porter, S. R. (, Spring). Raising response rates: What works? New
Directions for Institutional Research, -.
Porter, S. R., Whitcomb, M. E., & Weitzer, W. H. (, Spring). Mul-
tiple surveys of students and survey fatigue. New Directions for
Institutional Research, -.
Powers, R. F., & Dickson, G. W. (). MIS project management:
Myths, opinions, and reality. California Management Review, (),
-.
bibliography 
Presser, S., Couper, M. P., Lessler, J. T., Martin, E., Martin, J., Rothgeb,
J. M., et al. (). Methods for testing and evaluating survey
questions. Public Opinion Quarterly, (), -.
Rai, A., Lang, S. S., & Welker, R. B. (). Assessing the validity
of IS success models: An empirical test and theoretical models.
Information Systems Research, (), -.
Ramasubbu, N., Mithas, S., & Krishnan, M. (). High tech, high
touch: The effect of employee skills and customer heterogeneity
on customer satisfaction with enterprise system support services.
Decision Support Systems, (), -.
Ranganathan, S. R. (). The five laws of library science (nd ed.).
Bombay: Asia Publishing House.
Ransom, J., Cormack, C., & Blake, R. (). How hard can it be? :
Developing in open source. The CodeLib Journal().
Raymond, E. S. (). The cathedral and the bazaar. In The cathedral
and the bazaar: Musings on Linux and open source by an accidental
revolutionary (Rev. ed., p. -). Sebastopol, CA: O’Reilly.
Raymond, L. (). Organizational characteristics and MIS success in
the context of small business. MIS Quarterly, (), -.
Raymond, L. (). Validating and applying user satisfaction as a
measure of MIS success in small organizations. Information &
Management, (), -.
Rea, L. M., & Parker, R. A. (). Designing and conducting survey
research: A comprehensive guide (rd ed.). San Francisco, CA: Jossey-
Bass.
Rizzo, J. R., House, R. J., & Lirtzman, S. I. (). Role conflict and am-
biguity. In W. O. Bearden, R. G. Netemeyer, & M. F. Mobley (Eds.),
Handbook of marketing scales: Multi-item measures for marketing and
consumer behavior research (p. -). Newbury Park, CA: Sage.
Roberts, J. A., Hann, I.-H., & Slaughter, S. A. (). Understanding
the motivations, participation, and performance of open source
software developers: A longitudinal study of the Apache projects.
Management Science, (), -.
Robey, D., & Farrow, D. (). User involvement in information system
development: A conflict model and empirical test. Management
Science, (), -.
Robey, D., Farrow, D., & Franz, C. R. (). Group process and conflict
in system development. Management Science, (), -.
Rogers, E. M. (). Diffusion of innovations (th ed.). New York: Free
Press.
Rosenkerantz, S. A., Luthans, F., & Hennessey, H. W. (). Role conflict
and ambiguity scales: An evaluation of psychometric properties
and the roles of social desirability response bias. Educational and
Psychological Measurement, (), -.
Rothfuss, G. J. (). A framework for open source projects. Unpublished
master’s thesis, Department of Information Technology, University
 bibliography
of Zurich, Zurich.
Ruane, J. M. (). Essentials of research methods: A guide to social science
research. Malden, MA: Blackwell.
Saarinen, T. (). An expanded instrument for evaluating information
system success. Information & Management, (), -.
Sabherwal, R., Jeyaraj, A., & Chowa, C. (). Information system
success: Individual and organizational determinants. Management
Science, (), -.
Sagers, G. W. (). The influence of network governance factors on
success in open source software development practices. In ICIS
 Proceedings (p. -). Atlanta, GA: AIS.
Saleem, N. (). An empirical test of the contingency approach to
user participation in information systems development. Journal of
Management Information Systems, (), -.
Sanders, G. L., & Courtney, J. F. (). A field study of organisational
factors influencing DSS success. MIS Quarterly, (), -.
Sandvig, J. C., Tyran, C. K., & Ross, S. C. (). Determinants of gradu-
ating MIS student starting salary in boom and bust job markets.
Communications of the Association for Information Systems, (),
-.
Santhanam, R., Guimaraes, T., & George, J. F. (). An empirical
investigation of ODSS impact on individuals and organizations.
Decision Support Systems, (), -.
Scacchi, W. (). Understanding the requirements for developing
open source software systems. IEE Proceedings Software, (),
-.
Scacchi, W. (). Free and open source development practices in the
game community. IEEE Software, (), -.
Scacchi, W. (a). Emerging patterns of intersection and segmenta-
tion when computerization movements interact. In K. L. Kramer
& M. S. Elliott (Eds.), Computerization movements and technology
diffusion: From mainframes to ubiquitous computing (p. -).
Medford, NJ: Information Today.
Scacchi, W. (b). Free/open source software development: Recent
research results and methods. Advances in Computers, , -.
Scharf, E. D. (). Open source: A conceptual framework for collabo-
rative artifact and knowledge construction. Unpublished doctoral
dissertation, University of Colorado, Department of Computer
Science.
Schrauf, R. W., & Navarro, E. (). Using existing tests and scales in
the field. Field Methods, (), -.
Schweik, C., & Semenov, A. (). The institutional design of open
souce programming: Implications for addressing complex public
policy and management problems. First Monday, .
Scozzi, B., Crowston, K., Eseryel, U. Y., & Li, Q. (). Shared mental
models among open source software developers. Paper read at st
bibliography 
Hawaii International Conference on System Sciences.
Seddon, P., & Yip, S.-K. (). An empirical evaluation of user in-
formation satisfaction (UIS) measures for use with general ledger
accounting software. Journal of Information Systems, (), -.
Seddon, P., & Yip, S.-K. (). A partial test and development of the
DeLone and McLean model of IS success. Paper read at Interna-
tional Conference on Information Systems, - December, at
Vancouver, B.C.
Seddon, P. B., Staples, S., Patnayakuni, R., & Bowtell, M. (). Di-
mensions of information systems success. Communications of the
Association for Information Systems, ().
Sedera, D., & Tan, F. T. C. (). User satisfaction: An overarching
measure of enterprise system success. Paper read at Pacific Asia
Conference on Information Systems, - July, Bangkok, Thailand.
Sengupta, K., & Zviran, M. (). Measuring user satisfaction in
an outsourcing environment. IEEE Transactions on Engineering
Management, (), -.
Sessoms, P., & Sessoms, E. (). LibraryHlp: A new flexible chat
reference system. The CodeLib Journal().
Shah, S. K. (). Motivation, governance, and the viability of hybrid
forms in open source software development. Management Science,
(), -.
Sharma, R., & Yetton, P. (). The contingent effects of training, tech-
nical complexity, and task interdependence on successful informa-
tion systems implementation. MIS Quarterly, (), -.
Sharma, S., Durand, R. M., & Gur-Arie, O. (). Identification and
analysis of moderator variables. Journal of Marketing Research,
(-).
Shih, C.-C., & Huang, S.-J. (). Exploring the relationship between
organizational culture and software process improvement deploy-
ment. Information & Management, (-), -.
Shih, H.-P. (). An empirical study on predicting user acceptance
of e-shopping on the Web. Information & Management, (), -
.
Shirani, A., Aiken, M., & Reithel, B. (). A model of user information
satisfaction. Data Base, (), -.
Simon, S. J., Grover, F., Teng, J. T., & Whticomb, K. (). The rela-
tionship of information training methods and cognitive ability to
end-user satisfaction, comprehension, and skill transfer: A longi-
tudinal field study. Information Systems Research, (), -.
Singh, V., Twidale, M. B., & Nichols, D. M. (). Users of open source
software: How do they get help? Paper read at nd Hawaii Interna-
tional Conference on System Sciences.
Smith, B. (n.d.). A quick guide to GPLv. Retrieved //, from
http://www.gnu.org/licenses/quick-guide-gplv3.html
 bibliography
Smith, L. W. (). What is proprietary in mathematical programming?
impressions of a panel discussion. Communications of the ACM,
(), , .
Somers, T. M., Nelson, K., & Karimi, J. (). Confirmatory factor analy-
sis of the end-user computing satisfaction instrument : replication
within an ERP doman. Decision Sciences, (), -.
Spaeth, S., Stuermer, M., & von Krogh, G. (). Sampling in open source
software development: The case for using the Debian GNU/Linux
distribution. Paper read at th Hawai’i International Conference
on System System, Kaua’i, Hawai’i.
Stallman, R. (). The GNU operating system and the free software
movement. In C. DiBona, S. Ockman, & M. Stone (Eds.), Open
sources: Voices from the open source revolution (p. -). Sebastopol,
CA: O’Reilly.
Stallman, R. (). Free software reality v. perception: Letter to the
editor. Communications of the ACM, (), -.
Stallman, R. (). Did you say “intellectual property”? It’s a seduc-
tive mirage. Available from http://www.gnu.org/philosophy/
not-ipr.html
Stark, J. (). Peer reviews as a quality management technique in open-
source software development projects. In G. Goos, J. Hartmanis, &
J. van Leeuwen (Eds.), Software quality — ECSQ  (p. -).
Berlin: Springer.
Stewart, K. J., & Gosain, S. (). The impact of ideology in effectiveness
in open source software development teams. MIS Quarterly, (),
-.
Stoutenborough, J. W. (). Semantic differential technique. In
Encyclopedia of survey research methods. Thousand Oaks, CA: Sage
Online.
Stranack, K. (). The reSearcher software suite: A case study of li-
brary collaboration and open source software development. Serials
Librarian, (/), -.
Studer, M. (). Community structure, individual participation
and the social construction of merit. In J. Feller, B. Fitzgerald,
W. Scacchi, & A. Sillitti (Eds.), Open source development, adoption
and innovation: IFIP Working Group . on Open Source Software,
June –, , Limerick, Ireland (p. -). Boston: Springer.
Stürmer, M. (). Open source community building. Licentiate, Faculty
of Economics and Social Science, University of Bern, Bern.
Subramanyan, R., Weisstein, F. L., & Krishnan, M. (). User partici-
pation in software development projects. Communications of the
ACM, (), -.
Sun, H., & Zhang, P. (). The role of moderating factors in user
technology acceptance. International Journal of Human-Computer
Studies, (), -.
bibliography 
Sun, J., & Poole, M. S. (). Capturing user readiness to interact with
information systems: An activity perspecive. The Data Base for
Advances in Information Systems, (), -.
Tait, P., & Vessey, I. (). The effect of user involvement on system
success: A contingency approach. MIS Quarterly, (), -.
Tan, B. W., & Lo, T. W. (). Validation of a user satisfaction instru-
ment for office automation success. Information & Management,
(), -.
Thong, J. Y., & Yap, C.-S. (). Information systems effectiveness: A
user satisfaction approach. Information Processing & Management,
(), -.
Tojib, D. R., Sugianto, L.-F., & Sendjaya, S. (). User satisfaction
with business-to-employee portals: conceptualisation and scale
development. European Journal of Information Systems, (), -
.
Torkzadeh, G., & Lee, J. (). Measures of perceived end-user com-
puting skills. Information & Management, (), -.
Torvalds, L. (). Free minix-like kernel sources for -at
[comp.os.minix newsgroup].
Torvalds, L., & DIamond, D. (). Just for fun: The story of an accidental
revolutionary. New York: HarperBusiness.
Townsend, A. M., Demaire, S. M., & Hendrickson, A. R. (). Desktop
video conferencing in virtual workgroups: Anticipation, system
evaluation and performance. Information Systems Journal, (),
-.
Umbach, P. D. (, Spring). Web surveys: Best practices. New
Directions for Institutional Research, -.
University of Minnesota. Department of Psychology. (). Minnesota
satisfaction questionnaire. Retrieved //, from http://www
.psych.umn.edu/psylabs/vpr/msqinf.htm
Vankatesh, V., Morris, M. G., Davis, G. B., & Davis, F. D. (). User
acceptance of information technology: toward a unified view. MIS
Quarterly, (), -.
Ven, K., & Verelst, J. (). The impact of ideology on the organizational
adoption of open source software. Journal of Database Management,
(), -.
von Krogh, G., Spaeth, S., & Lakhani, K. R. (). Community, joining,
and specialization in open source software innovation: a case study.
Research Policy, (), -.
Walejko, G. (). Online survey: Instant publication, instant mistake,
all of the above. In E. Hargittai (Ed.), Research confidential: Solutions
to problems most social scientists pretend they never have (p. -).
Ann Arbor: University of Michigan Press.
Walker, J. (). DSpace: A case study in sustainabil-
ity. Retrieved //, from http://www.oss-watch.ac.uk/
resources/cs-dspace.xml
 bibliography
Want, Y.-S., & Liao, Y.-W. (). The conceptualization and mea-
surement of m-commerce user satisfaction. Computers in Human
Behavior, (), -.
Watson, R. T., Pitt, L. F., Cunningham, C. J., & Nel, D. (). User
satisfaction and service quality of the is department: Closing the
gaps. Journal of Information Technology, (), -.
West, J., & O’Mahony, S. (). The role of participation architecture
in growing sponsored open source communities. Industry and
Innovation, (), -.
Whitten, D. (-). User information satisfaction scale reduction:
Application in an outsourcing environment. Journal of Computer
Information Systems, (), -.
Williams, D., & Xiong, L. (). Herding cats online: Real studies of
virtual communities. In E. Hargittai (Ed.), Research confidential:
Solutions to problems most social scientists pretend they never have
(p. -). Ann Arbor: University of Michigan Press.
Williams, S. (). Free as in freedom: Richard Stallman’s crusade for free
software. Sebastopol, CA: O’Reilly.
Willinsky, J. (). The access principle. Cambridge, MA: MIT Press.
Witten, I. H., & Bainbridge, D. (). A retrospective look at Green-
stone: Lessons from the first decade. In Cdl ’: Proceedings of the
th acm/ieee-cs joint conference on digital libraries (p. -). New
York: ACM.
Witten, I. H., Boddie, S. J., Bainbridge, D., & McNab, R. J. ().
Greenstone: A comprehensive open-source digital library software
system. In DL ’: Proceedings of the fifth ACM conference on Digital
Libraries (p. -). New York: ACM.
Wixom, B. H., & Todd, P. A. (). A theoretical integration of user sat-
isfaction and technology acceptance. Information Systems Research,
(), -.
Wu, C.-G., Gerlach, J. H., & Young, C. E. (). An empirical analysis
of open source software developers’ motivations and continuance
intentions. Information & Management, (), -.
Xiao, L., & Dasgupta, S. (). Measurement of user satisfaction with
Web-based information systems: An empirical study. Paper read at
th Americas Conference on Information Systems.
Xu, J., Gao, Y., Christley, S., & Madey, G. (). A topological analysis of
the open source software development community. Paper read at th
Hawaii International Conference on System Sciences.
Ye, Y., & Kishida, K. (). Toward an understanding of the moti-
vation of open source software developers. In Proceedings of the
th international conference on software engineering (p. -).
Washington, DC: IEEE Computer Society. Paper read at th Inter-
national Conference on Software Engineering.
Ye, Y., Nakakoji, K., Yamamoto, H., & Kishida, K. (). The co-
evolution of systems and communities in free and open source
bibliography 
software development. In S. Koch (Ed.), Free/open source software
development (p. -). Hershey, PA: Idea Group.
Yoon, Y., & Guimaraes, T. (). Assessing expert systems impact
on users’ jobs. Journal of Management Information Systems, (),
-.
Yoon, Y., Guimaraes, T., & O’Neal, Q. (). Exploring factors associ-
ated with expert systems sucess. MIS Quarterly, (), -.
Yun, G. W., & Trumbo, C. W. (). Comparative response to a survey
executed by post, e-mail, and web form. Journal of Computer-
Mediated Communication, ().
Zhang, P., & Dran, G. M. von. (). Satisfiers and dissatisfiers: A
two-factor model for website design and evaluation. Journal of the
American Society for Information Science, (), -.
Zhao, L., & Deek, F. P. (). User collaboration in open source software
development. Electronic Markets, (), -.
Zviran, M., & Erlich, Z. (). Measuring IS user satisfaction: Review
and implications. Comunications of the Association for Information
Systems, , -.
Zviran, M., Glezer, C., & Avni, I. (). User satisfaction from com-
mercial web sites: The effect of design and use. Information &
Management, (), -.

colophon
This thesis was typeset with LATEXε using the free/libre Kp-Fonts pack-
age by Christophe Caignaert. This type face is available for LATEX via
CTAN as “kpfonts”.
The typographic style was inspired by Robert Bringhurst’s genius as
presented in The Elements of Typographic Style (). It is available for
LATEX via CTAN as “classicthesis”.
note: The custom size of the textblock was calculated using the
directions given by Mr. Bringhurst (pages – and /).
To make your own calculations, use the following commands and look
up the corresponding lengths in Bringhurst’s book:
\settowidth{\abcd}{abcdefghijklmnopqrstuvwxyz}
\the\abcd % prints the value of the length
Please see the file classicthesis.sty for some precalculated values for
Palatino and Minion.
Final Version as of July ,  at :.
